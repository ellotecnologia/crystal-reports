unit PAGEOBJECTMODELLib_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : $Revision:   1.130  $
// File generated on 26/11/2010 18:35:46 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll (1)
// LIBID: {4C96B7BA-7518-4EE6-90C9-569D395880CA}
// LCID: 0
// Helpfile: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
//   (2) v1.0 CrystalReportsReportDefModelLib, (C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\rptdefmodel.dll)
//   (3) v1.0 CrystalReportsDataDefModelLib, (C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\datadefmodel.dll)
//   (4) v1.0 CrystalReportsCommonObjectModelLib, (C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\commonobjmodel.dll)
//   (5) v4.0 StdVCL, (C:\WINDOWS\system32\stdvcl40.dll)
// Errors:
//   Hint: Parameter 'property' of ISCRReportObjectInstance.IsPropertyOverridden changed to 'property_'
//   Hint: Parameter 'property' of ISCRRuntimeBorder.IsPropertyOverridden changed to 'property_'
//   Hint: Parameter 'property' of ISCRSectionInstance.IsPropertyOverridden changed to 'property_'
//   Hint: Parameter 'property' of ISCRRuntimeFontColor.IsPropertyOverridden changed to 'property_'
//   Hint: Member 'type' of 'tagSTATSTG' changed to 'type_'
//   Error creating palette bitmap of (TPageObjectFactory) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TPlaceHolderObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TFieldObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TTextObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TReportObjectInstances) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TChartObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TNumericFieldObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TFieldObjectInstanceInGrid) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TNumericFieldObjectInstanceInGrid) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TTextObjectInstanceInGrid) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TRuntimeParagraph) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TRuntimeParagraphs) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TTextLine) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TTextLines) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TGroupTreeNodeID) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TSectionInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TSubreportObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TOnDemandSubreportObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TSectionInstances) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TPageObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TStringFieldObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TStringFieldObjectInstanceInGrid) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TSubreportContext) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TLineObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TBoxObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TMapObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TOleObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TFlashObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TBlobFieldObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TGridRowInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TGridColumnInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TGridLabelInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TGridAreaInstances) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TGridLineInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TGridLineInstances) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TCrossTabObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TOlapObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TOlapSectHeadObjectInstance) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TLineObjectInstances) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TBoxObjectInstances) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TRuntimeBorder) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TRuntimeFontColor) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TRuntimeParagraphElements) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TRuntimeParagraphTextElement) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TRuntimeParagraphTabElement) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TTabUnit) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TTabUnits) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TGroupTree) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TGroupTreeNode) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TGroupTreeNodes) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TCRGridContent) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TEPFFactory) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TETFFactory) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TToolbar) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TToolbarControls) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TToolbarButtonControl) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TToolbarLabelControl) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TToolbarTextBoxControl) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TToolbarListItem) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TToolbarListItemCollection) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TToolbarComboBoxControl) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TToolbarSeparatorControl) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TRuntimeIndentAndSpacingFormat) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TRuntimeStringFieldFormat) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TRuntimeFont) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TRuntimeTabStops) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TRuntimeTabStop) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TViewContext) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
//   Error creating palette bitmap of (TDebugInformation) : Server C:\Arquivos de programas\Business Objects\BusinessObjects Enterprise 12.0\win32_x86\pageobjectmodel.dll contains no icons
// ************************************************************************ //
// *************************************************************************//
// NOTE:                                                                      
// Items guarded by $IFDEF_LIVE_SERVER_AT_DESIGN_TIME are used by properties  
// which return objects that may need to be explicitly created via a function 
// call prior to any access via the property. These items have been disabled  
// in order to prevent accidental use from within the object inspector. You   
// may enable them by defining LIVE_SERVER_AT_DESIGN_TIME or by selectively   
// removing them from the $IFDEF blocks. However, such items must still be    
// programmatically created via a method of the appropriate CoClass before    
// they can be used.                                                          
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}

interface

uses ActiveX, Classes, CrystalReportsCommonObjectModelLib_TLB, CrystalReportsDataDefModelLib_TLB, CrystalReportsReportDefModelLib_TLB, Graphics, OleServer, 
StdVCL, Variants, Windows;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  PAGEOBJECTMODELLibMajorVersion = 12;
  PAGEOBJECTMODELLibMinorVersion = 0;

  LIBID_PAGEOBJECTMODELLib: TGUID = '{4C96B7BA-7518-4EE6-90C9-569D395880CA}';

  IID_ISCRReportObjectInstance: TGUID = '{25931A5B-FBA3-4959-9994-4D9289AF58E2}';
  IID_ISCRRuntimeBorder: TGUID = '{59F0A351-A7FC-4712-9254-C19C43C1959E}';
  IID_ISCRReportPartBookmark: TGUID = '{A646DE73-C49C-4EC6-B389-66E988A80AEE}';
  IID_ISCRReportPartID: TGUID = '{74E860DA-CF25-4B9C-AD73-231203974D03}';
  IID_ISCRPageObjectInstance: TGUID = '{AFCE37DB-BB07-42F1-BBB5-1473AF40530F}';
  IID_ISCRSectionInstances: TGUID = '{B8E83213-97DE-4A5A-9697-854DC45FAFFF}';
  IID_ISCRSectionInstance: TGUID = '{B185D51C-8588-430A-964F-DB61FFB6505E}';
  IID_ISCRGroupTreeNodeID: TGUID = '{8DC3E28A-D8C7-4A48-9443-7AD787796C6C}';
  IID_ISCRReportObjectInstances: TGUID = '{F62D5420-A6F4-4513-A4D4-137A0BC0E2A6}';
  IID_ISCRLineObjectInstances: TGUID = '{DD3209EA-DFD0-4F60-9E33-1B676BB8D603}';
  IID_ISCRDrawingObjectInstance: TGUID = '{37819D51-72B4-4B03-ABB6-0AA3BB4B1FB8}';
  IID_ISCRLineObjectInstance: TGUID = '{82033D34-CF17-469A-ABB1-A1A338F545D6}';
  IID_ISCRBoxObjectInstances: TGUID = '{CFE1896F-B6BC-48C5-86DF-F6B1390A77EC}';
  IID_ISCRBoxObjectInstance: TGUID = '{74742555-4C6C-49CB-9D89-A47B4C737FEB}';
  IID_ISCRSubreportContext: TGUID = '{6236DD50-909F-4499-B01D-3508EEF7ACF7}';
  IID_ISCRPageObjectFactory: TGUID = '{1EC6DAF9-763E-461F-9534-F9E2C59DB4C5}';
  IID_ISCRRuntimeFontColor: TGUID = '{E4E64E45-62BC-4F2B-AF30-7D233C51BBC9}';
  IID_ISCRFont: TGUID = '{0EB4306F-6B82-4EB4-A846-B1A4094362DC}';
  IID_ISCRRuntimeParagraphElement: TGUID = '{F002D226-8B86-4883-8295-0F961DDE972A}';
  IID_ISCRRuntimeParagraphTabElement: TGUID = '{23470B56-4B55-4E27-A212-91DA1404725A}';
  IID_ISCRRuntimeParagraphTextElement: TGUID = '{74CFB714-3BB6-4F61-9ED4-B89AC902C9B3}';
  IID_ISCRRuntimeParagraphElements: TGUID = '{B1B51401-F0DF-437B-98A1-CFE6E24E14A2}';
  IID_ISCRTabUnit: TGUID = '{486A6AEC-B2D7-4154-B547-7E0A9C98DF99}';
  IID_ISCRTabUnitEx: TGUID = '{33A7E20F-755F-4F9F-9F93-4F4F2F219F1C}';
  IID_ISCRTabUnits: TGUID = '{5A04C745-0F30-4A2D-87D7-931D9544FAFA}';
  IID_ISCRTextLine: TGUID = '{67BE28CE-6B1F-47F9-841C-8E8086625BE5}';
  IID_ISCRTextLineEx: TGUID = '{DB323976-70CB-44D6-AA72-544E66A7958C}';
  IID_ISCRTextLines: TGUID = '{F647BBBE-C718-47C2-BA96-99E5B5046D27}';
  IID_ISCRRuntimeParagraph: TGUID = '{55F4FF93-FF32-4FD5-8D1E-54ED4173E36C}';
  IID_ISCRIndentAndSpacingFormat: TGUID = '{F1B5CC5F-1D63-45D0-95F3-5C1976B21F84}';
  IID_ISCRTabStops: TGUID = '{ED554AB8-88F1-40D1-92AF-32AD54C1DF42}';
  IID_ISCRTabStop: TGUID = '{58D22FB1-B626-4A5D-951F-C6D6D5AF26BE}';
  IID_ISCRRuntimeParagraphs: TGUID = '{6CE91280-C132-4563-8101-E01B16267F74}';
  IID_ISCRGroupTreeNodeIDEx: TGUID = '{817BED9E-32DB-46B7-A3AD-DDFB7BC4330D}';
  IID_ISCRReportObjectInstanceEx: TGUID = '{DB586EC0-DAEF-42F0-9CF4-13FB67967625}';
  IID_ISCRPlaceHolderObjectInstance: TGUID = '{B4181B10-1711-11D5-80E4-00D0B73CA715}';
  IID_ISCRPlaceHolderObjectInstanceEx: TGUID = '{06996C50-6DBB-49DE-84EE-02A87162CFE1}';
  IID_ISCRSectionInstanceEx: TGUID = '{276BC652-4E00-4E20-AB9C-1D482B8DBDAF}';
  IID_ISCRFieldObjectInstance: TGUID = '{44A3DE30-6B12-4859-B675-3F0EC3DD4C36}';
  IID_ISCRFieldFormat: TGUID = '{27F13729-4915-49F3-87F9-566B626E2386}';
  IID_ISCRCommonFieldFormat: TGUID = '{731D6E04-2DA0-46B3-925C-E1A1B6764164}';
  IID_ISCRConditionFormulas: TGUID = '{EB94B307-87AC-48CF-824F-64106DA42F08}';
  IID_ISCRCommonFieldFormatConditionFormulas: TGUID = '{AB82EFD7-F28F-4A33-BCA9-9F0E13433BAE}';
  IID_ISCRConditionFormula: TGUID = '{D76ABCAB-8958-43EC-9B82-157B9D3500A4}';
  IID_ISCRBooleanFieldFormat: TGUID = '{49F46AB2-21F6-4063-BF6F-B51FF281F709}';
  IID_ISCRBooleanFieldFormatConditionFormulas: TGUID = '{27AB6FA6-A439-4406-8098-EADCD44A02C0}';
  IID_ISCRNumericFieldFormat: TGUID = '{ACF69926-C3C7-4754-AC83-292C83CFA556}';
  IID_ISCRNumericFieldFormatConditionFormulas: TGUID = '{5A5EB6CC-5069-4359-A36D-94645C837EDB}';
  IID_ISCRDateFieldFormat: TGUID = '{777DBB7D-9AAB-467D-A0EC-3D20C9203DC3}';
  IID_ISCRDateFieldFormatConditionFormulas: TGUID = '{05E888B8-D54F-4D57-9575-CAC03DB7F1BA}';
  IID_ISCRTimeFieldFormat: TGUID = '{5C045C6E-14D7-4407-8AB9-0E5689AC4CA1}';
  IID_ISCRTimeFieldFormatConditionFormulas: TGUID = '{AC0B874B-2B20-449B-A7D0-A4627AA423AB}';
  IID_ISCRDateTimeFieldFormat: TGUID = '{0EA2E948-9E1A-4DD0-A830-A0FB956110F8}';
  IID_ISCRDateTimeFieldFormatConditionFormulas: TGUID = '{4C195994-9BD9-488A-A9AA-B2071084F680}';
  IID_ISCRStringFieldFormat: TGUID = '{0690F48F-A415-43E4-9DB8-202A92F455C4}';
  IID_ISCRFieldObjectInstanceEx: TGUID = '{304E2F76-14B0-49A4-9B5F-B7221D93AA3E}';
  IID_ISCRFieldObjectInstanceInGrid: TGUID = '{AE0374FB-EF49-4A6B-80C0-1DBD14D41E0D}';
  IID_ISCRNumericFieldObjectInstance: TGUID = '{7EF438A6-0185-45CB-8CF1-67A2CE93F9BC}';
  IID_ISCRNumericFieldObjectInstanceEx: TGUID = '{8062C99B-716F-4E95-8B12-F7ADBF41D141}';
  IID_ISCRNumericFieldObjectInstanceInGrid: TGUID = '{5392C302-4DD3-4A7E-B246-9B91AE37CB36}';
  IID_ISCRTextObjectInstance: TGUID = '{83E6BD6F-76E0-4964-8902-18C45BBF4DE2}';
  IID_ISCRStringFieldObjectInstance: TGUID = '{1CBCB17C-9982-40CC-9384-19EE1F4F6101}';
  IID_ISCRStringFieldObjectInstanceEx: TGUID = '{209AECD7-ECF6-46E2-A85E-9058E53F805C}';
  IID_ISCRStringFieldObjectInstanceInGrid: TGUID = '{CFD56A9F-EE52-4043-8013-5005A1C853D9}';
  IID_ISCRTextObjectInstanceInGrid: TGUID = '{B6A8A12D-F811-4BEA-8DEE-8BFEA6236AEE}';
  IID_ISCRGraphicObjectInstance: TGUID = '{A8B7BFB0-575E-4F78-B80C-69D3BD88B84A}';
  IID_ISequentialStream: TGUID = '{0C733A30-2A1C-11CE-ADE5-00AA0044773D}';
  IID_IStream: TGUID = '{0000000C-0000-0000-C000-000000000046}';
  IID_ISCROleObjectInstance: TGUID = '{0B40FB2E-99A4-4DB6-8E83-3EAA68942FBA}';
  IID_ISCRFlashObjectInstance: TGUID = '{E1368757-31F4-4AE8-819D-857F9ECEEE48}';
  IID_ISCRFlashObjectInstanceEx: TGUID = '{0B3C468E-4D5C-4AE3-A368-66B79921D285}';
  IID_ISCRBlobFieldObjectInstance: TGUID = '{29746F56-DE32-4B1D-80E6-C2309552C272}';
  IID_ISCRAnalysisObjectInstance: TGUID = '{0A5AEBBE-ACD3-4F83-B2DE-A193A84C778E}';
  IID_ISCRChartObjectInstance: TGUID = '{85E0F245-EABA-455E-B232-17D347D72DE7}';
  IID_ISCRMapObjectInstance: TGUID = '{26819CFD-089D-4884-AF2A-08C126FB9E05}';
  IID_ISCRSubreportObjectInstanceBase: TGUID = '{116107E1-B006-459C-89CC-421128BBC527}';
  IID_ISCRSubreportObjectInstanceBaseEx: TGUID = '{68841C3E-11F8-4BB2-AED7-263A564E95E8}';
  IID_ISCRSubreportObjectInstance: TGUID = '{116107E2-B006-459C-89CC-421128BBC527}';
  IID_ISCROnDemandSubreportObjectInstance: TGUID = '{116107E3-B006-459C-89CC-421128BBC527}';
  IID_ISCROnDemandSubreportObjectInstanceEx: TGUID = '{57A19C10-B622-4AE5-B24E-84258310D4F4}';
  IID_ISCRGridLineInstance: TGUID = '{808C3FBD-1A2A-43AF-AD6E-F16DC577022A}';
  IID_ISCRGridLineInstances: TGUID = '{BA460C53-DC28-40E1-80E1-788C7BAE6131}';
  IID_ISCRGridAreaInstance: TGUID = '{C609E477-2272-45C8-B8B4-067761117B8F}';
  IID_ISCRGridAreaInstances: TGUID = '{22B018CE-4157-4882-B497-78F5D1FD6E27}';
  IID_ISCRGridRowInstance: TGUID = '{F943819E-EC22-4C6A-BBD2-8389CC7BD7EA}';
  IID_ISCRGridColumnInstance: TGUID = '{E6B94A8B-A025-45AC-827A-B2386DAB3821}';
  IID_ISCRGridLabelInstance: TGUID = '{10C7A28B-B50F-440F-82D4-65F16D80F9B7}';
  IID_ISCRCrossTabObjectInstance: TGUID = '{13814FB8-6F31-48EF-B645-FAB11C3E915C}';
  IID_ISCROlapSectHeadObjectInstance: TGUID = '{0843AFEC-8E65-415F-9E64-EAE1CBBF8CD3}';
  IID_ISCROlapObjectInstance: TGUID = '{DE286594-9688-4D73-963C-D4549F792CBC}';
  IID_ISCRGroupTreeNodes: TGUID = '{2C970BA6-4F7F-49AB-87FD-694B0AE0FD76}';
  IID_ISCRGroupTreeNode: TGUID = '{C5D4E9DD-615A-4FAF-9B82-9111BB6C918D}';
  IID_ISCRGroupTreeNodeEx: TGUID = '{4323E1B8-194E-4651-81A4-A77E7F03FD2B}';
  IID_ISCRGroupTree: TGUID = '{A91CEB69-21B1-41E1-A12B-03119711A4C9}';
  CLASS_PageObjectFactory: TGUID = '{98FC3C5C-E58E-4B88-B11C-BE3CED0AA8B3}';
  CLASS_PlaceHolderObjectInstance: TGUID = '{C0D2A2E6-C44D-4F9E-99E8-AB09E4230EEC}';
  CLASS_FieldObjectInstance: TGUID = '{FD1178DB-5AB2-4785-B661-34F22B333721}';
  CLASS_TextObjectInstance: TGUID = '{C441707A-954A-4787-A01C-F5F52E0192F0}';
  CLASS_ReportObjectInstances: TGUID = '{371D53A9-27DA-4D51-B7ED-56FA8B61375D}';
  CLASS_ChartObjectInstance: TGUID = '{689F493D-B038-4636-8B26-9C97276CF654}';
  CLASS_NumericFieldObjectInstance: TGUID = '{16B96D8E-7BA5-47F4-A7BA-56E80A831954}';
  CLASS_FieldObjectInstanceInGrid: TGUID = '{78A01793-3F6C-43F3-A77F-A9C1B0856C48}';
  CLASS_NumericFieldObjectInstanceInGrid: TGUID = '{7244DF35-D354-46FF-B60D-EB7C3F6C89AC}';
  CLASS_TextObjectInstanceInGrid: TGUID = '{28CCFA56-2441-4BE7-A637-97A4E54A11D9}';
  CLASS_RuntimeParagraph: TGUID = '{FFD74733-D093-40E5-895F-4B0BAEFC4D47}';
  CLASS_RuntimeParagraphs: TGUID = '{8BF0A3F9-B01F-4902-BDD3-AA9BA2237956}';
  CLASS_TextLine: TGUID = '{60818F72-713A-4EEF-A601-F6AED5DB571D}';
  CLASS_TextLines: TGUID = '{1CE7E45A-6939-4F0C-BBB9-4D07D25C905E}';
  CLASS_GroupTreeNodeID: TGUID = '{F5333742-B68D-4BD9-98F7-76D6D09A2934}';
  CLASS_SectionInstance: TGUID = '{C064B58C-FDCA-4B49-BBC7-27437080F459}';
  CLASS_SubreportObjectInstance: TGUID = '{35ED5EEE-CA83-4D20-8A89-FC295D69F0F1}';
  CLASS_OnDemandSubreportObjectInstance: TGUID = '{529C7D33-35D8-47B4-9040-23BA177FF13A}';
  CLASS_SectionInstances: TGUID = '{14F28892-AEF5-4917-AB89-95C6D3D53B55}';
  CLASS_PageObjectInstance: TGUID = '{01BFF5EC-91EB-48B6-8F8D-0AEE008561B8}';
  CLASS_StringFieldObjectInstance: TGUID = '{92F0B088-920D-4081-B612-8913E981D644}';
  CLASS_StringFieldObjectInstanceInGrid: TGUID = '{CD1327C4-E961-4B39-A39D-59F0CDE48F4D}';
  CLASS_SubreportContext: TGUID = '{C827B45D-BA5D-47E1-8889-AA303E654A27}';
  CLASS_LineObjectInstance: TGUID = '{E6FE1508-37F5-4BE3-8890-D9CC9526E6DD}';
  CLASS_BoxObjectInstance: TGUID = '{D4E1430D-779B-4EE7-A188-DDED2D4D94F5}';
  CLASS_MapObjectInstance: TGUID = '{9A80D649-6CA4-4DA3-ABC2-69DA7D12107B}';
  CLASS_OleObjectInstance: TGUID = '{692F3D79-D04C-4503-9F64-E2EC86BB68D5}';
  CLASS_FlashObjectInstance: TGUID = '{774965B5-A3F0-494C-86C7-A7B5126BB19F}';
  CLASS_BlobFieldObjectInstance: TGUID = '{25E6FEE2-3E54-4FF7-8159-E24BF9B6095D}';
  CLASS_GridRowInstance: TGUID = '{50A4B4C6-D293-4BF5-BE81-7130E82E86A8}';
  CLASS_GridColumnInstance: TGUID = '{2ED106E0-4AA4-4AB1-BF51-052AA914DCE3}';
  CLASS_GridLabelInstance: TGUID = '{FABF43AC-2F86-4A33-A303-9EF22CECDDE6}';
  CLASS_GridAreaInstances: TGUID = '{522DC01A-E879-4A5F-B8A7-98C34F376131}';
  CLASS_GridLineInstance: TGUID = '{3230FAD3-FB36-4BA4-8A8C-7174698E511B}';
  CLASS_GridLineInstances: TGUID = '{E85C5868-F8F2-44E9-BCBE-DC8EDFEF1580}';
  CLASS_CrossTabObjectInstance: TGUID = '{A2B2EBBE-F906-49DD-A06E-15F62B3F6459}';
  CLASS_OlapObjectInstance: TGUID = '{378E48BD-E52C-4482-8A29-4765CC739374}';
  CLASS_OlapSectHeadObjectInstance: TGUID = '{E584BDBA-D4CA-4E72-BA95-ACC394A3A9FB}';
  CLASS_LineObjectInstances: TGUID = '{F7DA1F32-379C-4012-A471-332AE462C1C5}';
  CLASS_BoxObjectInstances: TGUID = '{338C071C-FDFC-46B9-912A-D319BF8EDA1E}';
  CLASS_RuntimeBorder: TGUID = '{24277005-34EA-4BAB-A1F8-B3C47D7D5A13}';
  CLASS_RuntimeFontColor: TGUID = '{3E9CD76F-DB29-4D0C-9B6F-FF2D41616F8E}';
  CLASS_RuntimeParagraphElements: TGUID = '{090864D5-88D4-4996-8BE3-0B5D96729994}';
  CLASS_RuntimeParagraphTextElement: TGUID = '{3AA1C0EC-D003-4D28-9246-442AF974CC8B}';
  CLASS_RuntimeParagraphTabElement: TGUID = '{248458B7-B697-4D93-9E09-B01F87517D23}';
  CLASS_TabUnit: TGUID = '{DE1CEE92-EB81-4C3D-94D8-B2F016444A7C}';
  CLASS_TabUnits: TGUID = '{C74A62F2-3F1A-49BA-8A32-16D145699710}';
  CLASS_GroupTree: TGUID = '{BF6467B5-C165-4011-900A-41D4B8BD52E8}';
  CLASS_GroupTreeNode: TGUID = '{41E1A2BB-295C-4C3B-B570-1F4A6DCE2187}';
  CLASS_GroupTreeNodes: TGUID = '{9BA08CE1-C1B5-4AFB-BE31-3C5BABC7AD67}';
  IID_ISCRToolbar: TGUID = '{952C196D-9307-4A58-9F92-96C18354CAC7}';
  IID_ISCRToolbarControls: TGUID = '{8A89BBC1-798C-4980-9758-7DFB83FAFEEB}';
  IID_ISCRToolbarControlBase: TGUID = '{B7B8C925-937E-4323-ADB2-D57AFE14B50F}';
  IID_IGridColumnCollection: TGUID = '{A7D4BAEA-B9A6-4DAF-B572-163DC8845065}';
  IID_IGridColumn: TGUID = '{E4FBA702-8CD1-4A8A-8D69-B86B6F5EFFB5}';
  IID_ICRGridContent: TGUID = '{B6A545F8-E6B1-4EE3-879B-AB93C943B99C}';
  CLASS_CRGridContent: TGUID = '{45777A3E-CEB7-4186-A7AD-BA63817A82EA}';
  IID_ISCREPFFactory: TGUID = '{A61E7792-3E6E-4C11-8BBF-A302B50A9991}';
  IID_ISCRETFFactory: TGUID = '{F2FDE6FE-8E54-4257-84C9-3CA9AF4A8B4A}';
  CLASS_EPFFactory: TGUID = '{886CC075-75B3-44B6-88FE-106B5D3600D2}';
  CLASS_ETFFactory: TGUID = '{6EFC46C1-3704-4DDC-A488-C0D17E08CC4A}';
  IID_ISCRToolbarControlBaseEx: TGUID = '{3C0FA78D-164D-4A07-8245-8E88B4A29408}';
  IID_ISCRToolbarButtonControl: TGUID = '{71BAEA56-9369-4CA4-83D9-86844DA0CD71}';
  IID_ISCRToolbarButtonControlEx: TGUID = '{9C5DA9BA-AFB7-4F28-928C-274BD855B6AB}';
  IID_ISCRToolbarListItem: TGUID = '{D269B38F-1DED-4493-B326-DDFCECB224DB}';
  IID_ISCRToolbarListItemEx: TGUID = '{2EC347AD-E83C-4542-899B-01165C87F1A7}';
  IID_ISCRToolbarListItemCollection: TGUID = '{6BED962C-A63D-43B0-B347-3CE8EFC0227A}';
  IID_ISCRToolbarComboBoxControl: TGUID = '{90307F79-690F-4FE1-B884-126BA55A975B}';
  IID_ISCRToolbarLabelControl: TGUID = '{8595CE2B-75FD-4387-BEE7-FF0ACE995757}';
  IID_ISCRToolbarSeparatorControl: TGUID = '{378B71D8-D40D-49E3-AA63-2625AB27BC34}';
  IID_ISCRToolbarTextBoxControl: TGUID = '{C69F41A6-22FB-4A2E-B210-39851E53BD12}';
  CLASS_Toolbar: TGUID = '{82CC8DDE-C4BF-4522-9C22-7EF5D446994E}';
  CLASS_ToolbarControls: TGUID = '{2CEEB881-89C4-43D1-9EFE-20DA30D8A36F}';
  CLASS_ToolbarButtonControl: TGUID = '{9E1C44A1-81A9-471D-83AF-668019708641}';
  CLASS_ToolbarLabelControl: TGUID = '{EEF47BD4-F627-44E1-8357-F5206BB6F28B}';
  CLASS_ToolbarTextBoxControl: TGUID = '{74FD15A1-E03D-4DDD-B11B-90C7EEBF4523}';
  CLASS_ToolbarListItem: TGUID = '{74E12A5C-C2CB-42BD-92E5-0C61239B2228}';
  CLASS_ToolbarListItemCollection: TGUID = '{D4886B91-8AAA-4E41-9AA5-790EBEC01DAF}';
  CLASS_ToolbarComboBoxControl: TGUID = '{34BA561E-B868-4E2D-8DB3-94A4A35FF1FA}';
  CLASS_ToolbarSeparatorControl: TGUID = '{151A4286-CAF6-4EE3-8E84-187BDAE96767}';
  CLASS_RuntimeIndentAndSpacingFormat: TGUID = '{79835FB5-AE2A-415B-AD4E-3031E5AA8141}';
  CLASS_RuntimeStringFieldFormat: TGUID = '{E7FA5287-5372-4868-B083-D722459CFB80}';
  CLASS_RuntimeFont: TGUID = '{5E73F229-833C-42B5-AA8E-7BF382E2A69E}';
  CLASS_RuntimeTabStops: TGUID = '{E18299C1-4A2F-4FE1-9DCD-EB5952A548FB}';
  CLASS_RuntimeTabStop: TGUID = '{C3EDEE62-B019-44DE-9286-D15DD4B46B00}';
  IID_ICRViewContext: TGUID = '{D112FEF8-1AD9-4EA8-8F98-D75C70F34D17}';
  CLASS_ViewContext: TGUID = '{4E7232CA-6B7D-4CB6-B7D1-ABD3A61412C2}';
  IID_ICRDebugInformation: TGUID = '{DE82BC06-E0FC-48E2-A5D3-172D1FB4925C}';
  CLASS_DebugInformation: TGUID = '{5D5D02CD-26E8-446A-A7BF-F33E8BE48269}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum CrObjectInstanceKindEnum
type
  CrObjectInstanceKindEnum = TOleEnum;
const
  crObjectInstanceKindFieldObject = $00000001;
  crObjectInstanceKindFieldObjectInGrid = $00000002;
  crObjectInstanceKindNumericFieldObject = $00000003;
  crObjectInstanceKindNumericFieldObjectInGrid = $00000004;
  crObjectInstanceKindTextObject = $00000005;
  crObjectInstanceKindTextObjectInGrid = $00000006;
  crObjectInstanceKindStringFieldObject = $00000007;
  crObjectInstanceKindStringFieldObjectInGrid = $00000008;
  crObjectInstanceKindSubreportObject = $00000009;
  crObjectInstanceKindOleObject = $0000000A;
  crObjectInstanceKindChartObject = $0000000B;
  crObjectInstanceKindBlobFieldObject = $0000000C;
  crObjectInstanceKindMapObject = $0000000D;
  crObjectInstanceKindPlaceHolderObject = $0000000E;
  crObjectInstanceKindCrossTabObject = $0000000F;
  crObjectInstanceKindOlapObject = $00000010;
  crObjectInstanceKindOlapSectionHead = $00000011;
  crObjectInstanceKindFlashObject = $00000012;

// Constants for enum CrOverriddenPropertyEnum
type
  CrOverriddenPropertyEnum = TOleEnum;
const
  crOverriddenPropertyLeftLineStyle = $00000000;
  crOverriddenPropertyRightLineStyle = $00000001;
  crOverriddenPropertyTopLineStyle = $00000002;
  crOverriddenPropertyBottomLineStyle = $00000003;
  crOverriddenPropertyHasDropShadow = $00000004;
  crOverriddenPropertyBackgroundColor = $00000005;
  crOverriddenPropertyBorderColor = $00000006;
  crOverriddenPropertyEnableTightHorizontal = $00000007;
  crOverriddenPropertyFont = $00000008;
  crOverriddenPropertyColor = $00000009;
  crOverriddenPropertyVisible = $0000000A;
  crOverriddenPropertyRotation = $0000000B;
  crOverriddenPropertyStyleSheetName = $0000000C;
  crOverriddenPropertyHorizontalAlignment = $0000000D;
  crOverriddenPropertyEnableUnderlaySection = $0000000E;

// Constants for enum CrRuntimeParagraphElementKindEnum
type
  CrRuntimeParagraphElementKindEnum = TOleEnum;
const
  crRuntimeParagraphElementKindInvalid = $00000000;
  crRuntimeParagraphElementKindField = $00000001;
  crRuntimeParagraphElementKindText = $00000002;
  crRuntimeParagraphElementKindTab = $00000003;

// Constants for enum CrRuntimeFieldKindEnum
type
  CrRuntimeFieldKindEnum = TOleEnum;
const
  crRuntimeFieldKindUnknownField = $00000000;
  crRuntimeFieldKindDatabaseField = $00000001;
  crRuntimeFieldKindOlapDimensionField = $00000002;
  crRuntimeFieldKindOlapDataField = $00000003;
  crRuntimeFieldKindOlapCrossTabField = $00000004;
  crRuntimeFieldKindFormulaField = $00000005;
  crRuntimeFieldKindSummaryField = $00000006;
  crRuntimeFieldKindSpecialVarField = $00000007;
  crRuntimeFieldKindGroupNameField = $00000008;
  crRuntimeFieldKindPromptingVarField = $00000009;

// Constants for enum CrImageFormatEnum
type
  CrImageFormatEnum = TOleEnum;
const
  crImageFormatDIB = $00000001;
  crImageFormatJPEG = $00000002;
  crImageFormatMetafile = $00000003;
  crImageFormatEnhancedMetafile = $00000004;
  crImageFormatSWF = $00000005;

// Constants for enum CrAnalysisGridEnum
type
  CrAnalysisGridEnum = TOleEnum;
const
  crAnalysisGridGroup = $00000000;
  crAnalysisGridDetail = $00000001;
  crAnalysisGridCrossTab = $00000002;
  crAnalysisGridOlap = $00000003;

// Constants for enum CrGridLineEnum
type
  CrGridLineEnum = TOleEnum;
const
  crGridLineUndefined = $FFFFFFFF;
  crGridLineRowLabelsVertical = $00000000;
  crGridLineRowLabelsHorizontal = $00000001;
  crGridLineRowLabelsTopBorder = $00000002;
  crGridLineRowLabelsBottomBorder = $00000003;
  crGridLineRowLabelsLeftBorder = $00000004;
  crGridLineRowLabelsRightBorder = $00000005;
  crGridLineColumnLabelsVertical = $00000006;
  crGridLineColumnLabelsHorizontal = $00000007;
  crGridLineColumnLabelsTopBorder = $00000008;
  crGridLineColumnLabelsBottomBorder = $00000009;
  crGridLineColumnLabelsLeftBorder = $0000000A;
  crGridLineColumnLabelsRightBorder = $0000000B;
  crGridLineCellsVertical = $0000000C;
  crGridLineCellsHorizontal = $0000000D;
  crGridLineCellsBottomBorder = $0000000E;
  crGridLineCellsRightBorder = $0000000F;
  crGridLineRowCellGrandTotal = $00000010;
  crGridLineRowLabelGrandTotal = $00000011;
  crGridLineColumnCellGrandTotal = $00000012;
  crGridLineColumnLabelGrandTotal = $00000013;

// Constants for enum CrToolbarControlKindEnum
type
  CrToolbarControlKindEnum = TOleEnum;
const
  crTBSeparatorControl = $00000001;
  crTBButtonControl = $00000002;
  crTBLabelControl = $00000003;
  crTBTextBoxControl = $00000004;
  crTBComboBoxControl = $00000005;

// Constants for enum CrColumnVisibilityEnum
type
  CrColumnVisibilityEnum = TOleEnum;
const
  CrColumnVisibilityFlat = $00000000;
  CrColumnVisibilityGroup = $00000001;
  CrColumnVisibilityAll = $00000002;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  ISCRReportObjectInstance = interface;
  ISCRReportObjectInstanceDisp = dispinterface;
  ISCRRuntimeBorder = interface;
  ISCRRuntimeBorderDisp = dispinterface;
  ISCRReportPartBookmark = interface;
  ISCRReportPartBookmarkDisp = dispinterface;
  ISCRReportPartID = interface;
  ISCRReportPartIDDisp = dispinterface;
  ISCRPageObjectInstance = interface;
  ISCRPageObjectInstanceDisp = dispinterface;
  ISCRSectionInstances = interface;
  ISCRSectionInstancesDisp = dispinterface;
  ISCRSectionInstance = interface;
  ISCRSectionInstanceDisp = dispinterface;
  ISCRGroupTreeNodeID = interface;
  ISCRGroupTreeNodeIDDisp = dispinterface;
  ISCRReportObjectInstances = interface;
  ISCRReportObjectInstancesDisp = dispinterface;
  ISCRLineObjectInstances = interface;
  ISCRLineObjectInstancesDisp = dispinterface;
  ISCRDrawingObjectInstance = interface;
  ISCRDrawingObjectInstanceDisp = dispinterface;
  ISCRLineObjectInstance = interface;
  ISCRLineObjectInstanceDisp = dispinterface;
  ISCRBoxObjectInstances = interface;
  ISCRBoxObjectInstancesDisp = dispinterface;
  ISCRBoxObjectInstance = interface;
  ISCRBoxObjectInstanceDisp = dispinterface;
  ISCRSubreportContext = interface;
  ISCRSubreportContextDisp = dispinterface;
  ISCRPageObjectFactory = interface;
  ISCRPageObjectFactoryDisp = dispinterface;
  ISCRRuntimeFontColor = interface;
  ISCRRuntimeFontColorDisp = dispinterface;
  ISCRFont = interface;
  ISCRFontDisp = dispinterface;
  ISCRRuntimeParagraphElement = interface;
  ISCRRuntimeParagraphElementDisp = dispinterface;
  ISCRRuntimeParagraphTabElement = interface;
  ISCRRuntimeParagraphTabElementDisp = dispinterface;
  ISCRRuntimeParagraphTextElement = interface;
  ISCRRuntimeParagraphTextElementDisp = dispinterface;
  ISCRRuntimeParagraphElements = interface;
  ISCRRuntimeParagraphElementsDisp = dispinterface;
  ISCRTabUnit = interface;
  ISCRTabUnitDisp = dispinterface;
  ISCRTabUnitEx = interface;
  ISCRTabUnits = interface;
  ISCRTabUnitsDisp = dispinterface;
  ISCRTextLine = interface;
  ISCRTextLineDisp = dispinterface;
  ISCRTextLineEx = interface;
  ISCRTextLines = interface;
  ISCRTextLinesDisp = dispinterface;
  ISCRRuntimeParagraph = interface;
  ISCRRuntimeParagraphDisp = dispinterface;
  ISCRIndentAndSpacingFormat = interface;
  ISCRIndentAndSpacingFormatDisp = dispinterface;
  ISCRTabStops = interface;
  ISCRTabStopsDisp = dispinterface;
  ISCRTabStop = interface;
  ISCRTabStopDisp = dispinterface;
  ISCRRuntimeParagraphs = interface;
  ISCRRuntimeParagraphsDisp = dispinterface;
  ISCRGroupTreeNodeIDEx = interface;
  ISCRReportObjectInstanceEx = interface;
  ISCRPlaceHolderObjectInstance = interface;
  ISCRPlaceHolderObjectInstanceDisp = dispinterface;
  ISCRPlaceHolderObjectInstanceEx = interface;
  ISCRSectionInstanceEx = interface;
  ISCRFieldObjectInstance = interface;
  ISCRFieldObjectInstanceDisp = dispinterface;
  ISCRFieldFormat = interface;
  ISCRFieldFormatDisp = dispinterface;
  ISCRCommonFieldFormat = interface;
  ISCRCommonFieldFormatDisp = dispinterface;
  ISCRConditionFormulas = interface;
  ISCRConditionFormulasDisp = dispinterface;
  ISCRCommonFieldFormatConditionFormulas = interface;
  ISCRCommonFieldFormatConditionFormulasDisp = dispinterface;
  ISCRConditionFormula = interface;
  ISCRConditionFormulaDisp = dispinterface;
  ISCRBooleanFieldFormat = interface;
  ISCRBooleanFieldFormatDisp = dispinterface;
  ISCRBooleanFieldFormatConditionFormulas = interface;
  ISCRBooleanFieldFormatConditionFormulasDisp = dispinterface;
  ISCRNumericFieldFormat = interface;
  ISCRNumericFieldFormatDisp = dispinterface;
  ISCRNumericFieldFormatConditionFormulas = interface;
  ISCRNumericFieldFormatConditionFormulasDisp = dispinterface;
  ISCRDateFieldFormat = interface;
  ISCRDateFieldFormatDisp = dispinterface;
  ISCRDateFieldFormatConditionFormulas = interface;
  ISCRDateFieldFormatConditionFormulasDisp = dispinterface;
  ISCRTimeFieldFormat = interface;
  ISCRTimeFieldFormatDisp = dispinterface;
  ISCRTimeFieldFormatConditionFormulas = interface;
  ISCRTimeFieldFormatConditionFormulasDisp = dispinterface;
  ISCRDateTimeFieldFormat = interface;
  ISCRDateTimeFieldFormatDisp = dispinterface;
  ISCRDateTimeFieldFormatConditionFormulas = interface;
  ISCRDateTimeFieldFormatConditionFormulasDisp = dispinterface;
  ISCRStringFieldFormat = interface;
  ISCRStringFieldFormatDisp = dispinterface;
  ISCRFieldObjectInstanceEx = interface;
  ISCRFieldObjectInstanceInGrid = interface;
  ISCRFieldObjectInstanceInGridDisp = dispinterface;
  ISCRNumericFieldObjectInstance = interface;
  ISCRNumericFieldObjectInstanceDisp = dispinterface;
  ISCRNumericFieldObjectInstanceEx = interface;
  ISCRNumericFieldObjectInstanceInGrid = interface;
  ISCRNumericFieldObjectInstanceInGridDisp = dispinterface;
  ISCRTextObjectInstance = interface;
  ISCRTextObjectInstanceDisp = dispinterface;
  ISCRStringFieldObjectInstance = interface;
  ISCRStringFieldObjectInstanceDisp = dispinterface;
  ISCRStringFieldObjectInstanceEx = interface;
  ISCRStringFieldObjectInstanceInGrid = interface;
  ISCRStringFieldObjectInstanceInGridDisp = dispinterface;
  ISCRTextObjectInstanceInGrid = interface;
  ISCRTextObjectInstanceInGridDisp = dispinterface;
  ISCRGraphicObjectInstance = interface;
  ISCRGraphicObjectInstanceDisp = dispinterface;
  ISequentialStream = interface;
  IStream = interface;
  ISCROleObjectInstance = interface;
  ISCROleObjectInstanceDisp = dispinterface;
  ISCRFlashObjectInstance = interface;
  ISCRFlashObjectInstanceDisp = dispinterface;
  ISCRFlashObjectInstanceEx = interface;
  ISCRBlobFieldObjectInstance = interface;
  ISCRBlobFieldObjectInstanceDisp = dispinterface;
  ISCRAnalysisObjectInstance = interface;
  ISCRAnalysisObjectInstanceDisp = dispinterface;
  ISCRChartObjectInstance = interface;
  ISCRChartObjectInstanceDisp = dispinterface;
  ISCRMapObjectInstance = interface;
  ISCRMapObjectInstanceDisp = dispinterface;
  ISCRSubreportObjectInstanceBase = interface;
  ISCRSubreportObjectInstanceBaseDisp = dispinterface;
  ISCRSubreportObjectInstanceBaseEx = interface;
  ISCRSubreportObjectInstance = interface;
  ISCRSubreportObjectInstanceDisp = dispinterface;
  ISCROnDemandSubreportObjectInstance = interface;
  ISCROnDemandSubreportObjectInstanceDisp = dispinterface;
  ISCROnDemandSubreportObjectInstanceEx = interface;
  ISCRGridLineInstance = interface;
  ISCRGridLineInstanceDisp = dispinterface;
  ISCRGridLineInstances = interface;
  ISCRGridLineInstancesDisp = dispinterface;
  ISCRGridAreaInstance = interface;
  ISCRGridAreaInstanceDisp = dispinterface;
  ISCRGridAreaInstances = interface;
  ISCRGridAreaInstancesDisp = dispinterface;
  ISCRGridRowInstance = interface;
  ISCRGridRowInstanceDisp = dispinterface;
  ISCRGridColumnInstance = interface;
  ISCRGridColumnInstanceDisp = dispinterface;
  ISCRGridLabelInstance = interface;
  ISCRGridLabelInstanceDisp = dispinterface;
  ISCRCrossTabObjectInstance = interface;
  ISCRCrossTabObjectInstanceDisp = dispinterface;
  ISCROlapSectHeadObjectInstance = interface;
  ISCROlapSectHeadObjectInstanceDisp = dispinterface;
  ISCROlapObjectInstance = interface;
  ISCROlapObjectInstanceDisp = dispinterface;
  ISCRGroupTreeNodes = interface;
  ISCRGroupTreeNodesDisp = dispinterface;
  ISCRGroupTreeNode = interface;
  ISCRGroupTreeNodeDisp = dispinterface;
  ISCRGroupTreeNodeEx = interface;
  ISCRGroupTree = interface;
  ISCRGroupTreeDisp = dispinterface;
  ISCRToolbar = interface;
  ISCRToolbarDisp = dispinterface;
  ISCRToolbarControls = interface;
  ISCRToolbarControlsDisp = dispinterface;
  ISCRToolbarControlBase = interface;
  ISCRToolbarControlBaseDisp = dispinterface;
  IGridColumnCollection = interface;
  IGridColumnCollectionDisp = dispinterface;
  IGridColumn = interface;
  IGridColumnDisp = dispinterface;
  ICRGridContent = interface;
  ICRGridContentDisp = dispinterface;
  ISCREPFFactory = interface;
  ISCREPFFactoryDisp = dispinterface;
  ISCRETFFactory = interface;
  ISCRETFFactoryDisp = dispinterface;
  ISCRToolbarControlBaseEx = interface;
  ISCRToolbarButtonControl = interface;
  ISCRToolbarButtonControlDisp = dispinterface;
  ISCRToolbarButtonControlEx = interface;
  ISCRToolbarListItem = interface;
  ISCRToolbarListItemDisp = dispinterface;
  ISCRToolbarListItemEx = interface;
  ISCRToolbarListItemCollection = interface;
  ISCRToolbarListItemCollectionDisp = dispinterface;
  ISCRToolbarComboBoxControl = interface;
  ISCRToolbarComboBoxControlDisp = dispinterface;
  ISCRToolbarLabelControl = interface;
  ISCRToolbarLabelControlDisp = dispinterface;
  ISCRToolbarSeparatorControl = interface;
  ISCRToolbarSeparatorControlDisp = dispinterface;
  ISCRToolbarTextBoxControl = interface;
  ISCRToolbarTextBoxControlDisp = dispinterface;
  ICRViewContext = interface;
  ICRViewContextDisp = dispinterface;
  ICRDebugInformation = interface;
  ICRDebugInformationDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  PageObjectFactory = ISCRPageObjectFactory;
  PlaceHolderObjectInstance = ISCRPlaceHolderObjectInstance;
  FieldObjectInstance = ISCRFieldObjectInstance;
  TextObjectInstance = ISCRTextObjectInstance;
  ReportObjectInstances = ISCRReportObjectInstances;
  ChartObjectInstance = ISCRChartObjectInstance;
  NumericFieldObjectInstance = ISCRNumericFieldObjectInstance;
  FieldObjectInstanceInGrid = ISCRFieldObjectInstanceInGrid;
  NumericFieldObjectInstanceInGrid = ISCRNumericFieldObjectInstanceInGrid;
  TextObjectInstanceInGrid = ISCRTextObjectInstanceInGrid;
  RuntimeParagraph = ISCRRuntimeParagraph;
  RuntimeParagraphs = ISCRRuntimeParagraphs;
  TextLine = ISCRTextLine;
  TextLines = ISCRTextLines;
  GroupTreeNodeID = ISCRGroupTreeNodeID;
  SectionInstance = ISCRSectionInstance;
  SubreportObjectInstance = ISCRSubreportObjectInstance;
  OnDemandSubreportObjectInstance = ISCROnDemandSubreportObjectInstance;
  SectionInstances = ISCRSectionInstances;
  PageObjectInstance = ISCRPageObjectInstance;
  StringFieldObjectInstance = ISCRStringFieldObjectInstance;
  StringFieldObjectInstanceInGrid = ISCRStringFieldObjectInstanceInGrid;
  SubreportContext = ISCRSubreportContext;
  LineObjectInstance = ISCRDrawingObjectInstance;
  BoxObjectInstance = ISCRBoxObjectInstance;
  MapObjectInstance = ISCRMapObjectInstance;
  OleObjectInstance = ISCROleObjectInstance;
  FlashObjectInstance = ISCRFlashObjectInstance;
  BlobFieldObjectInstance = ISCRBlobFieldObjectInstance;
  GridRowInstance = ISCRGridRowInstance;
  GridColumnInstance = ISCRGridColumnInstance;
  GridLabelInstance = ISCRGridLabelInstance;
  GridAreaInstances = ISCRGridAreaInstances;
  GridLineInstance = ISCRGridLineInstance;
  GridLineInstances = ISCRGridLineInstances;
  CrossTabObjectInstance = ISCRCrossTabObjectInstance;
  OlapObjectInstance = ISCROlapObjectInstance;
  OlapSectHeadObjectInstance = ISCROlapSectHeadObjectInstance;
  LineObjectInstances = ISCRLineObjectInstances;
  BoxObjectInstances = ISCRBoxObjectInstances;
  RuntimeBorder = ISCRRuntimeBorder;
  RuntimeFontColor = ISCRRuntimeFontColor;
  RuntimeParagraphElements = ISCRRuntimeParagraphElements;
  RuntimeParagraphTextElement = ISCRRuntimeParagraphTextElement;
  RuntimeParagraphTabElement = ISCRRuntimeParagraphTabElement;
  TabUnit = ISCRTabUnit;
  TabUnits = ISCRTabUnits;
  GroupTree = ISCRGroupTree;
  GroupTreeNode = ISCRGroupTreeNode;
  GroupTreeNodes = ISCRGroupTreeNodes;
  CRGridContent = ICRGridContent;
  EPFFactory = ISCREPFFactory;
  ETFFactory = ISCRETFFactory;
  Toolbar = ISCRToolbar;
  ToolbarControls = ISCRToolbarControls;
  ToolbarButtonControl = ISCRToolbarButtonControl;
  ToolbarLabelControl = ISCRToolbarLabelControl;
  ToolbarTextBoxControl = ISCRToolbarTextBoxControl;
  ToolbarListItem = ISCRToolbarListItem;
  ToolbarListItemCollection = ISCRToolbarListItemCollection;
  ToolbarComboBoxControl = ISCRToolbarComboBoxControl;
  ToolbarSeparatorControl = ISCRToolbarSeparatorControl;
  RuntimeIndentAndSpacingFormat = ISCRIndentAndSpacingFormat;
  RuntimeStringFieldFormat = ISCRStringFieldFormat;
  RuntimeFont = ISCRFont;
  RuntimeTabStops = ISCRTabStops;
  RuntimeTabStop = ISCRTabStop;
  ViewContext = ICRViewContext;
  DebugInformation = ICRDebugInformation;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  PUserType1 = ^_CRParagraphElement; {*}
  PUserType2 = ^_CRStringListNode; {*}
  PWord1 = ^Word; {*}
  PInteger1 = ^Integer; {*}
  PUINT1 = ^LongWord; {*}
  PPUserType1 = ^ISCRStringFieldFormat; {*}
  PPUserType2 = ^ISCRConditionFormulas; {*}
  PPUserType3 = ^ISCRBooleanFieldFormatConditionFormulas; {*}
  PPUserType4 = ^ISCRNumericFieldFormatConditionFormulas; {*}
  PPUserType5 = ^ISCRDateFieldFormatConditionFormulas; {*}
  PPUserType6 = ^ISCRTimeFieldFormatConditionFormulas; {*}
  PPUserType7 = ^ISCRDateTimeFieldFormatConditionFormulas; {*}
  PByte1 = ^Byte; {*}


  _LARGE_INTEGER = packed record
    QuadPart: Int64;
  end;

  _ULARGE_INTEGER = packed record
    QuadPart: Largeuint;
  end;

  _FILETIME = packed record
    dwLowDateTime: LongWord;
    dwHighDateTime: LongWord;
  end;

  tagSTATSTG = packed record
    pwcsName: PWideChar;
    type_: LongWord;
    cbSize: _ULARGE_INTEGER;
    mtime: _FILETIME;
    ctime: _FILETIME;
    atime: _FILETIME;
    grfMode: LongWord;
    grfLocksSupported: LongWord;
    clsid: TGUID;
    grfStateBits: LongWord;
    reserved: LongWord;
  end;


  _CRParagraphElement = packed record
    pNext: PUserType1;
    isTabElement: Shortint;
    RightToLeftReading: Shortint;
    CharacterSpacing: LongWord;
    pText: PWideChar;
    arraySize: LongWord;
    pNeedsToJoinTheNext: ^Shortint;
    pIsWhiteSpace: ^Shortint;
    pFontColor: ISCRRuntimeFontColor;
    reserved: SYSINT;
  end;


  _CRStringListNode = packed record
    pNext: PUserType2;
    pString: PWideChar;
  end;


// *********************************************************************//
// Interface: ISCRReportObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25931A5B-FBA3-4959-9994-4D9289AF58E2}
// *********************************************************************//
  ISCRReportObjectInstance = interface(IDispatch)
    ['{25931A5B-FBA3-4959-9994-4D9289AF58E2}']
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; safecall;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); safecall;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_OffsetX: Integer; safecall;
    procedure Set_OffsetX(pVal: Integer); safecall;
    function  Get_OffsetY: Integer; safecall;
    procedure Set_OffsetY(pVal: Integer); safecall;
    function  Get_Width: Integer; safecall;
    procedure Set_Width(pVal: Integer); safecall;
    function  Get_Height: Integer; safecall;
    procedure Set_Height(pVal: Integer); safecall;
    function  Get_Kind: CrObjectInstanceKindEnum; safecall;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum); safecall;
    function  Get_Visible: WordBool; safecall;
    procedure Set_Visible(pVal: WordBool); safecall;
    function  Get_ToolTipText: WideString; safecall;
    procedure Set_ToolTipText(const pVal: WideString); safecall;
    function  Get_HyperLink: WideString; safecall;
    procedure Set_HyperLink(const pVal: WideString); safecall;
    function  Get_Border: ISCRRuntimeBorder; safecall;
    procedure Set_Border(const pVal: ISCRRuntimeBorder); safecall;
    function  Get_SplitAtTop: WordBool; safecall;
    procedure Set_SplitAtTop(pVal: WordBool); safecall;
    function  Get_SplitAtBottom: WordBool; safecall;
    procedure Set_SplitAtBottom(pVal: WordBool); safecall;
    function  Get_ReportObjectName: WideString; safecall;
    procedure Set_ReportObjectName(const pVal: WideString); safecall;
    function  Get_StyleSheetName: WideString; safecall;
    procedure Set_StyleSheetName(const pVal: WideString); safecall;
    function  Get_Rotation: CrTextRotationAngleEnum; safecall;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum); safecall;
    function  Get_HorizontalAlignment: CrAlignmentEnum; safecall;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum); safecall;
    function  Get_DataContext: WideString; safecall;
    procedure Set_DataContext(const pVal: WideString); safecall;
    function  Get_OverriddenInfo: Integer; safecall;
    procedure Set_OverriddenInfo(pVal: Integer); safecall;
    procedure GetObjectText(out pObjectText: WideString); safecall;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); safecall;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); safecall;
    function  Get_ReportPartBookmark: ISCRReportPartBookmark; safecall;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark); safecall;
    procedure HasHyperLink(out pVal: WordBool); safecall;
    function  HasReportPartBookmark: WordBool; safecall;
    function  Get_Highlight: WordBool; safecall;
    procedure Set_Highlight(pVal: WordBool); safecall;
    function  Get_GroupNamePath: WideString; safecall;
    procedure Set_GroupNamePath(const pVal: WideString); safecall;
    function  Get_GroupName: WideString; safecall;
    procedure Set_GroupName(const pVal: WideString); safecall;
    function  Get_HasObjectEnded: WordBool; safecall;
    procedure Set_HasObjectEnded(pVal: WordBool); safecall;
    procedure Set_HasBookmark(Param1: WordBool); safecall;
    procedure Set_HasPartsDrilldown(Param1: WordBool); safecall;
    function  HasReportPartDrilldown: WordBool; safecall;
    property ClassName: WideString read Get_ClassName;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
  end;

// *********************************************************************//
// DispIntf:  ISCRReportObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25931A5B-FBA3-4959-9994-4D9289AF58E2}
// *********************************************************************//
  ISCRReportObjectInstanceDisp = dispinterface
    ['{25931A5B-FBA3-4959-9994-4D9289AF58E2}']
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRRuntimeBorder
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59F0A351-A7FC-4712-9254-C19C43C1959E}
// *********************************************************************//
  ISCRRuntimeBorder = interface(IDispatch)
    ['{59F0A351-A7FC-4712-9254-C19C43C1959E}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeBorder; safecall;
    procedure CopyTo(const RuntimeBorder: ISCRRuntimeBorder; DeepCopy: WordBool); safecall;
    function  Equals(const RuntimeBorder: ISCRRuntimeBorder): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_LeftLineStyle: CrLineStyleEnum; safecall;
    procedure Set_LeftLineStyle(pVal: CrLineStyleEnum); safecall;
    function  Get_RightLineStyle: CrLineStyleEnum; safecall;
    procedure Set_RightLineStyle(pVal: CrLineStyleEnum); safecall;
    function  Get_TopLineStyle: CrLineStyleEnum; safecall;
    procedure Set_TopLineStyle(pVal: CrLineStyleEnum); safecall;
    function  Get_BottomLineStyle: CrLineStyleEnum; safecall;
    procedure Set_BottomLineStyle(pVal: CrLineStyleEnum); safecall;
    function  Get_HasDropShadow: WordBool; safecall;
    procedure Set_HasDropShadow(pVal: WordBool); safecall;
    function  Get_BackgroundColor: OLE_COLOR; safecall;
    procedure Set_BackgroundColor(pVal: OLE_COLOR); safecall;
    function  Get_BorderColor: OLE_COLOR; safecall;
    procedure Set_BorderColor(pVal: OLE_COLOR); safecall;
    function  Get_EnableTightHorizontal: WordBool; safecall;
    procedure Set_EnableTightHorizontal(pVal: WordBool); safecall;
    function  Get_OverriddenInfo: Integer; safecall;
    procedure Set_OverriddenInfo(pVal: Integer); safecall;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); safecall;
    property ClassName: WideString read Get_ClassName;
    property LeftLineStyle: CrLineStyleEnum read Get_LeftLineStyle write Set_LeftLineStyle;
    property RightLineStyle: CrLineStyleEnum read Get_RightLineStyle write Set_RightLineStyle;
    property TopLineStyle: CrLineStyleEnum read Get_TopLineStyle write Set_TopLineStyle;
    property BottomLineStyle: CrLineStyleEnum read Get_BottomLineStyle write Set_BottomLineStyle;
    property HasDropShadow: WordBool read Get_HasDropShadow write Set_HasDropShadow;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
    property BorderColor: OLE_COLOR read Get_BorderColor write Set_BorderColor;
    property EnableTightHorizontal: WordBool read Get_EnableTightHorizontal write Set_EnableTightHorizontal;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
  end;

// *********************************************************************//
// DispIntf:  ISCRRuntimeBorderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59F0A351-A7FC-4712-9254-C19C43C1959E}
// *********************************************************************//
  ISCRRuntimeBorderDisp = dispinterface
    ['{59F0A351-A7FC-4712-9254-C19C43C1959E}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeBorder; dispid 1001;
    procedure CopyTo(const RuntimeBorder: ISCRRuntimeBorder; DeepCopy: WordBool); dispid 1002;
    function  Equals(const RuntimeBorder: ISCRRuntimeBorder): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property LeftLineStyle: CrLineStyleEnum dispid 1;
    property RightLineStyle: CrLineStyleEnum dispid 2;
    property TopLineStyle: CrLineStyleEnum dispid 3;
    property BottomLineStyle: CrLineStyleEnum dispid 4;
    property HasDropShadow: WordBool dispid 5;
    property BackgroundColor: OLE_COLOR dispid 6;
    property BorderColor: OLE_COLOR dispid 7;
    property EnableTightHorizontal: WordBool dispid 8;
    property OverriddenInfo: Integer dispid 10;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 11;
  end;

// *********************************************************************//
// Interface: ISCRReportPartBookmark
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A646DE73-C49C-4EC6-B389-66E988A80AEE}
// *********************************************************************//
  ISCRReportPartBookmark = interface(IDispatch)
    ['{A646DE73-C49C-4EC6-B389-66E988A80AEE}']
    function  Clone(DeepClone: WordBool): ISCRReportPartBookmark; safecall;
    procedure CopyTo(const ReportPartBookmark: ISCRReportPartBookmark; DeepCopy: WordBool); safecall;
    function  Equals(const ReportPartBookmark: ISCRReportPartBookmark): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_ReportURI: WideString; safecall;
    procedure Set_ReportURI(const pVal: WideString); safecall;
    function  Get_ReportPartID: ISCRReportPartID; safecall;
    procedure Set_ReportPartID(const pVal: ISCRReportPartID); safecall;
    property ClassName: WideString read Get_ClassName;
    property ReportURI: WideString read Get_ReportURI write Set_ReportURI;
    property ReportPartID: ISCRReportPartID read Get_ReportPartID write Set_ReportPartID;
  end;

// *********************************************************************//
// DispIntf:  ISCRReportPartBookmarkDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A646DE73-C49C-4EC6-B389-66E988A80AEE}
// *********************************************************************//
  ISCRReportPartBookmarkDisp = dispinterface
    ['{A646DE73-C49C-4EC6-B389-66E988A80AEE}']
    function  Clone(DeepClone: WordBool): ISCRReportPartBookmark; dispid 1001;
    procedure CopyTo(const ReportPartBookmark: ISCRReportPartBookmark; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportPartBookmark: ISCRReportPartBookmark): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property ReportURI: WideString dispid 1;
    property ReportPartID: ISCRReportPartID dispid 2;
  end;

// *********************************************************************//
// Interface: ISCRReportPartID
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {74E860DA-CF25-4B9C-AD73-231203974D03}
// *********************************************************************//
  ISCRReportPartID = interface(IDispatch)
    ['{74E860DA-CF25-4B9C-AD73-231203974D03}']
    function  Clone(DeepClone: WordBool): ISCRReportPartID; safecall;
    procedure CopyTo(const ReportPartID: ISCRReportPartID; DeepCopy: WordBool); safecall;
    function  Equals(const ReportPartID: ISCRReportPartID): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function  Get_DataContext: WideString; safecall;
    procedure Set_DataContext(const pVal: WideString); safecall;
    property ClassName: WideString read Get_ClassName;
    property Name: WideString read Get_Name write Set_Name;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
  end;

// *********************************************************************//
// DispIntf:  ISCRReportPartIDDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {74E860DA-CF25-4B9C-AD73-231203974D03}
// *********************************************************************//
  ISCRReportPartIDDisp = dispinterface
    ['{74E860DA-CF25-4B9C-AD73-231203974D03}']
    function  Clone(DeepClone: WordBool): ISCRReportPartID; dispid 1001;
    procedure CopyTo(const ReportPartID: ISCRReportPartID; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportPartID: ISCRReportPartID): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property Name: WideString dispid 1;
    property DataContext: WideString dispid 2;
  end;

// *********************************************************************//
// Interface: ISCRPageObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AFCE37DB-BB07-42F1-BBB5-1473AF40530F}
// *********************************************************************//
  ISCRPageObjectInstance = interface(IDispatch)
    ['{AFCE37DB-BB07-42F1-BBB5-1473AF40530F}']
    function  Clone(DeepClone: WordBool): ISCRPageObjectInstance; safecall;
    procedure CopyTo(const PageObjectInstance: ISCRPageObjectInstance; DeepCopy: WordBool); safecall;
    function  Equals(const PageObjectInstance: ISCRPageObjectInstance): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_PageWidth: Integer; safecall;
    procedure Set_PageWidth(pVal: Integer); safecall;
    function  Get_PageHeight: Integer; safecall;
    procedure Set_PageHeight(pVal: Integer); safecall;
    function  Get_LeftMargin: Integer; safecall;
    procedure Set_LeftMargin(pVal: Integer); safecall;
    function  Get_TopMargin: Integer; safecall;
    procedure Set_TopMargin(pVal: Integer); safecall;
    function  Get_RightMargin: Integer; safecall;
    procedure Set_RightMargin(pVal: Integer); safecall;
    function  Get_BottomMargin: Integer; safecall;
    procedure Set_BottomMargin(pVal: Integer); safecall;
    function  Get_PageNumber: Integer; safecall;
    procedure Set_PageNumber(pVal: Integer); safecall;
    function  Get_LastPageNumber: Integer; safecall;
    procedure Set_LastPageNumber(pVal: Integer); safecall;
    function  Get_IsPageComplete: WordBool; safecall;
    procedure Set_IsPageComplete(pVal: WordBool); safecall;
    function  Get_SectionInstances: ISCRSectionInstances; safecall;
    procedure Set_SectionInstances(const pVal: ISCRSectionInstances); safecall;
    function  Get_LineObjectInstances: ISCRLineObjectInstances; safecall;
    procedure Set_LineObjectInstances(const pVal: ISCRLineObjectInstances); safecall;
    function  Get_BoxObjectInstances: ISCRBoxObjectInstances; safecall;
    procedure Set_BoxObjectInstances(const pVal: ISCRBoxObjectInstances); safecall;
    function  Get_ReportName: WideString; safecall;
    procedure Set_ReportName(const pVal: WideString); safecall;
    function  Get_DrillDownContext: ISCRGroupTreeNodeID; safecall;
    procedure Set_DrillDownContext(const pVal: ISCRGroupTreeNodeID); safecall;
    function  Get_SubreportContext: ISCRSubreportContext; safecall;
    procedure Set_SubreportContext(const pVal: ISCRSubreportContext); safecall;
    function  Get_IsLastPage: WordBool; safecall;
    procedure Set_IsLastPage(pVal: WordBool); safecall;
    function  Get_ReportTitle: WideString; safecall;
    procedure Set_ReportTitle(const pVal: WideString); safecall;
    procedure getPrinterInfo(out bstrDriverName: PWord1; 
                             out paperOrientation: CrPaperOrientationEnum; 
                             out paperSize: CrPaperSizeEnum; out pPaperWidth: LongWord; 
                             out pPaperLength: LongWord; out pUseDefaultPrinter: WordBool; 
                             out pUseDefaultPrinterSettings: WordBool); safecall;
    procedure setPrinterInfo(var bstrDriverName: Word; paperOrientation: CrPaperOrientationEnum; 
                             paperSize: CrPaperSizeEnum; paperWidth: LongWord; 
                             paperLength: LongWord; vbUseDefaultPrinter: WordBool; 
                             vbUseDefaultPrinterSettings: WordBool); safecall;
    function  Get_IsLastPageKnown: WordBool; safecall;
    procedure Set_IsLastPageKnown(pVal: WordBool); safecall;
    function  Get_IsShowGroupTree: WordBool; safecall;
    procedure Set_IsShowGroupTree(pVal: WordBool); safecall;
    property ClassName: WideString read Get_ClassName;
    property PageWidth: Integer read Get_PageWidth write Set_PageWidth;
    property PageHeight: Integer read Get_PageHeight write Set_PageHeight;
    property LeftMargin: Integer read Get_LeftMargin write Set_LeftMargin;
    property TopMargin: Integer read Get_TopMargin write Set_TopMargin;
    property RightMargin: Integer read Get_RightMargin write Set_RightMargin;
    property BottomMargin: Integer read Get_BottomMargin write Set_BottomMargin;
    property PageNumber: Integer read Get_PageNumber write Set_PageNumber;
    property LastPageNumber: Integer read Get_LastPageNumber write Set_LastPageNumber;
    property IsPageComplete: WordBool read Get_IsPageComplete write Set_IsPageComplete;
    property SectionInstances: ISCRSectionInstances read Get_SectionInstances write Set_SectionInstances;
    property LineObjectInstances: ISCRLineObjectInstances read Get_LineObjectInstances write Set_LineObjectInstances;
    property BoxObjectInstances: ISCRBoxObjectInstances read Get_BoxObjectInstances write Set_BoxObjectInstances;
    property ReportName: WideString read Get_ReportName write Set_ReportName;
    property DrillDownContext: ISCRGroupTreeNodeID read Get_DrillDownContext write Set_DrillDownContext;
    property SubreportContext: ISCRSubreportContext read Get_SubreportContext write Set_SubreportContext;
    property IsLastPage: WordBool read Get_IsLastPage write Set_IsLastPage;
    property ReportTitle: WideString read Get_ReportTitle write Set_ReportTitle;
    property IsLastPageKnown: WordBool read Get_IsLastPageKnown write Set_IsLastPageKnown;
    property IsShowGroupTree: WordBool read Get_IsShowGroupTree write Set_IsShowGroupTree;
  end;

// *********************************************************************//
// DispIntf:  ISCRPageObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AFCE37DB-BB07-42F1-BBB5-1473AF40530F}
// *********************************************************************//
  ISCRPageObjectInstanceDisp = dispinterface
    ['{AFCE37DB-BB07-42F1-BBB5-1473AF40530F}']
    function  Clone(DeepClone: WordBool): ISCRPageObjectInstance; dispid 1001;
    procedure CopyTo(const PageObjectInstance: ISCRPageObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const PageObjectInstance: ISCRPageObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property PageWidth: Integer dispid 1;
    property PageHeight: Integer dispid 2;
    property LeftMargin: Integer dispid 3;
    property TopMargin: Integer dispid 4;
    property RightMargin: Integer dispid 5;
    property BottomMargin: Integer dispid 6;
    property PageNumber: Integer dispid 7;
    property LastPageNumber: Integer dispid 8;
    property IsPageComplete: WordBool dispid 9;
    property SectionInstances: ISCRSectionInstances dispid 10;
    property LineObjectInstances: ISCRLineObjectInstances dispid 11;
    property BoxObjectInstances: ISCRBoxObjectInstances dispid 12;
    property ReportName: WideString dispid 13;
    property DrillDownContext: ISCRGroupTreeNodeID dispid 14;
    property SubreportContext: ISCRSubreportContext dispid 15;
    property IsLastPage: WordBool dispid 16;
    property ReportTitle: WideString dispid 17;
    procedure getPrinterInfo(out bstrDriverName: {??PWord1}OleVariant; 
                             out paperOrientation: CrPaperOrientationEnum; 
                             out paperSize: CrPaperSizeEnum; out pPaperWidth: LongWord; 
                             out pPaperLength: LongWord; out pUseDefaultPrinter: WordBool; 
                             out pUseDefaultPrinterSettings: WordBool); dispid 18;
    procedure setPrinterInfo(var bstrDriverName: {??Word}OleVariant; 
                             paperOrientation: CrPaperOrientationEnum; paperSize: CrPaperSizeEnum; 
                             paperWidth: LongWord; paperLength: LongWord; 
                             vbUseDefaultPrinter: WordBool; vbUseDefaultPrinterSettings: WordBool); dispid 19;
    property IsLastPageKnown: WordBool dispid 20;
    property IsShowGroupTree: WordBool dispid 21;
  end;

// *********************************************************************//
// Interface: ISCRSectionInstances
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B8E83213-97DE-4A5A-9697-854DC45FAFFF}
// *********************************************************************//
  ISCRSectionInstances = interface(IDispatch)
    ['{B8E83213-97DE-4A5A-9697-854DC45FAFFF}']
    function  Clone(DeepClone: WordBool): ISCRSectionInstances; safecall;
    procedure CopyTo(const SectionInstances: ISCRSectionInstances; DeepCopy: WordBool); safecall;
    function  Equals(const SectionInstances: ISCRSectionInstances): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRSectionInstance; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRSectionInstance); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const SectionInstance: ISCRSectionInstance); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const SectionInstance: ISCRSectionInstance); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const SectionInstance: ISCRSectionInstance): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRSectionInstance read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRSectionInstancesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B8E83213-97DE-4A5A-9697-854DC45FAFFF}
// *********************************************************************//
  ISCRSectionInstancesDisp = dispinterface
    ['{B8E83213-97DE-4A5A-9697-854DC45FAFFF}']
    function  Clone(DeepClone: WordBool): ISCRSectionInstances; dispid 1001;
    procedure CopyTo(const SectionInstances: ISCRSectionInstances; DeepCopy: WordBool); dispid 1002;
    function  Equals(const SectionInstances: ISCRSectionInstances): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRSectionInstance dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const SectionInstance: ISCRSectionInstance); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const SectionInstance: ISCRSectionInstance); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const SectionInstance: ISCRSectionInstance): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRSectionInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B185D51C-8588-430A-964F-DB61FFB6505E}
// *********************************************************************//
  ISCRSectionInstance = interface(IDispatch)
    ['{B185D51C-8588-430A-964F-DB61FFB6505E}']
    function  Clone(DeepClone: WordBool): ISCRSectionInstance; safecall;
    procedure CopyTo(const SectionInstance: ISCRSectionInstance; DeepCopy: WordBool); safecall;
    function  Equals(const SectionInstance: ISCRSectionInstance): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_OffsetInPageX: Integer; safecall;
    procedure Set_OffsetInPageX(pVal: Integer); safecall;
    function  Get_OffsetInPageY: Integer; safecall;
    procedure Set_OffsetInPageY(pVal: Integer); safecall;
    function  Get_Width: Integer; safecall;
    procedure Set_Width(pVal: Integer); safecall;
    function  Get_Height: Integer; safecall;
    procedure Set_Height(pVal: Integer); safecall;
    function  Get_BackgroundColor: OLE_COLOR; safecall;
    procedure Set_BackgroundColor(pVal: OLE_COLOR); safecall;
    function  Get_Kind: CrAreaSectionKindEnum; safecall;
    procedure Set_Kind(pVal: CrAreaSectionKindEnum); safecall;
    function  Get_GroupTreeNodeID: ISCRGroupTreeNodeID; safecall;
    procedure Set_GroupTreeNodeID(const pVal: ISCRGroupTreeNodeID); safecall;
    function  Get_EnableUnderlaySection: WordBool; safecall;
    procedure Set_EnableUnderlaySection(pVal: WordBool); safecall;
    function  Get_ReportObjectInstances: ISCRReportObjectInstances; safecall;
    procedure Set_ReportObjectInstances(const pVal: ISCRReportObjectInstances); safecall;
    function  Get_StyleSheetName: WideString; safecall;
    procedure Set_StyleSheetName(const pVal: WideString); safecall;
    function  Get_SectionName: WideString; safecall;
    procedure Set_SectionName(const pVal: WideString); safecall;
    function  Get_OverriddenInfo: Integer; safecall;
    procedure Set_OverriddenInfo(pVal: Integer); safecall;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); safecall;
    function  Get_Highlight: WordBool; safecall;
    procedure Set_Highlight(pVal: WordBool); safecall;
    function  Get_GroupNamePath: WideString; safecall;
    procedure Set_GroupNamePath(const pVal: WideString); safecall;
    property ClassName: WideString read Get_ClassName;
    property OffsetInPageX: Integer read Get_OffsetInPageX write Set_OffsetInPageX;
    property OffsetInPageY: Integer read Get_OffsetInPageY write Set_OffsetInPageY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
    property Kind: CrAreaSectionKindEnum read Get_Kind write Set_Kind;
    property GroupTreeNodeID: ISCRGroupTreeNodeID read Get_GroupTreeNodeID write Set_GroupTreeNodeID;
    property EnableUnderlaySection: WordBool read Get_EnableUnderlaySection write Set_EnableUnderlaySection;
    property ReportObjectInstances: ISCRReportObjectInstances read Get_ReportObjectInstances write Set_ReportObjectInstances;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property SectionName: WideString read Get_SectionName write Set_SectionName;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
  end;

// *********************************************************************//
// DispIntf:  ISCRSectionInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B185D51C-8588-430A-964F-DB61FFB6505E}
// *********************************************************************//
  ISCRSectionInstanceDisp = dispinterface
    ['{B185D51C-8588-430A-964F-DB61FFB6505E}']
    function  Clone(DeepClone: WordBool): ISCRSectionInstance; dispid 1001;
    procedure CopyTo(const SectionInstance: ISCRSectionInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const SectionInstance: ISCRSectionInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetInPageX: Integer dispid 1;
    property OffsetInPageY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property BackgroundColor: OLE_COLOR dispid 5;
    property Kind: CrAreaSectionKindEnum dispid 6;
    property GroupTreeNodeID: ISCRGroupTreeNodeID dispid 7;
    property EnableUnderlaySection: WordBool dispid 8;
    property ReportObjectInstances: ISCRReportObjectInstances dispid 9;
    property StyleSheetName: WideString dispid 10;
    property SectionName: WideString dispid 11;
    property OverriddenInfo: Integer dispid 12;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 13;
    property Highlight: WordBool dispid 14;
    property GroupNamePath: WideString dispid 15;
  end;

// *********************************************************************//
// Interface: ISCRGroupTreeNodeID
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8DC3E28A-D8C7-4A48-9443-7AD787796C6C}
// *********************************************************************//
  ISCRGroupTreeNodeID = interface(IDispatch)
    ['{8DC3E28A-D8C7-4A48-9443-7AD787796C6C}']
    function  Clone(DeepClone: WordBool): ISCRGroupTreeNodeID; safecall;
    procedure CopyTo(const GroupTreeNodeID: ISCRGroupTreeNodeID; DeepCopy: WordBool); safecall;
    function  Equals(const GroupTreeNodeID: ISCRGroupTreeNodeID): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_GroupName: WideString; safecall;
    procedure Set_GroupName(const pVal: WideString); safecall;
    function  Get_GroupLevel: LongWord; safecall;
    procedure Set_GroupLevel(pVal: LongWord); safecall;
    function  Get_GroupPath: OleVariant; safecall;
    procedure Set_GroupPath(pVal: OleVariant); safecall;
    procedure MatchID(const nodeID: ISCRGroupTreeNodeID; out pMatched: WordBool); safecall;
    function  Get_GroupNamePath: WideString; safecall;
    procedure Set_GroupNamePath(const pVal: WideString); safecall;
    property ClassName: WideString read Get_ClassName;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property GroupLevel: LongWord read Get_GroupLevel write Set_GroupLevel;
    property GroupPath: OleVariant read Get_GroupPath write Set_GroupPath;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
  end;

// *********************************************************************//
// DispIntf:  ISCRGroupTreeNodeIDDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8DC3E28A-D8C7-4A48-9443-7AD787796C6C}
// *********************************************************************//
  ISCRGroupTreeNodeIDDisp = dispinterface
    ['{8DC3E28A-D8C7-4A48-9443-7AD787796C6C}']
    function  Clone(DeepClone: WordBool): ISCRGroupTreeNodeID; dispid 1001;
    procedure CopyTo(const GroupTreeNodeID: ISCRGroupTreeNodeID; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GroupTreeNodeID: ISCRGroupTreeNodeID): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property GroupName: WideString dispid 1;
    property GroupLevel: LongWord dispid 2;
    property GroupPath: OleVariant dispid 3;
    procedure MatchID(const nodeID: ISCRGroupTreeNodeID; out pMatched: WordBool); dispid 4;
    property GroupNamePath: WideString dispid 5;
  end;

// *********************************************************************//
// Interface: ISCRReportObjectInstances
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F62D5420-A6F4-4513-A4D4-137A0BC0E2A6}
// *********************************************************************//
  ISCRReportObjectInstances = interface(IDispatch)
    ['{F62D5420-A6F4-4513-A4D4-137A0BC0E2A6}']
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstances; safecall;
    procedure CopyTo(const ReportObjectInstances: ISCRReportObjectInstances; DeepCopy: WordBool); safecall;
    function  Equals(const ReportObjectInstances: ISCRReportObjectInstances): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRReportObjectInstance; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRReportObjectInstance); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const ReportObjectInstance: ISCRReportObjectInstance); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const ReportObjectInstance: ISCRReportObjectInstance); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const ReportObjectInstance: ISCRReportObjectInstance): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRReportObjectInstance read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRReportObjectInstancesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F62D5420-A6F4-4513-A4D4-137A0BC0E2A6}
// *********************************************************************//
  ISCRReportObjectInstancesDisp = dispinterface
    ['{F62D5420-A6F4-4513-A4D4-137A0BC0E2A6}']
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstances; dispid 1001;
    procedure CopyTo(const ReportObjectInstances: ISCRReportObjectInstances; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstances: ISCRReportObjectInstances): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRReportObjectInstance dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const ReportObjectInstance: ISCRReportObjectInstance); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const ReportObjectInstance: ISCRReportObjectInstance); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const ReportObjectInstance: ISCRReportObjectInstance): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRLineObjectInstances
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DD3209EA-DFD0-4F60-9E33-1B676BB8D603}
// *********************************************************************//
  ISCRLineObjectInstances = interface(IDispatch)
    ['{DD3209EA-DFD0-4F60-9E33-1B676BB8D603}']
    function  Clone(DeepClone: WordBool): ISCRLineObjectInstances; safecall;
    procedure CopyTo(const LineObjectInstances: ISCRLineObjectInstances; DeepCopy: WordBool); safecall;
    function  Equals(const LineObjectInstances: ISCRLineObjectInstances): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRDrawingObjectInstance; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRDrawingObjectInstance); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const LineObjectInstance: ISCRDrawingObjectInstance); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const LineObjectInstance: ISCRDrawingObjectInstance); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const LineObjectInstance: ISCRDrawingObjectInstance): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRDrawingObjectInstance read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRLineObjectInstancesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DD3209EA-DFD0-4F60-9E33-1B676BB8D603}
// *********************************************************************//
  ISCRLineObjectInstancesDisp = dispinterface
    ['{DD3209EA-DFD0-4F60-9E33-1B676BB8D603}']
    function  Clone(DeepClone: WordBool): ISCRLineObjectInstances; dispid 1001;
    procedure CopyTo(const LineObjectInstances: ISCRLineObjectInstances; DeepCopy: WordBool); dispid 1002;
    function  Equals(const LineObjectInstances: ISCRLineObjectInstances): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRDrawingObjectInstance dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const LineObjectInstance: ISCRDrawingObjectInstance); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const LineObjectInstance: ISCRDrawingObjectInstance); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const LineObjectInstance: ISCRDrawingObjectInstance): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRDrawingObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {37819D51-72B4-4B03-ABB6-0AA3BB4B1FB8}
// *********************************************************************//
  ISCRDrawingObjectInstance = interface(IDispatch)
    ['{37819D51-72B4-4B03-ABB6-0AA3BB4B1FB8}']
    function  Get_StartX: Integer; safecall;
    procedure Set_StartX(pVal: Integer); safecall;
    function  Get_StartY: Integer; safecall;
    procedure Set_StartY(pVal: Integer); safecall;
    function  Get_EndX: Integer; safecall;
    procedure Set_EndX(pVal: Integer); safecall;
    function  Get_EndY: Integer; safecall;
    procedure Set_EndY(pVal: Integer); safecall;
    function  Get_LineColor: OLE_COLOR; safecall;
    procedure Set_LineColor(pVal: OLE_COLOR); safecall;
    function  Get_LineStyle: CrLineStyleEnum; safecall;
    procedure Set_LineStyle(pVal: CrLineStyleEnum); safecall;
    function  Get_LineThickness: Integer; safecall;
    procedure Set_LineThickness(pVal: Integer); safecall;
    function  Get_ObjectName: WideString; safecall;
    procedure Set_ObjectName(const pVal: WideString); safecall;
    function  Get_StyleSheetName: WideString; safecall;
    procedure Set_StyleSheetName(const pVal: WideString); safecall;
    property StartX: Integer read Get_StartX write Set_StartX;
    property StartY: Integer read Get_StartY write Set_StartY;
    property EndX: Integer read Get_EndX write Set_EndX;
    property EndY: Integer read Get_EndY write Set_EndY;
    property LineColor: OLE_COLOR read Get_LineColor write Set_LineColor;
    property LineStyle: CrLineStyleEnum read Get_LineStyle write Set_LineStyle;
    property LineThickness: Integer read Get_LineThickness write Set_LineThickness;
    property ObjectName: WideString read Get_ObjectName write Set_ObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
  end;

// *********************************************************************//
// DispIntf:  ISCRDrawingObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {37819D51-72B4-4B03-ABB6-0AA3BB4B1FB8}
// *********************************************************************//
  ISCRDrawingObjectInstanceDisp = dispinterface
    ['{37819D51-72B4-4B03-ABB6-0AA3BB4B1FB8}']
    property StartX: Integer dispid 1;
    property StartY: Integer dispid 2;
    property EndX: Integer dispid 3;
    property EndY: Integer dispid 4;
    property LineColor: OLE_COLOR dispid 5;
    property LineStyle: CrLineStyleEnum dispid 6;
    property LineThickness: Integer dispid 7;
    property ObjectName: WideString dispid 8;
    property StyleSheetName: WideString dispid 9;
  end;

// *********************************************************************//
// Interface: ISCRLineObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {82033D34-CF17-469A-ABB1-A1A338F545D6}
// *********************************************************************//
  ISCRLineObjectInstance = interface(ISCRDrawingObjectInstance)
    ['{82033D34-CF17-469A-ABB1-A1A338F545D6}']
    function  Clone(DeepClone: WordBool): ISCRDrawingObjectInstance; safecall;
    procedure CopyTo(const LineObjectInstance: ISCRDrawingObjectInstance; DeepCopy: WordBool); safecall;
    function  Equals(const LineObjectInstance: ISCRDrawingObjectInstance): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    property ClassName: WideString read Get_ClassName;
  end;

// *********************************************************************//
// DispIntf:  ISCRLineObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {82033D34-CF17-469A-ABB1-A1A338F545D6}
// *********************************************************************//
  ISCRLineObjectInstanceDisp = dispinterface
    ['{82033D34-CF17-469A-ABB1-A1A338F545D6}']
    function  Clone(DeepClone: WordBool): ISCRDrawingObjectInstance; dispid 1001;
    procedure CopyTo(const LineObjectInstance: ISCRDrawingObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const LineObjectInstance: ISCRDrawingObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property StartX: Integer dispid 1;
    property StartY: Integer dispid 2;
    property EndX: Integer dispid 3;
    property EndY: Integer dispid 4;
    property LineColor: OLE_COLOR dispid 5;
    property LineStyle: CrLineStyleEnum dispid 6;
    property LineThickness: Integer dispid 7;
    property ObjectName: WideString dispid 8;
    property StyleSheetName: WideString dispid 9;
  end;

// *********************************************************************//
// Interface: ISCRBoxObjectInstances
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CFE1896F-B6BC-48C5-86DF-F6B1390A77EC}
// *********************************************************************//
  ISCRBoxObjectInstances = interface(IDispatch)
    ['{CFE1896F-B6BC-48C5-86DF-F6B1390A77EC}']
    function  Clone(DeepClone: WordBool): ISCRBoxObjectInstances; safecall;
    procedure CopyTo(const BoxObjectInstances: ISCRBoxObjectInstances; DeepCopy: WordBool); safecall;
    function  Equals(const BoxObjectInstances: ISCRBoxObjectInstances): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRBoxObjectInstance; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRBoxObjectInstance); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const BoxObjectInstance: ISCRBoxObjectInstance); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const BoxObjectInstance: ISCRBoxObjectInstance); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const BoxObjectInstance: ISCRBoxObjectInstance): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRBoxObjectInstance read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRBoxObjectInstancesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CFE1896F-B6BC-48C5-86DF-F6B1390A77EC}
// *********************************************************************//
  ISCRBoxObjectInstancesDisp = dispinterface
    ['{CFE1896F-B6BC-48C5-86DF-F6B1390A77EC}']
    function  Clone(DeepClone: WordBool): ISCRBoxObjectInstances; dispid 1001;
    procedure CopyTo(const BoxObjectInstances: ISCRBoxObjectInstances; DeepCopy: WordBool); dispid 1002;
    function  Equals(const BoxObjectInstances: ISCRBoxObjectInstances): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRBoxObjectInstance dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const BoxObjectInstance: ISCRBoxObjectInstance); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const BoxObjectInstance: ISCRBoxObjectInstance); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const BoxObjectInstance: ISCRBoxObjectInstance): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRBoxObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {74742555-4C6C-49CB-9D89-A47B4C737FEB}
// *********************************************************************//
  ISCRBoxObjectInstance = interface(ISCRDrawingObjectInstance)
    ['{74742555-4C6C-49CB-9D89-A47B4C737FEB}']
    function  Clone(DeepClone: WordBool): ISCRBoxObjectInstance; safecall;
    procedure CopyTo(const BoxObjectInstance: ISCRBoxObjectInstance; DeepCopy: WordBool); safecall;
    function  Equals(const BoxObjectInstance: ISCRBoxObjectInstance): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_FillColor: OLE_COLOR; safecall;
    procedure Set_FillColor(pVal: OLE_COLOR); safecall;
    function  Get_CornerEllipseWidth: Integer; safecall;
    procedure Set_CornerEllipseWidth(pVal: Integer); safecall;
    function  Get_CornerEllipseHeight: Integer; safecall;
    procedure Set_CornerEllipseHeight(pVal: Integer); safecall;
    function  Get_TopClosed: WordBool; safecall;
    procedure Set_TopClosed(pVal: WordBool); safecall;
    function  Get_BottomClosed: WordBool; safecall;
    procedure Set_BottomClosed(pVal: WordBool); safecall;
    function  Get_HasDropShadow: WordBool; safecall;
    procedure Set_HasDropShadow(pVal: WordBool); safecall;
    property ClassName: WideString read Get_ClassName;
    property FillColor: OLE_COLOR read Get_FillColor write Set_FillColor;
    property CornerEllipseWidth: Integer read Get_CornerEllipseWidth write Set_CornerEllipseWidth;
    property CornerEllipseHeight: Integer read Get_CornerEllipseHeight write Set_CornerEllipseHeight;
    property TopClosed: WordBool read Get_TopClosed write Set_TopClosed;
    property BottomClosed: WordBool read Get_BottomClosed write Set_BottomClosed;
    property HasDropShadow: WordBool read Get_HasDropShadow write Set_HasDropShadow;
  end;

// *********************************************************************//
// DispIntf:  ISCRBoxObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {74742555-4C6C-49CB-9D89-A47B4C737FEB}
// *********************************************************************//
  ISCRBoxObjectInstanceDisp = dispinterface
    ['{74742555-4C6C-49CB-9D89-A47B4C737FEB}']
    function  Clone(DeepClone: WordBool): ISCRBoxObjectInstance; dispid 1001;
    procedure CopyTo(const BoxObjectInstance: ISCRBoxObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const BoxObjectInstance: ISCRBoxObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property FillColor: OLE_COLOR dispid 41;
    property CornerEllipseWidth: Integer dispid 42;
    property CornerEllipseHeight: Integer dispid 43;
    property TopClosed: WordBool dispid 44;
    property BottomClosed: WordBool dispid 45;
    property HasDropShadow: WordBool dispid 46;
    property StartX: Integer dispid 1;
    property StartY: Integer dispid 2;
    property EndX: Integer dispid 3;
    property EndY: Integer dispid 4;
    property LineColor: OLE_COLOR dispid 5;
    property LineStyle: CrLineStyleEnum dispid 6;
    property LineThickness: Integer dispid 7;
    property ObjectName: WideString dispid 8;
    property StyleSheetName: WideString dispid 9;
  end;

// *********************************************************************//
// Interface: ISCRSubreportContext
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6236DD50-909F-4499-B01D-3508EEF7ACF7}
// *********************************************************************//
  ISCRSubreportContext = interface(IDispatch)
    ['{6236DD50-909F-4499-B01D-3508EEF7ACF7}']
    function  Clone(DeepClone: WordBool): ISCRSubreportContext; safecall;
    procedure CopyTo(const SubreportContext: ISCRSubreportContext; DeepCopy: WordBool); safecall;
    function  Equals(const SubreportContext: ISCRSubreportContext): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_SubreportName: WideString; safecall;
    procedure Set_SubreportName(const pVal: WideString); safecall;
    function  Get_SubreportIndex: Integer; safecall;
    procedure Set_SubreportIndex(pVal: Integer); safecall;
    function  Get_PageNumber: Integer; safecall;
    procedure Set_PageNumber(pVal: Integer); safecall;
    function  Get_ContainingGroupInfo: ISCRGroupTreeNodeID; safecall;
    procedure Set_ContainingGroupInfo(const pVal: ISCRGroupTreeNodeID); safecall;
    procedure MatchSubreport(const context: ISCRSubreportContext; out pMatched: WordBool); safecall;
    property ClassName: WideString read Get_ClassName;
    property SubreportName: WideString read Get_SubreportName write Set_SubreportName;
    property SubreportIndex: Integer read Get_SubreportIndex write Set_SubreportIndex;
    property PageNumber: Integer read Get_PageNumber write Set_PageNumber;
    property ContainingGroupInfo: ISCRGroupTreeNodeID read Get_ContainingGroupInfo write Set_ContainingGroupInfo;
  end;

// *********************************************************************//
// DispIntf:  ISCRSubreportContextDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6236DD50-909F-4499-B01D-3508EEF7ACF7}
// *********************************************************************//
  ISCRSubreportContextDisp = dispinterface
    ['{6236DD50-909F-4499-B01D-3508EEF7ACF7}']
    function  Clone(DeepClone: WordBool): ISCRSubreportContext; dispid 1001;
    procedure CopyTo(const SubreportContext: ISCRSubreportContext; DeepCopy: WordBool); dispid 1002;
    function  Equals(const SubreportContext: ISCRSubreportContext): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property SubreportName: WideString dispid 1;
    property SubreportIndex: Integer dispid 2;
    property PageNumber: Integer dispid 3;
    property ContainingGroupInfo: ISCRGroupTreeNodeID dispid 4;
    procedure MatchSubreport(const context: ISCRSubreportContext; out pMatched: WordBool); dispid 5;
  end;

// *********************************************************************//
// Interface: ISCRPageObjectFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1EC6DAF9-763E-461F-9534-F9E2C59DB4C5}
// *********************************************************************//
  ISCRPageObjectFactory = interface(IDispatch)
    ['{1EC6DAF9-763E-461F-9534-F9E2C59DB4C5}']
    procedure GetReportObject(objectType: CrObjectInstanceKindEnum; 
                              out ppReportObject: ISCRReportObjectInstance); safecall;
    procedure GetPage(out ppReportPage: ISCRPageObjectInstance); safecall;
  end;

// *********************************************************************//
// DispIntf:  ISCRPageObjectFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1EC6DAF9-763E-461F-9534-F9E2C59DB4C5}
// *********************************************************************//
  ISCRPageObjectFactoryDisp = dispinterface
    ['{1EC6DAF9-763E-461F-9534-F9E2C59DB4C5}']
    procedure GetReportObject(objectType: CrObjectInstanceKindEnum; 
                              out ppReportObject: ISCRReportObjectInstance); dispid 1;
    procedure GetPage(out ppReportPage: ISCRPageObjectInstance); dispid 2;
  end;

// *********************************************************************//
// Interface: ISCRRuntimeFontColor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E4E64E45-62BC-4F2B-AF30-7D233C51BBC9}
// *********************************************************************//
  ISCRRuntimeFontColor = interface(IDispatch)
    ['{E4E64E45-62BC-4F2B-AF30-7D233C51BBC9}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeFontColor; safecall;
    procedure CopyTo(const RuntimeFontColor: ISCRRuntimeFontColor; DeepCopy: WordBool); safecall;
    function  Equals(const RuntimeFontColor: ISCRRuntimeFontColor): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_Font: ISCRFont; safecall;
    procedure Set_Font(const pVal: ISCRFont); safecall;
    function  Get_Color: OLE_COLOR; safecall;
    procedure Set_Color(pVal: OLE_COLOR); safecall;
    function  Get_OverriddenInfo: Integer; safecall;
    procedure Set_OverriddenInfo(pVal: Integer); safecall;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); safecall;
    property ClassName: WideString read Get_ClassName;
    property Font: ISCRFont read Get_Font write Set_Font;
    property Color: OLE_COLOR read Get_Color write Set_Color;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
  end;

// *********************************************************************//
// DispIntf:  ISCRRuntimeFontColorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E4E64E45-62BC-4F2B-AF30-7D233C51BBC9}
// *********************************************************************//
  ISCRRuntimeFontColorDisp = dispinterface
    ['{E4E64E45-62BC-4F2B-AF30-7D233C51BBC9}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeFontColor; dispid 1001;
    procedure CopyTo(const RuntimeFontColor: ISCRRuntimeFontColor; DeepCopy: WordBool); dispid 1002;
    function  Equals(const RuntimeFontColor: ISCRRuntimeFontColor): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property Font: ISCRFont dispid 1;
    property Color: OLE_COLOR dispid 2;
    property OverriddenInfo: Integer dispid 3;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 4;
  end;

// *********************************************************************//
// Interface: ISCRFont
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0EB4306F-6B82-4EB4-A846-B1A4094362DC}
// *********************************************************************//
  ISCRFont = interface(IDispatch)
    ['{0EB4306F-6B82-4EB4-A846-B1A4094362DC}']
    function  Clone(DeepClone: WordBool): ISCRFont; safecall;
    procedure CopyTo(const Font: ISCRFont; DeepCopy: WordBool); safecall;
    function  Equals(const Font: ISCRFont): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    function  Get_Size: Currency; safecall;
    procedure Set_Size(pVal: Currency); safecall;
    function  Get_Bold: WordBool; safecall;
    procedure Set_Bold(pVal: WordBool); safecall;
    function  Get_Italic: WordBool; safecall;
    procedure Set_Italic(pVal: WordBool); safecall;
    function  Get_Underline: WordBool; safecall;
    procedure Set_Underline(pVal: WordBool); safecall;
    function  Get_Strikethrough: WordBool; safecall;
    procedure Set_Strikethrough(pVal: WordBool); safecall;
    function  Get_Weight: Smallint; safecall;
    procedure Set_Weight(pVal: Smallint); safecall;
    function  Get_Charset: Smallint; safecall;
    procedure Set_Charset(pVal: Smallint); safecall;
    property ClassName: WideString read Get_ClassName;
    property Name: WideString read Get_Name write Set_Name;
    property Size: Currency read Get_Size write Set_Size;
    property Bold: WordBool read Get_Bold write Set_Bold;
    property Italic: WordBool read Get_Italic write Set_Italic;
    property Underline: WordBool read Get_Underline write Set_Underline;
    property Strikethrough: WordBool read Get_Strikethrough write Set_Strikethrough;
    property Weight: Smallint read Get_Weight write Set_Weight;
    property Charset: Smallint read Get_Charset write Set_Charset;
  end;

// *********************************************************************//
// DispIntf:  ISCRFontDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0EB4306F-6B82-4EB4-A846-B1A4094362DC}
// *********************************************************************//
  ISCRFontDisp = dispinterface
    ['{0EB4306F-6B82-4EB4-A846-B1A4094362DC}']
    function  Clone(DeepClone: WordBool): ISCRFont; dispid 1001;
    procedure CopyTo(const Font: ISCRFont; DeepCopy: WordBool); dispid 1002;
    function  Equals(const Font: ISCRFont): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property Name: WideString dispid 0;
    property Size: Currency dispid 2;
    property Bold: WordBool dispid 3;
    property Italic: WordBool dispid 4;
    property Underline: WordBool dispid 5;
    property Strikethrough: WordBool dispid 6;
    property Weight: Smallint dispid 7;
    property Charset: Smallint dispid 8;
  end;

// *********************************************************************//
// Interface: ISCRRuntimeParagraphElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F002D226-8B86-4883-8295-0F961DDE972A}
// *********************************************************************//
  ISCRRuntimeParagraphElement = interface(IDispatch)
    ['{F002D226-8B86-4883-8295-0F961DDE972A}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraphElement; safecall;
    procedure CopyTo(const RuntimeParagraphElement: ISCRRuntimeParagraphElement; DeepCopy: WordBool); safecall;
    function  Equals(const RuntimeParagraphElement: ISCRRuntimeParagraphElement): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_FontColor: ISCRRuntimeFontColor; safecall;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor); safecall;
    function  Get_Kind: CrRuntimeParagraphElementKindEnum; safecall;
    procedure Set_Kind(pVal: CrRuntimeParagraphElementKindEnum); safecall;
    property ClassName: WideString read Get_ClassName;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property Kind: CrRuntimeParagraphElementKindEnum read Get_Kind write Set_Kind;
  end;

// *********************************************************************//
// DispIntf:  ISCRRuntimeParagraphElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F002D226-8B86-4883-8295-0F961DDE972A}
// *********************************************************************//
  ISCRRuntimeParagraphElementDisp = dispinterface
    ['{F002D226-8B86-4883-8295-0F961DDE972A}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraphElement; dispid 1001;
    procedure CopyTo(const RuntimeParagraphElement: ISCRRuntimeParagraphElement; DeepCopy: WordBool); dispid 1002;
    function  Equals(const RuntimeParagraphElement: ISCRRuntimeParagraphElement): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property FontColor: ISCRRuntimeFontColor dispid 1;
    property Kind: CrRuntimeParagraphElementKindEnum dispid 2;
  end;

// *********************************************************************//
// Interface: ISCRRuntimeParagraphTabElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23470B56-4B55-4E27-A212-91DA1404725A}
// *********************************************************************//
  ISCRRuntimeParagraphTabElement = interface(ISCRRuntimeParagraphElement)
    ['{23470B56-4B55-4E27-A212-91DA1404725A}']
  end;

// *********************************************************************//
// DispIntf:  ISCRRuntimeParagraphTabElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23470B56-4B55-4E27-A212-91DA1404725A}
// *********************************************************************//
  ISCRRuntimeParagraphTabElementDisp = dispinterface
    ['{23470B56-4B55-4E27-A212-91DA1404725A}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraphElement; dispid 1001;
    procedure CopyTo(const RuntimeParagraphElement: ISCRRuntimeParagraphElement; DeepCopy: WordBool); dispid 1002;
    function  Equals(const RuntimeParagraphElement: ISCRRuntimeParagraphElement): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property FontColor: ISCRRuntimeFontColor dispid 1;
    property Kind: CrRuntimeParagraphElementKindEnum dispid 2;
  end;

// *********************************************************************//
// Interface: ISCRRuntimeParagraphTextElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {74CFB714-3BB6-4F61-9ED4-B89AC902C9B3}
// *********************************************************************//
  ISCRRuntimeParagraphTextElement = interface(ISCRRuntimeParagraphElement)
    ['{74CFB714-3BB6-4F61-9ED4-B89AC902C9B3}']
    function  Get_Text: WideString; safecall;
    procedure Set_Text(const pVal: WideString); safecall;
    function  Get_CharacterSpacing: Integer; safecall;
    procedure Set_CharacterSpacing(pVal: Integer); safecall;
    function  Get_RightToLeftReading: WordBool; safecall;
    procedure Set_RightToLeftReading(pVal: WordBool); safecall;
    function  Get_NeedsToJoinTheNext: OleVariant; safecall;
    procedure Set_NeedsToJoinTheNext(pVal: OleVariant); safecall;
    function  Get_IsWhiteSpace: OleVariant; safecall;
    procedure Set_IsWhiteSpace(pVal: OleVariant); safecall;
    property Text: WideString read Get_Text write Set_Text;
    property CharacterSpacing: Integer read Get_CharacterSpacing write Set_CharacterSpacing;
    property RightToLeftReading: WordBool read Get_RightToLeftReading write Set_RightToLeftReading;
    property NeedsToJoinTheNext: OleVariant read Get_NeedsToJoinTheNext write Set_NeedsToJoinTheNext;
    property IsWhiteSpace: OleVariant read Get_IsWhiteSpace write Set_IsWhiteSpace;
  end;

// *********************************************************************//
// DispIntf:  ISCRRuntimeParagraphTextElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {74CFB714-3BB6-4F61-9ED4-B89AC902C9B3}
// *********************************************************************//
  ISCRRuntimeParagraphTextElementDisp = dispinterface
    ['{74CFB714-3BB6-4F61-9ED4-B89AC902C9B3}']
    property Text: WideString dispid 20;
    property CharacterSpacing: Integer dispid 21;
    property RightToLeftReading: WordBool dispid 22;
    property NeedsToJoinTheNext: OleVariant dispid 23;
    property IsWhiteSpace: OleVariant dispid 24;
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraphElement; dispid 1001;
    procedure CopyTo(const RuntimeParagraphElement: ISCRRuntimeParagraphElement; DeepCopy: WordBool); dispid 1002;
    function  Equals(const RuntimeParagraphElement: ISCRRuntimeParagraphElement): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property FontColor: ISCRRuntimeFontColor dispid 1;
    property Kind: CrRuntimeParagraphElementKindEnum dispid 2;
  end;

// *********************************************************************//
// Interface: ISCRRuntimeParagraphElements
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1B51401-F0DF-437B-98A1-CFE6E24E14A2}
// *********************************************************************//
  ISCRRuntimeParagraphElements = interface(IDispatch)
    ['{B1B51401-F0DF-437B-98A1-CFE6E24E14A2}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraphElements; safecall;
    procedure CopyTo(const RuntimeParagraphElements: ISCRRuntimeParagraphElements; 
                     DeepCopy: WordBool); safecall;
    function  Equals(const RuntimeParagraphElements: ISCRRuntimeParagraphElements): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRRuntimeParagraphElement; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRRuntimeParagraphElement); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const RuntimeParagraphElement: ISCRRuntimeParagraphElement); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const RuntimeParagraphElement: ISCRRuntimeParagraphElement); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const RuntimeParagraphElement: ISCRRuntimeParagraphElement): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRRuntimeParagraphElement read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRRuntimeParagraphElementsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1B51401-F0DF-437B-98A1-CFE6E24E14A2}
// *********************************************************************//
  ISCRRuntimeParagraphElementsDisp = dispinterface
    ['{B1B51401-F0DF-437B-98A1-CFE6E24E14A2}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraphElements; dispid 1001;
    procedure CopyTo(const RuntimeParagraphElements: ISCRRuntimeParagraphElements; 
                     DeepCopy: WordBool); dispid 1002;
    function  Equals(const RuntimeParagraphElements: ISCRRuntimeParagraphElements): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRRuntimeParagraphElement dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const RuntimeParagraphElement: ISCRRuntimeParagraphElement); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const RuntimeParagraphElement: ISCRRuntimeParagraphElement); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const RuntimeParagraphElement: ISCRRuntimeParagraphElement): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRTabUnit
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {486A6AEC-B2D7-4154-B547-7E0A9C98DF99}
// *********************************************************************//
  ISCRTabUnit = interface(IDispatch)
    ['{486A6AEC-B2D7-4154-B547-7E0A9C98DF99}']
    function  Clone(DeepClone: WordBool): ISCRTabUnit; safecall;
    procedure CopyTo(const TabUnit: ISCRTabUnit; DeepCopy: WordBool); safecall;
    function  Equals(const TabUnit: ISCRTabUnit): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_Alignment: CrAlignmentEnum; safecall;
    procedure Set_Alignment(pVal: CrAlignmentEnum); safecall;
    function  Get_Position: Integer; safecall;
    procedure Set_Position(pVal: Integer); safecall;
    function  Get_AlignRunIndex: Integer; safecall;
    procedure Set_AlignRunIndex(pVal: Integer); safecall;
    function  Get_AlignCharIndex: Integer; safecall;
    procedure Set_AlignCharIndex(pVal: Integer); safecall;
    function  Get_RunCount: Integer; safecall;
    procedure Set_RunCount(pVal: Integer); safecall;
    function  Get_VisualToLogical: OleVariant; safecall;
    procedure Set_VisualToLogical(pVal: OleVariant); safecall;
    function  Get_ParagraphElements: ISCRRuntimeParagraphElements; safecall;
    procedure Set_ParagraphElements(const pVal: ISCRRuntimeParagraphElements); safecall;
    property ClassName: WideString read Get_ClassName;
    property Alignment: CrAlignmentEnum read Get_Alignment write Set_Alignment;
    property Position: Integer read Get_Position write Set_Position;
    property AlignRunIndex: Integer read Get_AlignRunIndex write Set_AlignRunIndex;
    property AlignCharIndex: Integer read Get_AlignCharIndex write Set_AlignCharIndex;
    property RunCount: Integer read Get_RunCount write Set_RunCount;
    property VisualToLogical: OleVariant read Get_VisualToLogical write Set_VisualToLogical;
    property ParagraphElements: ISCRRuntimeParagraphElements read Get_ParagraphElements write Set_ParagraphElements;
  end;

// *********************************************************************//
// DispIntf:  ISCRTabUnitDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {486A6AEC-B2D7-4154-B547-7E0A9C98DF99}
// *********************************************************************//
  ISCRTabUnitDisp = dispinterface
    ['{486A6AEC-B2D7-4154-B547-7E0A9C98DF99}']
    function  Clone(DeepClone: WordBool): ISCRTabUnit; dispid 1001;
    procedure CopyTo(const TabUnit: ISCRTabUnit; DeepCopy: WordBool); dispid 1002;
    function  Equals(const TabUnit: ISCRTabUnit): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property Alignment: CrAlignmentEnum dispid 1;
    property Position: Integer dispid 2;
    property AlignRunIndex: Integer dispid 3;
    property AlignCharIndex: Integer dispid 4;
    property RunCount: Integer dispid 5;
    property VisualToLogical: OleVariant dispid 6;
    property ParagraphElements: ISCRRuntimeParagraphElements dispid 7;
  end;

// *********************************************************************//
// Interface: ISCRTabUnitEx
// Flags:     (16) Hidden
// GUID:      {33A7E20F-755F-4F9F-9F93-4F4F2F219F1C}
// *********************************************************************//
  ISCRTabUnitEx = interface(IUnknown)
    ['{33A7E20F-755F-4F9F-9F93-4F4F2F219F1C}']
    function  getVisualToLogical(out pcSize: LongWord; out pVal: PInteger1): HResult; stdcall;
    function  getParagraphElements(out pVal: PUserType1): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRTabUnits
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5A04C745-0F30-4A2D-87D7-931D9544FAFA}
// *********************************************************************//
  ISCRTabUnits = interface(IDispatch)
    ['{5A04C745-0F30-4A2D-87D7-931D9544FAFA}']
    function  Clone(DeepClone: WordBool): ISCRTabUnits; safecall;
    procedure CopyTo(const TabUnits: ISCRTabUnits; DeepCopy: WordBool); safecall;
    function  Equals(const TabUnits: ISCRTabUnits): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRTabUnit; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRTabUnit); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const TabUnit: ISCRTabUnit); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const TabUnit: ISCRTabUnit); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const TabUnit: ISCRTabUnit): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRTabUnit read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRTabUnitsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5A04C745-0F30-4A2D-87D7-931D9544FAFA}
// *********************************************************************//
  ISCRTabUnitsDisp = dispinterface
    ['{5A04C745-0F30-4A2D-87D7-931D9544FAFA}']
    function  Clone(DeepClone: WordBool): ISCRTabUnits; dispid 1001;
    procedure CopyTo(const TabUnits: ISCRTabUnits; DeepCopy: WordBool); dispid 1002;
    function  Equals(const TabUnits: ISCRTabUnits): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRTabUnit dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const TabUnit: ISCRTabUnit); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const TabUnit: ISCRTabUnit); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const TabUnit: ISCRTabUnit): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRTextLine
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {67BE28CE-6B1F-47F9-841C-8E8086625BE5}
// *********************************************************************//
  ISCRTextLine = interface(IDispatch)
    ['{67BE28CE-6B1F-47F9-841C-8E8086625BE5}']
    function  Clone(DeepClone: WordBool): ISCRTextLine; safecall;
    procedure CopyTo(const TextLine: ISCRTextLine; DeepCopy: WordBool); safecall;
    function  Equals(const TextLine: ISCRTextLine): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_ParagraphElements: ISCRRuntimeParagraphElements; safecall;
    procedure Set_ParagraphElements(const pVal: ISCRRuntimeParagraphElements); safecall;
    function  Get_BaseLine: Integer; safecall;
    procedure Set_BaseLine(pVal: Integer); safecall;
    function  Get_TabUnits: ISCRTabUnits; safecall;
    procedure Set_TabUnits(const pVal: ISCRTabUnits); safecall;
    property ClassName: WideString read Get_ClassName;
    property ParagraphElements: ISCRRuntimeParagraphElements read Get_ParagraphElements write Set_ParagraphElements;
    property BaseLine: Integer read Get_BaseLine write Set_BaseLine;
    property TabUnits: ISCRTabUnits read Get_TabUnits write Set_TabUnits;
  end;

// *********************************************************************//
// DispIntf:  ISCRTextLineDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {67BE28CE-6B1F-47F9-841C-8E8086625BE5}
// *********************************************************************//
  ISCRTextLineDisp = dispinterface
    ['{67BE28CE-6B1F-47F9-841C-8E8086625BE5}']
    function  Clone(DeepClone: WordBool): ISCRTextLine; dispid 1001;
    procedure CopyTo(const TextLine: ISCRTextLine; DeepCopy: WordBool); dispid 1002;
    function  Equals(const TextLine: ISCRTextLine): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property ParagraphElements: ISCRRuntimeParagraphElements dispid 1;
    property BaseLine: Integer dispid 2;
    property TabUnits: ISCRTabUnits dispid 3;
  end;

// *********************************************************************//
// Interface: ISCRTextLineEx
// Flags:     (16) Hidden
// GUID:      {DB323976-70CB-44D6-AA72-544E66A7958C}
// *********************************************************************//
  ISCRTextLineEx = interface(IUnknown)
    ['{DB323976-70CB-44D6-AA72-544E66A7958C}']
    function  getParagraphElements(out pVal: PUserType1): HResult; stdcall;
    function  setParagraphElements(var newVal: _CRParagraphElement): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRTextLines
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F647BBBE-C718-47C2-BA96-99E5B5046D27}
// *********************************************************************//
  ISCRTextLines = interface(IDispatch)
    ['{F647BBBE-C718-47C2-BA96-99E5B5046D27}']
    function  Clone(DeepClone: WordBool): ISCRTextLines; safecall;
    procedure CopyTo(const TextLines: ISCRTextLines; DeepCopy: WordBool); safecall;
    function  Equals(const TextLines: ISCRTextLines): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRTextLine; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRTextLine); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const TextLine: ISCRTextLine); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const TextLine: ISCRTextLine); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const TextLine: ISCRTextLine): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRTextLine read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRTextLinesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F647BBBE-C718-47C2-BA96-99E5B5046D27}
// *********************************************************************//
  ISCRTextLinesDisp = dispinterface
    ['{F647BBBE-C718-47C2-BA96-99E5B5046D27}']
    function  Clone(DeepClone: WordBool): ISCRTextLines; dispid 1001;
    procedure CopyTo(const TextLines: ISCRTextLines; DeepCopy: WordBool); dispid 1002;
    function  Equals(const TextLines: ISCRTextLines): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRTextLine dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const TextLine: ISCRTextLine); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const TextLine: ISCRTextLine); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const TextLine: ISCRTextLine): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRRuntimeParagraph
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {55F4FF93-FF32-4FD5-8D1E-54ED4173E36C}
// *********************************************************************//
  ISCRRuntimeParagraph = interface(IDispatch)
    ['{55F4FF93-FF32-4FD5-8D1E-54ED4173E36C}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraph; safecall;
    procedure CopyTo(const RuntimeParagraph: ISCRRuntimeParagraph; DeepCopy: WordBool); safecall;
    function  Equals(const RuntimeParagraph: ISCRRuntimeParagraph): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_IndentAndSpacingFormat: ISCRIndentAndSpacingFormat; safecall;
    procedure Set_IndentAndSpacingFormat(const pVal: ISCRIndentAndSpacingFormat); safecall;
    function  Get_HorizontalAlignment: CrAlignmentEnum; safecall;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum); safecall;
    function  Get_TextLines: ISCRTextLines; safecall;
    procedure Set_TextLines(const pVal: ISCRTextLines); safecall;
    function  Get_TabStops: ISCRTabStops; safecall;
    procedure Set_TabStops(const pVal: ISCRTabStops); safecall;
    function  Get_RightToLeftReading: WordBool; safecall;
    procedure Set_RightToLeftReading(pVal: WordBool); safecall;
    property ClassName: WideString read Get_ClassName;
    property IndentAndSpacingFormat: ISCRIndentAndSpacingFormat read Get_IndentAndSpacingFormat write Set_IndentAndSpacingFormat;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property TextLines: ISCRTextLines read Get_TextLines write Set_TextLines;
    property TabStops: ISCRTabStops read Get_TabStops write Set_TabStops;
    property RightToLeftReading: WordBool read Get_RightToLeftReading write Set_RightToLeftReading;
  end;

// *********************************************************************//
// DispIntf:  ISCRRuntimeParagraphDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {55F4FF93-FF32-4FD5-8D1E-54ED4173E36C}
// *********************************************************************//
  ISCRRuntimeParagraphDisp = dispinterface
    ['{55F4FF93-FF32-4FD5-8D1E-54ED4173E36C}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraph; dispid 1001;
    procedure CopyTo(const RuntimeParagraph: ISCRRuntimeParagraph; DeepCopy: WordBool); dispid 1002;
    function  Equals(const RuntimeParagraph: ISCRRuntimeParagraph): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property IndentAndSpacingFormat: ISCRIndentAndSpacingFormat dispid 1;
    property HorizontalAlignment: CrAlignmentEnum dispid 2;
    property TextLines: ISCRTextLines dispid 3;
    property TabStops: ISCRTabStops dispid 4;
    property RightToLeftReading: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface: ISCRIndentAndSpacingFormat
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F1B5CC5F-1D63-45D0-95F3-5C1976B21F84}
// *********************************************************************//
  ISCRIndentAndSpacingFormat = interface(IDispatch)
    ['{F1B5CC5F-1D63-45D0-95F3-5C1976B21F84}']
    function  Clone(DeepClone: WordBool): ISCRIndentAndSpacingFormat; safecall;
    procedure CopyTo(const IndentAndSpacingFormat: ISCRIndentAndSpacingFormat; DeepCopy: WordBool); safecall;
    function  Equals(const IndentAndSpacingFormat: ISCRIndentAndSpacingFormat): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_FirstLineIndent: Integer; safecall;
    procedure Set_FirstLineIndent(pVal: Integer); safecall;
    function  Get_LeftIndent: Integer; safecall;
    procedure Set_LeftIndent(pVal: Integer); safecall;
    function  Get_RightIndent: Integer; safecall;
    procedure Set_RightIndent(pVal: Integer); safecall;
    function  Get_LineSpacingType: CrLineSpacingTypeEnum; safecall;
    procedure Set_LineSpacingType(pVal: CrLineSpacingTypeEnum); safecall;
    function  Get_LineSpacing: Double; safecall;
    procedure Set_LineSpacing(pVal: Double); safecall;
    property ClassName: WideString read Get_ClassName;
    property FirstLineIndent: Integer read Get_FirstLineIndent write Set_FirstLineIndent;
    property LeftIndent: Integer read Get_LeftIndent write Set_LeftIndent;
    property RightIndent: Integer read Get_RightIndent write Set_RightIndent;
    property LineSpacingType: CrLineSpacingTypeEnum read Get_LineSpacingType write Set_LineSpacingType;
    property LineSpacing: Double read Get_LineSpacing write Set_LineSpacing;
  end;

// *********************************************************************//
// DispIntf:  ISCRIndentAndSpacingFormatDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F1B5CC5F-1D63-45D0-95F3-5C1976B21F84}
// *********************************************************************//
  ISCRIndentAndSpacingFormatDisp = dispinterface
    ['{F1B5CC5F-1D63-45D0-95F3-5C1976B21F84}']
    function  Clone(DeepClone: WordBool): ISCRIndentAndSpacingFormat; dispid 1001;
    procedure CopyTo(const IndentAndSpacingFormat: ISCRIndentAndSpacingFormat; DeepCopy: WordBool); dispid 1002;
    function  Equals(const IndentAndSpacingFormat: ISCRIndentAndSpacingFormat): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property FirstLineIndent: Integer dispid 51;
    property LeftIndent: Integer dispid 52;
    property RightIndent: Integer dispid 53;
    property LineSpacingType: CrLineSpacingTypeEnum dispid 54;
    property LineSpacing: Double dispid 55;
  end;

// *********************************************************************//
// Interface: ISCRTabStops
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ED554AB8-88F1-40D1-92AF-32AD54C1DF42}
// *********************************************************************//
  ISCRTabStops = interface(IDispatch)
    ['{ED554AB8-88F1-40D1-92AF-32AD54C1DF42}']
    function  Clone(DeepClone: WordBool): ISCRTabStops; safecall;
    procedure CopyTo(const TabStops: ISCRTabStops; DeepCopy: WordBool); safecall;
    function  Equals(const TabStops: ISCRTabStops): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRTabStop; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRTabStop); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const TabStop: ISCRTabStop); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const TabStop: ISCRTabStop); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const TabStop: ISCRTabStop): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRTabStop read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRTabStopsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ED554AB8-88F1-40D1-92AF-32AD54C1DF42}
// *********************************************************************//
  ISCRTabStopsDisp = dispinterface
    ['{ED554AB8-88F1-40D1-92AF-32AD54C1DF42}']
    function  Clone(DeepClone: WordBool): ISCRTabStops; dispid 1001;
    procedure CopyTo(const TabStops: ISCRTabStops; DeepCopy: WordBool); dispid 1002;
    function  Equals(const TabStops: ISCRTabStops): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRTabStop dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const TabStop: ISCRTabStop); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const TabStop: ISCRTabStop); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const TabStop: ISCRTabStop): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRTabStop
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {58D22FB1-B626-4A5D-951F-C6D6D5AF26BE}
// *********************************************************************//
  ISCRTabStop = interface(IDispatch)
    ['{58D22FB1-B626-4A5D-951F-C6D6D5AF26BE}']
    function  Clone(DeepClone: WordBool): ISCRTabStop; safecall;
    procedure CopyTo(const TabStop: ISCRTabStop; DeepCopy: WordBool); safecall;
    function  Equals(const TabStop: ISCRTabStop): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_XOffset: Integer; safecall;
    procedure Set_XOffset(pVal: Integer); safecall;
    function  Get_Alignment: CrAlignmentEnum; safecall;
    procedure Set_Alignment(pVal: CrAlignmentEnum); safecall;
    property ClassName: WideString read Get_ClassName;
    property XOffset: Integer read Get_XOffset write Set_XOffset;
    property Alignment: CrAlignmentEnum read Get_Alignment write Set_Alignment;
  end;

// *********************************************************************//
// DispIntf:  ISCRTabStopDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {58D22FB1-B626-4A5D-951F-C6D6D5AF26BE}
// *********************************************************************//
  ISCRTabStopDisp = dispinterface
    ['{58D22FB1-B626-4A5D-951F-C6D6D5AF26BE}']
    function  Clone(DeepClone: WordBool): ISCRTabStop; dispid 1001;
    procedure CopyTo(const TabStop: ISCRTabStop; DeepCopy: WordBool); dispid 1002;
    function  Equals(const TabStop: ISCRTabStop): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property XOffset: Integer dispid 1;
    property Alignment: CrAlignmentEnum dispid 2;
  end;

// *********************************************************************//
// Interface: ISCRRuntimeParagraphs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6CE91280-C132-4563-8101-E01B16267F74}
// *********************************************************************//
  ISCRRuntimeParagraphs = interface(IDispatch)
    ['{6CE91280-C132-4563-8101-E01B16267F74}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraphs; safecall;
    procedure CopyTo(const RuntimeParagraphs: ISCRRuntimeParagraphs; DeepCopy: WordBool); safecall;
    function  Equals(const RuntimeParagraphs: ISCRRuntimeParagraphs): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRRuntimeParagraph; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRRuntimeParagraph); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const RuntimeParagraph: ISCRRuntimeParagraph); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const RuntimeParagraph: ISCRRuntimeParagraph); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const RuntimeParagraph: ISCRRuntimeParagraph): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRRuntimeParagraph read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRRuntimeParagraphsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6CE91280-C132-4563-8101-E01B16267F74}
// *********************************************************************//
  ISCRRuntimeParagraphsDisp = dispinterface
    ['{6CE91280-C132-4563-8101-E01B16267F74}']
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraphs; dispid 1001;
    procedure CopyTo(const RuntimeParagraphs: ISCRRuntimeParagraphs; DeepCopy: WordBool); dispid 1002;
    function  Equals(const RuntimeParagraphs: ISCRRuntimeParagraphs): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRRuntimeParagraph dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const RuntimeParagraph: ISCRRuntimeParagraph); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const RuntimeParagraph: ISCRRuntimeParagraph); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const RuntimeParagraph: ISCRRuntimeParagraph): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRGroupTreeNodeIDEx
// Flags:     (16) Hidden
// GUID:      {817BED9E-32DB-46B7-A3AD-DDFB7BC4330D}
// *********************************************************************//
  ISCRGroupTreeNodeIDEx = interface(IUnknown)
    ['{817BED9E-32DB-46B7-A3AD-DDFB7BC4330D}']
    function  getGroupName(out pVal: PWideChar): HResult; stdcall;
    function  setGroupName(newVal: PWideChar): HResult; stdcall;
    function  getGroupPath(out pcSize: LongWord; out pVal: PUINT1): HResult; stdcall;
    function  setGroupPath(cSize: LongWord; var newVal: LongWord): HResult; stdcall;
    function  getGroupNamePath(out pVal: PWideChar): HResult; stdcall;
    function  setGroupNamePath(newVal: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRReportObjectInstanceEx
// Flags:     (16) Hidden
// GUID:      {DB586EC0-DAEF-42F0-9CF4-13FB67967625}
// *********************************************************************//
  ISCRReportObjectInstanceEx = interface(IUnknown)
    ['{DB586EC0-DAEF-42F0-9CF4-13FB67967625}']
    function  getToolTipText(out pVal: PWord1): HResult; stdcall;
    function  setToolTipText(var newVal: Word): HResult; stdcall;
    function  getHyperLink(out pVal: PWord1): HResult; stdcall;
    function  setHyperLink(var newVal: Word): HResult; stdcall;
    function  getReportObjectName(out pVal: PWord1): HResult; stdcall;
    function  setReportObjectName(var newVal: Word): HResult; stdcall;
    function  getStyleSheetName(out pVal: PWord1): HResult; stdcall;
    function  setStyleSheetName(var newVal: Word): HResult; stdcall;
    function  getDataContext(out pVal: PWord1): HResult; stdcall;
    function  setDataContext(var newVal: Word): HResult; stdcall;
    function  GetObjectText(out pObjectText: PWord1): HResult; stdcall;
    function  getGroupNamePath(out pVal: PWord1): HResult; stdcall;
    function  setGroupNamePath(var newVal: Word): HResult; stdcall;
    function  getGroupName(out pVal: PWord1): HResult; stdcall;
    function  setGroupName(var newVal: Word): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRPlaceHolderObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B4181B10-1711-11D5-80E4-00D0B73CA715}
// *********************************************************************//
  ISCRPlaceHolderObjectInstance = interface(IDispatch)
    ['{B4181B10-1711-11D5-80E4-00D0B73CA715}']
    function  Clone(DeepClone: WordBool): ISCRPlaceHolderObjectInstance; safecall;
    procedure CopyTo(const PlaceHolderObjectInstance: ISCRPlaceHolderObjectInstance; 
                     DeepCopy: WordBool); safecall;
    function  Equals(const PlaceHolderObjectInstance: ISCRPlaceHolderObjectInstance): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_OffsetX: Integer; safecall;
    procedure Set_OffsetX(pVal: Integer); safecall;
    function  Get_OffsetY: Integer; safecall;
    procedure Set_OffsetY(pVal: Integer); safecall;
    function  Get_Width: Integer; safecall;
    procedure Set_Width(pVal: Integer); safecall;
    function  Get_Height: Integer; safecall;
    procedure Set_Height(pVal: Integer); safecall;
    function  Get_ToolTipText: WideString; safecall;
    procedure Set_ToolTipText(const pVal: WideString); safecall;
    property ClassName: WideString read Get_ClassName;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
  end;

// *********************************************************************//
// DispIntf:  ISCRPlaceHolderObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B4181B10-1711-11D5-80E4-00D0B73CA715}
// *********************************************************************//
  ISCRPlaceHolderObjectInstanceDisp = dispinterface
    ['{B4181B10-1711-11D5-80E4-00D0B73CA715}']
    function  Clone(DeepClone: WordBool): ISCRPlaceHolderObjectInstance; dispid 1001;
    procedure CopyTo(const PlaceHolderObjectInstance: ISCRPlaceHolderObjectInstance; 
                     DeepCopy: WordBool); dispid 1002;
    function  Equals(const PlaceHolderObjectInstance: ISCRPlaceHolderObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property ToolTipText: WideString dispid 7;
  end;

// *********************************************************************//
// Interface: ISCRPlaceHolderObjectInstanceEx
// Flags:     (16) Hidden
// GUID:      {06996C50-6DBB-49DE-84EE-02A87162CFE1}
// *********************************************************************//
  ISCRPlaceHolderObjectInstanceEx = interface(IUnknown)
    ['{06996C50-6DBB-49DE-84EE-02A87162CFE1}']
    function  getToolTipText(out pVal: PWideChar): HResult; stdcall;
    function  setToolTipText(newVal: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRSectionInstanceEx
// Flags:     (16) Hidden
// GUID:      {276BC652-4E00-4E20-AB9C-1D482B8DBDAF}
// *********************************************************************//
  ISCRSectionInstanceEx = interface(IUnknown)
    ['{276BC652-4E00-4E20-AB9C-1D482B8DBDAF}']
    function  getStyleSheetName(out pVal: PWideChar): HResult; stdcall;
    function  setStyleSheetName(newVal: PWideChar): HResult; stdcall;
    function  getSectionName(out pVal: PWideChar): HResult; stdcall;
    function  setSectionName(newVal: PWideChar): HResult; stdcall;
    function  getGroupNamePath(out pVal: PWideChar): HResult; stdcall;
    function  setGroupNamePath(newVal: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRFieldObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44A3DE30-6B12-4859-B675-3F0EC3DD4C36}
// *********************************************************************//
  ISCRFieldObjectInstance = interface(ISCRReportObjectInstance)
    ['{44A3DE30-6B12-4859-B675-3F0EC3DD4C36}']
    function  Get_FieldName: WideString; safecall;
    procedure Set_FieldName(const pVal: WideString); safecall;
    function  Get_FieldType: CrRuntimeFieldKindEnum; safecall;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum); safecall;
    function  Get_FieldValueType: CrFieldValueTypeEnum; safecall;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum); safecall;
    function  Get_IsConstantField: WordBool; safecall;
    procedure Set_IsConstantField(pVal: WordBool); safecall;
    function  Get_IsPrintTimeField: WordBool; safecall;
    procedure Set_IsPrintTimeField(pVal: WordBool); safecall;
    function  Get_FontColor: ISCRRuntimeFontColor; safecall;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor); safecall;
    function  Get_FieldFormat: ISCRFieldFormat; safecall;
    procedure Set_FieldFormat(const pVal: ISCRFieldFormat); safecall;
    function  Get_LeftAlignFixedLeft: WordBool; safecall;
    procedure Set_LeftAlignFixedLeft(pVal: WordBool); safecall;
    function  Get_RightAlignFixedRight: WordBool; safecall;
    procedure Set_RightAlignFixedRight(pVal: WordBool); safecall;
    function  Get_AllowClipping: WordBool; safecall;
    procedure Set_AllowClipping(pVal: WordBool); safecall;
    function  Get_FieldStrings: ISCRStrings; safecall;
    procedure Set_FieldStrings(const pVal: ISCRStrings); safecall;
    function  Get_FieldHasRawValue: WordBool; safecall;
    procedure Set_FieldHasRawValue(pVal: WordBool); safecall;
    function  Get_RawData: OleVariant; safecall;
    procedure Set_RawData(pVal: OleVariant); safecall;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
    property IsPrintTimeField: WordBool read Get_IsPrintTimeField write Set_IsPrintTimeField;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property FieldFormat: ISCRFieldFormat read Get_FieldFormat write Set_FieldFormat;
    property LeftAlignFixedLeft: WordBool read Get_LeftAlignFixedLeft write Set_LeftAlignFixedLeft;
    property RightAlignFixedRight: WordBool read Get_RightAlignFixedRight write Set_RightAlignFixedRight;
    property AllowClipping: WordBool read Get_AllowClipping write Set_AllowClipping;
    property FieldStrings: ISCRStrings read Get_FieldStrings write Set_FieldStrings;
    property FieldHasRawValue: WordBool read Get_FieldHasRawValue write Set_FieldHasRawValue;
    property RawData: OleVariant read Get_RawData write Set_RawData;
  end;

// *********************************************************************//
// DispIntf:  ISCRFieldObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44A3DE30-6B12-4859-B675-3F0EC3DD4C36}
// *********************************************************************//
  ISCRFieldObjectInstanceDisp = dispinterface
    ['{44A3DE30-6B12-4859-B675-3F0EC3DD4C36}']
    property FieldName: WideString dispid 41;
    property FieldType: CrRuntimeFieldKindEnum dispid 42;
    property FieldValueType: CrFieldValueTypeEnum dispid 43;
    property IsConstantField: WordBool dispid 44;
    property IsPrintTimeField: WordBool dispid 45;
    property FontColor: ISCRRuntimeFontColor dispid 46;
    property FieldFormat: ISCRFieldFormat dispid 47;
    property LeftAlignFixedLeft: WordBool dispid 48;
    property RightAlignFixedRight: WordBool dispid 49;
    property AllowClipping: WordBool dispid 50;
    property FieldStrings: ISCRStrings dispid 51;
    property FieldHasRawValue: WordBool dispid 52;
    property RawData: OleVariant dispid 53;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRFieldFormat
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {27F13729-4915-49F3-87F9-566B626E2386}
// *********************************************************************//
  ISCRFieldFormat = interface(IDispatch)
    ['{27F13729-4915-49F3-87F9-566B626E2386}']
    function  Clone(DeepClone: WordBool): ISCRFieldFormat; safecall;
    procedure CopyTo(const FieldFormat: ISCRFieldFormat; DeepCopy: WordBool); safecall;
    function  Equals(const FieldFormat: ISCRFieldFormat): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_CommonFormat: ISCRCommonFieldFormat; safecall;
    procedure Set_CommonFormat(const pVal: ISCRCommonFieldFormat); safecall;
    function  Get_BooleanFormat: ISCRBooleanFieldFormat; safecall;
    procedure Set_BooleanFormat(const pVal: ISCRBooleanFieldFormat); safecall;
    function  Get_NumericFormat: ISCRNumericFieldFormat; safecall;
    procedure Set_NumericFormat(const pVal: ISCRNumericFieldFormat); safecall;
    function  Get_DateFormat: ISCRDateFieldFormat; safecall;
    procedure Set_DateFormat(const pVal: ISCRDateFieldFormat); safecall;
    function  Get_TimeFormat: ISCRTimeFieldFormat; safecall;
    procedure Set_TimeFormat(const pVal: ISCRTimeFieldFormat); safecall;
    function  Get_DateTimeFormat: ISCRDateTimeFieldFormat; safecall;
    procedure Set_DateTimeFormat(const pVal: ISCRDateTimeFieldFormat); safecall;
    function  Get_StringFormat: PPUserType1; safecall;
    procedure Set_StringFormat(const pVal: ISCRStringFieldFormat); safecall;
    property ClassName: WideString read Get_ClassName;
    property CommonFormat: ISCRCommonFieldFormat read Get_CommonFormat write Set_CommonFormat;
    property BooleanFormat: ISCRBooleanFieldFormat read Get_BooleanFormat write Set_BooleanFormat;
    property NumericFormat: ISCRNumericFieldFormat read Get_NumericFormat write Set_NumericFormat;
    property DateFormat: ISCRDateFieldFormat read Get_DateFormat write Set_DateFormat;
    property TimeFormat: ISCRTimeFieldFormat read Get_TimeFormat write Set_TimeFormat;
    property DateTimeFormat: ISCRDateTimeFieldFormat read Get_DateTimeFormat write Set_DateTimeFormat;
  end;

// *********************************************************************//
// DispIntf:  ISCRFieldFormatDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {27F13729-4915-49F3-87F9-566B626E2386}
// *********************************************************************//
  ISCRFieldFormatDisp = dispinterface
    ['{27F13729-4915-49F3-87F9-566B626E2386}']
    function  Clone(DeepClone: WordBool): ISCRFieldFormat; dispid 1001;
    procedure CopyTo(const FieldFormat: ISCRFieldFormat; DeepCopy: WordBool); dispid 1002;
    function  Equals(const FieldFormat: ISCRFieldFormat): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property CommonFormat: ISCRCommonFieldFormat dispid 1;
    property BooleanFormat: ISCRBooleanFieldFormat dispid 2;
    property NumericFormat: ISCRNumericFieldFormat dispid 3;
    property DateFormat: ISCRDateFieldFormat dispid 4;
    property TimeFormat: ISCRTimeFieldFormat dispid 5;
    property DateTimeFormat: ISCRDateTimeFieldFormat dispid 6;
    function  StringFormat: {??PPUserType1}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ISCRCommonFieldFormat
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {731D6E04-2DA0-46B3-925C-E1A1B6764164}
// *********************************************************************//
  ISCRCommonFieldFormat = interface(IDispatch)
    ['{731D6E04-2DA0-46B3-925C-E1A1B6764164}']
    function  Clone(DeepClone: WordBool): ISCRCommonFieldFormat; safecall;
    procedure CopyTo(const CommonFieldFormat: ISCRCommonFieldFormat; DeepCopy: WordBool); safecall;
    function  Equals(const CommonFieldFormat: ISCRCommonFieldFormat): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_EnableSuppressIfDuplicated: WordBool; safecall;
    procedure Set_EnableSuppressIfDuplicated(pVal: WordBool); safecall;
    function  Get_EnableSystemDefault: WordBool; safecall;
    procedure Set_EnableSystemDefault(pVal: WordBool); safecall;
    function  Get_ConditionFormulas: PPUserType2; safecall;
    procedure Set_ConditionFormulas(const pVal: ISCRConditionFormulas); safecall;
    property ClassName: WideString read Get_ClassName;
    property EnableSuppressIfDuplicated: WordBool read Get_EnableSuppressIfDuplicated write Set_EnableSuppressIfDuplicated;
    property EnableSystemDefault: WordBool read Get_EnableSystemDefault write Set_EnableSystemDefault;
  end;

// *********************************************************************//
// DispIntf:  ISCRCommonFieldFormatDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {731D6E04-2DA0-46B3-925C-E1A1B6764164}
// *********************************************************************//
  ISCRCommonFieldFormatDisp = dispinterface
    ['{731D6E04-2DA0-46B3-925C-E1A1B6764164}']
    function  Clone(DeepClone: WordBool): ISCRCommonFieldFormat; dispid 1001;
    procedure CopyTo(const CommonFieldFormat: ISCRCommonFieldFormat; DeepCopy: WordBool); dispid 1002;
    function  Equals(const CommonFieldFormat: ISCRCommonFieldFormat): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property EnableSuppressIfDuplicated: WordBool dispid 1;
    property EnableSystemDefault: WordBool dispid 2;
    function  ConditionFormulas: {??PPUserType2}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ISCRConditionFormulas
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB94B307-87AC-48CF-824F-64106DA42F08}
// *********************************************************************//
  ISCRConditionFormulas = interface(IDispatch)
    ['{EB94B307-87AC-48CF-824F-64106DA42F08}']
    function  Clone(DeepClone: WordBool): ISCRCommonFieldFormatConditionFormulas; safecall;
    procedure CopyTo(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas; 
                     DeepCopy: WordBool); safecall;
    function  Equals(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_Count: Integer; safecall;
    function  Get_InternalItem(id: Integer): ISCRConditionFormula; safecall;
    procedure Set_InternalItem(id: Integer; const pVal: ISCRConditionFormula); safecall;
    procedure RemoveAll; safecall;
    procedure RemoveInternalItem(id: Integer); safecall;
    procedure reserved9; safecall;
    procedure reserved8; safecall;
    procedure reserved7; safecall;
    procedure reserved6; safecall;
    procedure reserved5; safecall;
    procedure reserved4; safecall;
    procedure reserved3; safecall;
    procedure reserved2; safecall;
    procedure reserved1; safecall;
    procedure reserved0; safecall;
    property ClassName: WideString read Get_ClassName;
    property Count: Integer read Get_Count;
    property InternalItem[id: Integer]: ISCRConditionFormula read Get_InternalItem write Set_InternalItem;
  end;

// *********************************************************************//
// DispIntf:  ISCRConditionFormulasDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB94B307-87AC-48CF-824F-64106DA42F08}
// *********************************************************************//
  ISCRConditionFormulasDisp = dispinterface
    ['{EB94B307-87AC-48CF-824F-64106DA42F08}']
    function  Clone(DeepClone: WordBool): ISCRCommonFieldFormatConditionFormulas; dispid 1001;
    procedure CopyTo(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas; 
                     DeepCopy: WordBool); dispid 1002;
    function  Equals(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property Count: Integer readonly dispid 1;
    property InternalItem[id: Integer]: ISCRConditionFormula dispid 2;
    procedure RemoveAll; dispid 3;
    procedure RemoveInternalItem(id: Integer); dispid 4;
    procedure reserved9; dispid 1610743817;
    procedure reserved8; dispid 1610743818;
    procedure reserved7; dispid 1610743819;
    procedure reserved6; dispid 1610743820;
    procedure reserved5; dispid 1610743821;
    procedure reserved4; dispid 1610743822;
    procedure reserved3; dispid 1610743823;
    procedure reserved2; dispid 1610743824;
    procedure reserved1; dispid 1610743825;
    procedure reserved0; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: ISCRCommonFieldFormatConditionFormulas
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB82EFD7-F28F-4A33-BCA9-9F0E13433BAE}
// *********************************************************************//
  ISCRCommonFieldFormatConditionFormulas = interface(ISCRConditionFormulas)
    ['{AB82EFD7-F28F-4A33-BCA9-9F0E13433BAE}']
    function  Get_Formula(id: CrCommonFieldFormatConditionFormulaTypeEnum): ISCRConditionFormula; safecall;
    procedure Set_Formula(id: CrCommonFieldFormatConditionFormulaTypeEnum; 
                          const pVal: ISCRConditionFormula); safecall;
    procedure RemoveFormula(id: CrCommonFieldFormatConditionFormulaTypeEnum); safecall;
    property Formula[id: CrCommonFieldFormatConditionFormulaTypeEnum]: ISCRConditionFormula read Get_Formula write Set_Formula; default;
  end;

// *********************************************************************//
// DispIntf:  ISCRCommonFieldFormatConditionFormulasDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB82EFD7-F28F-4A33-BCA9-9F0E13433BAE}
// *********************************************************************//
  ISCRCommonFieldFormatConditionFormulasDisp = dispinterface
    ['{AB82EFD7-F28F-4A33-BCA9-9F0E13433BAE}']
    property Formula[id: CrCommonFieldFormatConditionFormulaTypeEnum]: ISCRConditionFormula dispid 0; default;
    procedure RemoveFormula(id: CrCommonFieldFormatConditionFormulaTypeEnum); dispid 41;
    function  Clone(DeepClone: WordBool): ISCRCommonFieldFormatConditionFormulas; dispid 1001;
    procedure CopyTo(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas; 
                     DeepCopy: WordBool); dispid 1002;
    function  Equals(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property Count: Integer readonly dispid 1;
    property InternalItem[id: Integer]: ISCRConditionFormula dispid 2;
    procedure RemoveAll; dispid 3;
    procedure RemoveInternalItem(id: Integer); dispid 4;
    procedure reserved9; dispid 1610743817;
    procedure reserved8; dispid 1610743818;
    procedure reserved7; dispid 1610743819;
    procedure reserved6; dispid 1610743820;
    procedure reserved5; dispid 1610743821;
    procedure reserved4; dispid 1610743822;
    procedure reserved3; dispid 1610743823;
    procedure reserved2; dispid 1610743824;
    procedure reserved1; dispid 1610743825;
    procedure reserved0; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: ISCRConditionFormula
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D76ABCAB-8958-43EC-9B82-157B9D3500A4}
// *********************************************************************//
  ISCRConditionFormula = interface(IDispatch)
    ['{D76ABCAB-8958-43EC-9B82-157B9D3500A4}']
    function  Clone(DeepClone: WordBool): ISCRConditionFormula; safecall;
    procedure CopyTo(const ConditionFormula: ISCRConditionFormula; DeepCopy: WordBool); safecall;
    function  Equals(const ConditionFormula: ISCRConditionFormula): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_Syntax: CrFormulaSyntaxEnum; safecall;
    procedure Set_Syntax(pVal: CrFormulaSyntaxEnum); safecall;
    function  Get_Text: WideString; safecall;
    procedure Set_Text(const pVal: WideString); safecall;
    function  Get_FormulaNullTreatment: CrFormulaNullTreatmentEnum; safecall;
    procedure Set_FormulaNullTreatment(FormulaNullTreatment: CrFormulaNullTreatmentEnum); safecall;
    property ClassName: WideString read Get_ClassName;
    property Syntax: CrFormulaSyntaxEnum read Get_Syntax write Set_Syntax;
    property Text: WideString read Get_Text write Set_Text;
    property FormulaNullTreatment: CrFormulaNullTreatmentEnum read Get_FormulaNullTreatment write Set_FormulaNullTreatment;
  end;

// *********************************************************************//
// DispIntf:  ISCRConditionFormulaDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D76ABCAB-8958-43EC-9B82-157B9D3500A4}
// *********************************************************************//
  ISCRConditionFormulaDisp = dispinterface
    ['{D76ABCAB-8958-43EC-9B82-157B9D3500A4}']
    function  Clone(DeepClone: WordBool): ISCRConditionFormula; dispid 1001;
    procedure CopyTo(const ConditionFormula: ISCRConditionFormula; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ConditionFormula: ISCRConditionFormula): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property Syntax: CrFormulaSyntaxEnum dispid 1;
    property Text: WideString dispid 2;
    property FormulaNullTreatment: CrFormulaNullTreatmentEnum dispid 3;
  end;

// *********************************************************************//
// Interface: ISCRBooleanFieldFormat
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {49F46AB2-21F6-4063-BF6F-B51FF281F709}
// *********************************************************************//
  ISCRBooleanFieldFormat = interface(IDispatch)
    ['{49F46AB2-21F6-4063-BF6F-B51FF281F709}']
    function  Clone(DeepClone: WordBool): ISCRBooleanFieldFormat; safecall;
    procedure CopyTo(const BooleanFieldFormat: ISCRBooleanFieldFormat; DeepCopy: WordBool); safecall;
    function  Equals(const BooleanFieldFormat: ISCRBooleanFieldFormat): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_OutputFormat: CrBooleanOutputFormatEnum; safecall;
    procedure Set_OutputFormat(pVal: CrBooleanOutputFormatEnum); safecall;
    function  Get_ConditionFormulas: PPUserType3; safecall;
    procedure Set_ConditionFormulas(const pVal: ISCRBooleanFieldFormatConditionFormulas); safecall;
    property ClassName: WideString read Get_ClassName;
    property OutputFormat: CrBooleanOutputFormatEnum read Get_OutputFormat write Set_OutputFormat;
  end;

// *********************************************************************//
// DispIntf:  ISCRBooleanFieldFormatDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {49F46AB2-21F6-4063-BF6F-B51FF281F709}
// *********************************************************************//
  ISCRBooleanFieldFormatDisp = dispinterface
    ['{49F46AB2-21F6-4063-BF6F-B51FF281F709}']
    function  Clone(DeepClone: WordBool): ISCRBooleanFieldFormat; dispid 1001;
    procedure CopyTo(const BooleanFieldFormat: ISCRBooleanFieldFormat; DeepCopy: WordBool); dispid 1002;
    function  Equals(const BooleanFieldFormat: ISCRBooleanFieldFormat): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OutputFormat: CrBooleanOutputFormatEnum dispid 51;
    function  ConditionFormulas: {??PPUserType3}OleVariant; dispid 54;
  end;

// *********************************************************************//
// Interface: ISCRBooleanFieldFormatConditionFormulas
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {27AB6FA6-A439-4406-8098-EADCD44A02C0}
// *********************************************************************//
  ISCRBooleanFieldFormatConditionFormulas = interface(ISCRConditionFormulas)
    ['{27AB6FA6-A439-4406-8098-EADCD44A02C0}']
    function  Get_Formula(id: CrBooleanFieldFormatConditionFormulaTypeEnum): ISCRConditionFormula; safecall;
    procedure Set_Formula(id: CrBooleanFieldFormatConditionFormulaTypeEnum; 
                          const pVal: ISCRConditionFormula); safecall;
    procedure RemoveFormula(id: CrBooleanFieldFormatConditionFormulaTypeEnum); safecall;
    property Formula[id: CrBooleanFieldFormatConditionFormulaTypeEnum]: ISCRConditionFormula read Get_Formula write Set_Formula; default;
  end;

// *********************************************************************//
// DispIntf:  ISCRBooleanFieldFormatConditionFormulasDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {27AB6FA6-A439-4406-8098-EADCD44A02C0}
// *********************************************************************//
  ISCRBooleanFieldFormatConditionFormulasDisp = dispinterface
    ['{27AB6FA6-A439-4406-8098-EADCD44A02C0}']
    property Formula[id: CrBooleanFieldFormatConditionFormulaTypeEnum]: ISCRConditionFormula dispid 0; default;
    procedure RemoveFormula(id: CrBooleanFieldFormatConditionFormulaTypeEnum); dispid 41;
    function  Clone(DeepClone: WordBool): ISCRCommonFieldFormatConditionFormulas; dispid 1001;
    procedure CopyTo(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas; 
                     DeepCopy: WordBool); dispid 1002;
    function  Equals(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property Count: Integer readonly dispid 1;
    property InternalItem[id: Integer]: ISCRConditionFormula dispid 2;
    procedure RemoveAll; dispid 3;
    procedure RemoveInternalItem(id: Integer); dispid 4;
    procedure reserved9; dispid 1610743817;
    procedure reserved8; dispid 1610743818;
    procedure reserved7; dispid 1610743819;
    procedure reserved6; dispid 1610743820;
    procedure reserved5; dispid 1610743821;
    procedure reserved4; dispid 1610743822;
    procedure reserved3; dispid 1610743823;
    procedure reserved2; dispid 1610743824;
    procedure reserved1; dispid 1610743825;
    procedure reserved0; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: ISCRNumericFieldFormat
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ACF69926-C3C7-4754-AC83-292C83CFA556}
// *********************************************************************//
  ISCRNumericFieldFormat = interface(IDispatch)
    ['{ACF69926-C3C7-4754-AC83-292C83CFA556}']
    function  Clone(DeepClone: WordBool): ISCRNumericFieldFormat; safecall;
    procedure CopyTo(const NumericFieldFormat: ISCRNumericFieldFormat; DeepCopy: WordBool); safecall;
    function  Equals(const NumericFieldFormat: ISCRNumericFieldFormat): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_NDecimalPlaces: Integer; safecall;
    procedure Set_NDecimalPlaces(pVal: Integer); safecall;
    function  Get_RoundingFormat: CrRoundingTypeEnum; safecall;
    procedure Set_RoundingFormat(pVal: CrRoundingTypeEnum); safecall;
    function  Get_EnableUseLeadZero: WordBool; safecall;
    procedure Set_EnableUseLeadZero(pVal: WordBool); safecall;
    function  Get_NegativeFormat: CrNegativeTypeEnum; safecall;
    procedure Set_NegativeFormat(pVal: CrNegativeTypeEnum); safecall;
    function  Get_CurrencySymbolFormat: CrCurrencySymbolTypeEnum; safecall;
    procedure Set_CurrencySymbolFormat(pVal: CrCurrencySymbolTypeEnum); safecall;
    function  Get_EnableSuppressIfZero: WordBool; safecall;
    procedure Set_EnableSuppressIfZero(pVal: WordBool); safecall;
    function  Get_ThousandsSeparator: WordBool; safecall;
    procedure Set_ThousandsSeparator(pVal: WordBool); safecall;
    function  Get_ThousandSymbol: WideString; safecall;
    procedure Set_ThousandSymbol(const pVal: WideString); safecall;
    function  Get_DecimalSymbol: WideString; safecall;
    procedure Set_DecimalSymbol(const pVal: WideString); safecall;
    function  Get_CurrencySymbol: WideString; safecall;
    procedure Set_CurrencySymbol(const pVal: WideString); safecall;
    function  Get_OneCurrencySymbolPerPage: WordBool; safecall;
    procedure Set_OneCurrencySymbolPerPage(pVal: WordBool); safecall;
    function  Get_CurrencyPosition: CrCurrencyPositionFormatEnum; safecall;
    procedure Set_CurrencyPosition(pVal: CrCurrencyPositionFormatEnum); safecall;
    function  Get_DisplayReverseSign: WordBool; safecall;
    procedure Set_DisplayReverseSign(pVal: WordBool); safecall;
    function  Get_ZeroValueString: WideString; safecall;
    procedure Set_ZeroValueString(const pVal: WideString); safecall;
    function  Get_ConditionFormulas: PPUserType4; safecall;
    procedure Set_ConditionFormulas(const pVal: ISCRNumericFieldFormatConditionFormulas); safecall;
    property ClassName: WideString read Get_ClassName;
    property NDecimalPlaces: Integer read Get_NDecimalPlaces write Set_NDecimalPlaces;
    property RoundingFormat: CrRoundingTypeEnum read Get_RoundingFormat write Set_RoundingFormat;
    property EnableUseLeadZero: WordBool read Get_EnableUseLeadZero write Set_EnableUseLeadZero;
    property NegativeFormat: CrNegativeTypeEnum read Get_NegativeFormat write Set_NegativeFormat;
    property CurrencySymbolFormat: CrCurrencySymbolTypeEnum read Get_CurrencySymbolFormat write Set_CurrencySymbolFormat;
    property EnableSuppressIfZero: WordBool read Get_EnableSuppressIfZero write Set_EnableSuppressIfZero;
    property ThousandsSeparator: WordBool read Get_ThousandsSeparator write Set_ThousandsSeparator;
    property ThousandSymbol: WideString read Get_ThousandSymbol write Set_ThousandSymbol;
    property DecimalSymbol: WideString read Get_DecimalSymbol write Set_DecimalSymbol;
    property CurrencySymbol: WideString read Get_CurrencySymbol write Set_CurrencySymbol;
    property OneCurrencySymbolPerPage: WordBool read Get_OneCurrencySymbolPerPage write Set_OneCurrencySymbolPerPage;
    property CurrencyPosition: CrCurrencyPositionFormatEnum read Get_CurrencyPosition write Set_CurrencyPosition;
    property DisplayReverseSign: WordBool read Get_DisplayReverseSign write Set_DisplayReverseSign;
    property ZeroValueString: WideString read Get_ZeroValueString write Set_ZeroValueString;
  end;

// *********************************************************************//
// DispIntf:  ISCRNumericFieldFormatDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ACF69926-C3C7-4754-AC83-292C83CFA556}
// *********************************************************************//
  ISCRNumericFieldFormatDisp = dispinterface
    ['{ACF69926-C3C7-4754-AC83-292C83CFA556}']
    function  Clone(DeepClone: WordBool): ISCRNumericFieldFormat; dispid 1001;
    procedure CopyTo(const NumericFieldFormat: ISCRNumericFieldFormat; DeepCopy: WordBool); dispid 1002;
    function  Equals(const NumericFieldFormat: ISCRNumericFieldFormat): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property NDecimalPlaces: Integer dispid 51;
    property RoundingFormat: CrRoundingTypeEnum dispid 52;
    property EnableUseLeadZero: WordBool dispid 53;
    property NegativeFormat: CrNegativeTypeEnum dispid 54;
    property CurrencySymbolFormat: CrCurrencySymbolTypeEnum dispid 55;
    property EnableSuppressIfZero: WordBool dispid 56;
    property ThousandsSeparator: WordBool dispid 57;
    property ThousandSymbol: WideString dispid 58;
    property DecimalSymbol: WideString dispid 59;
    property CurrencySymbol: WideString dispid 60;
    property OneCurrencySymbolPerPage: WordBool dispid 61;
    property CurrencyPosition: CrCurrencyPositionFormatEnum dispid 62;
    property DisplayReverseSign: WordBool dispid 63;
    property ZeroValueString: WideString dispid 64;
    function  ConditionFormulas: {??PPUserType4}OleVariant; dispid 65;
  end;

// *********************************************************************//
// Interface: ISCRNumericFieldFormatConditionFormulas
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5A5EB6CC-5069-4359-A36D-94645C837EDB}
// *********************************************************************//
  ISCRNumericFieldFormatConditionFormulas = interface(ISCRConditionFormulas)
    ['{5A5EB6CC-5069-4359-A36D-94645C837EDB}']
    function  Get_Formula(id: CrNumericFieldFormatConditionFormulaTypeEnum): ISCRConditionFormula; safecall;
    procedure Set_Formula(id: CrNumericFieldFormatConditionFormulaTypeEnum; 
                          const pVal: ISCRConditionFormula); safecall;
    procedure RemoveFormula(id: CrNumericFieldFormatConditionFormulaTypeEnum); safecall;
    property Formula[id: CrNumericFieldFormatConditionFormulaTypeEnum]: ISCRConditionFormula read Get_Formula write Set_Formula; default;
  end;

// *********************************************************************//
// DispIntf:  ISCRNumericFieldFormatConditionFormulasDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5A5EB6CC-5069-4359-A36D-94645C837EDB}
// *********************************************************************//
  ISCRNumericFieldFormatConditionFormulasDisp = dispinterface
    ['{5A5EB6CC-5069-4359-A36D-94645C837EDB}']
    property Formula[id: CrNumericFieldFormatConditionFormulaTypeEnum]: ISCRConditionFormula dispid 0; default;
    procedure RemoveFormula(id: CrNumericFieldFormatConditionFormulaTypeEnum); dispid 41;
    function  Clone(DeepClone: WordBool): ISCRCommonFieldFormatConditionFormulas; dispid 1001;
    procedure CopyTo(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas; 
                     DeepCopy: WordBool); dispid 1002;
    function  Equals(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property Count: Integer readonly dispid 1;
    property InternalItem[id: Integer]: ISCRConditionFormula dispid 2;
    procedure RemoveAll; dispid 3;
    procedure RemoveInternalItem(id: Integer); dispid 4;
    procedure reserved9; dispid 1610743817;
    procedure reserved8; dispid 1610743818;
    procedure reserved7; dispid 1610743819;
    procedure reserved6; dispid 1610743820;
    procedure reserved5; dispid 1610743821;
    procedure reserved4; dispid 1610743822;
    procedure reserved3; dispid 1610743823;
    procedure reserved2; dispid 1610743824;
    procedure reserved1; dispid 1610743825;
    procedure reserved0; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: ISCRDateFieldFormat
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {777DBB7D-9AAB-467D-A0EC-3D20C9203DC3}
// *********************************************************************//
  ISCRDateFieldFormat = interface(IDispatch)
    ['{777DBB7D-9AAB-467D-A0EC-3D20C9203DC3}']
    function  Clone(DeepClone: WordBool): ISCRDateFieldFormat; safecall;
    procedure CopyTo(const DateFieldFormat: ISCRDateFieldFormat; DeepCopy: WordBool); safecall;
    function  Equals(const DateFieldFormat: ISCRDateFieldFormat): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_YearFormat: CrYearFormatEnum; safecall;
    procedure Set_YearFormat(pVal: CrYearFormatEnum); safecall;
    function  Get_MonthFormat: CrMonthFormatEnum; safecall;
    procedure Set_MonthFormat(pVal: CrMonthFormatEnum); safecall;
    function  Get_DayFormat: CrDayFormatEnum; safecall;
    procedure Set_DayFormat(pVal: CrDayFormatEnum); safecall;
    function  Get_SystemDefaultType: CrDateSystemDefaultTypeEnum; safecall;
    procedure Set_SystemDefaultType(pVal: CrDateSystemDefaultTypeEnum); safecall;
    function  Get_DateOrder: CrDateOrderEnum; safecall;
    procedure Set_DateOrder(pVal: CrDateOrderEnum); safecall;
    function  Get_DayOfWeekType: CrDayOfWeekTypeEnum; safecall;
    procedure Set_DayOfWeekType(pVal: CrDayOfWeekTypeEnum); safecall;
    function  Get_DayOfWeekSeparator: WideString; safecall;
    procedure Set_DayOfWeekSeparator(const pVal: WideString); safecall;
    function  Get_DayOfWeekPosition: CrDayOfWeekPositionEnum; safecall;
    procedure Set_DayOfWeekPosition(pVal: CrDayOfWeekPositionEnum); safecall;
    function  Get_DateFirstSeparator: WideString; safecall;
    procedure Set_DateFirstSeparator(const pVal: WideString); safecall;
    function  Get_DateSecondSeparator: WideString; safecall;
    procedure Set_DateSecondSeparator(const pVal: WideString); safecall;
    function  Get_EraType: CrDateEraTypeEnum; safecall;
    procedure Set_EraType(pVal: CrDateEraTypeEnum); safecall;
    function  Get_CalendarType: CrDateCalendarTypeEnum; safecall;
    procedure Set_CalendarType(pVal: CrDateCalendarTypeEnum); safecall;
    function  Get_DatePrefixSeparator: WideString; safecall;
    procedure Set_DatePrefixSeparator(const pVal: WideString); safecall;
    function  Get_DateSuffixSeparator: WideString; safecall;
    procedure Set_DateSuffixSeparator(const pVal: WideString); safecall;
    function  Get_ConditionFormulas: PPUserType5; safecall;
    procedure Set_ConditionFormulas(const pVal: ISCRDateFieldFormatConditionFormulas); safecall;
    property ClassName: WideString read Get_ClassName;
    property YearFormat: CrYearFormatEnum read Get_YearFormat write Set_YearFormat;
    property MonthFormat: CrMonthFormatEnum read Get_MonthFormat write Set_MonthFormat;
    property DayFormat: CrDayFormatEnum read Get_DayFormat write Set_DayFormat;
    property SystemDefaultType: CrDateSystemDefaultTypeEnum read Get_SystemDefaultType write Set_SystemDefaultType;
    property DateOrder: CrDateOrderEnum read Get_DateOrder write Set_DateOrder;
    property DayOfWeekType: CrDayOfWeekTypeEnum read Get_DayOfWeekType write Set_DayOfWeekType;
    property DayOfWeekSeparator: WideString read Get_DayOfWeekSeparator write Set_DayOfWeekSeparator;
    property DayOfWeekPosition: CrDayOfWeekPositionEnum read Get_DayOfWeekPosition write Set_DayOfWeekPosition;
    property DateFirstSeparator: WideString read Get_DateFirstSeparator write Set_DateFirstSeparator;
    property DateSecondSeparator: WideString read Get_DateSecondSeparator write Set_DateSecondSeparator;
    property EraType: CrDateEraTypeEnum read Get_EraType write Set_EraType;
    property CalendarType: CrDateCalendarTypeEnum read Get_CalendarType write Set_CalendarType;
    property DatePrefixSeparator: WideString read Get_DatePrefixSeparator write Set_DatePrefixSeparator;
    property DateSuffixSeparator: WideString read Get_DateSuffixSeparator write Set_DateSuffixSeparator;
  end;

// *********************************************************************//
// DispIntf:  ISCRDateFieldFormatDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {777DBB7D-9AAB-467D-A0EC-3D20C9203DC3}
// *********************************************************************//
  ISCRDateFieldFormatDisp = dispinterface
    ['{777DBB7D-9AAB-467D-A0EC-3D20C9203DC3}']
    function  Clone(DeepClone: WordBool): ISCRDateFieldFormat; dispid 1001;
    procedure CopyTo(const DateFieldFormat: ISCRDateFieldFormat; DeepCopy: WordBool); dispid 1002;
    function  Equals(const DateFieldFormat: ISCRDateFieldFormat): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property YearFormat: CrYearFormatEnum dispid 51;
    property MonthFormat: CrMonthFormatEnum dispid 52;
    property DayFormat: CrDayFormatEnum dispid 53;
    property SystemDefaultType: CrDateSystemDefaultTypeEnum dispid 56;
    property DateOrder: CrDateOrderEnum dispid 57;
    property DayOfWeekType: CrDayOfWeekTypeEnum dispid 58;
    property DayOfWeekSeparator: WideString dispid 59;
    property DayOfWeekPosition: CrDayOfWeekPositionEnum dispid 60;
    property DateFirstSeparator: WideString dispid 61;
    property DateSecondSeparator: WideString dispid 62;
    property EraType: CrDateEraTypeEnum dispid 63;
    property CalendarType: CrDateCalendarTypeEnum dispid 64;
    property DatePrefixSeparator: WideString dispid 65;
    property DateSuffixSeparator: WideString dispid 66;
    function  ConditionFormulas: {??PPUserType5}OleVariant; dispid 67;
  end;

// *********************************************************************//
// Interface: ISCRDateFieldFormatConditionFormulas
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {05E888B8-D54F-4D57-9575-CAC03DB7F1BA}
// *********************************************************************//
  ISCRDateFieldFormatConditionFormulas = interface(ISCRConditionFormulas)
    ['{05E888B8-D54F-4D57-9575-CAC03DB7F1BA}']
    function  Get_Formula(id: CrDateFieldFormatConditionFormulaTypeEnum): ISCRConditionFormula; safecall;
    procedure Set_Formula(id: CrDateFieldFormatConditionFormulaTypeEnum; 
                          const pVal: ISCRConditionFormula); safecall;
    procedure RemoveFormula(id: CrDateFieldFormatConditionFormulaTypeEnum); safecall;
    property Formula[id: CrDateFieldFormatConditionFormulaTypeEnum]: ISCRConditionFormula read Get_Formula write Set_Formula; default;
  end;

// *********************************************************************//
// DispIntf:  ISCRDateFieldFormatConditionFormulasDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {05E888B8-D54F-4D57-9575-CAC03DB7F1BA}
// *********************************************************************//
  ISCRDateFieldFormatConditionFormulasDisp = dispinterface
    ['{05E888B8-D54F-4D57-9575-CAC03DB7F1BA}']
    property Formula[id: CrDateFieldFormatConditionFormulaTypeEnum]: ISCRConditionFormula dispid 0; default;
    procedure RemoveFormula(id: CrDateFieldFormatConditionFormulaTypeEnum); dispid 41;
    function  Clone(DeepClone: WordBool): ISCRCommonFieldFormatConditionFormulas; dispid 1001;
    procedure CopyTo(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas; 
                     DeepCopy: WordBool); dispid 1002;
    function  Equals(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property Count: Integer readonly dispid 1;
    property InternalItem[id: Integer]: ISCRConditionFormula dispid 2;
    procedure RemoveAll; dispid 3;
    procedure RemoveInternalItem(id: Integer); dispid 4;
    procedure reserved9; dispid 1610743817;
    procedure reserved8; dispid 1610743818;
    procedure reserved7; dispid 1610743819;
    procedure reserved6; dispid 1610743820;
    procedure reserved5; dispid 1610743821;
    procedure reserved4; dispid 1610743822;
    procedure reserved3; dispid 1610743823;
    procedure reserved2; dispid 1610743824;
    procedure reserved1; dispid 1610743825;
    procedure reserved0; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: ISCRTimeFieldFormat
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5C045C6E-14D7-4407-8AB9-0E5689AC4CA1}
// *********************************************************************//
  ISCRTimeFieldFormat = interface(IDispatch)
    ['{5C045C6E-14D7-4407-8AB9-0E5689AC4CA1}']
    function  Clone(DeepClone: WordBool): ISCRTimeFieldFormat; safecall;
    procedure CopyTo(const TimeFieldFormat: ISCRTimeFieldFormat; DeepCopy: WordBool); safecall;
    function  Equals(const TimeFieldFormat: ISCRTimeFieldFormat): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_TimeBase: CrTimeBaseEnum; safecall;
    procedure Set_TimeBase(pVal: CrTimeBaseEnum); safecall;
    function  Get_AMPMFormat: CrAMPMFormatEnum; safecall;
    procedure Set_AMPMFormat(pVal: CrAMPMFormatEnum); safecall;
    function  Get_HourFormat: CrHourFormatEnum; safecall;
    procedure Set_HourFormat(pVal: CrHourFormatEnum); safecall;
    function  Get_MinuteFormat: CrMinuteFormatEnum; safecall;
    procedure Set_MinuteFormat(pVal: CrMinuteFormatEnum); safecall;
    function  Get_SecondFormat: CrSecondFormatEnum; safecall;
    procedure Set_SecondFormat(pVal: CrSecondFormatEnum); safecall;
    function  Get_PMString: WideString; safecall;
    procedure Set_PMString(const pVal: WideString); safecall;
    function  Get_AMString: WideString; safecall;
    procedure Set_AMString(const pVal: WideString); safecall;
    function  Get_MinuteSecondSeparator: WideString; safecall;
    procedure Set_MinuteSecondSeparator(const pVal: WideString); safecall;
    function  Get_HourMinuteSeparator: WideString; safecall;
    procedure Set_HourMinuteSeparator(const pVal: WideString); safecall;
    function  Get_ConditionFormulas: PPUserType6; safecall;
    procedure Set_ConditionFormulas(const pVal: ISCRTimeFieldFormatConditionFormulas); safecall;
    property ClassName: WideString read Get_ClassName;
    property TimeBase: CrTimeBaseEnum read Get_TimeBase write Set_TimeBase;
    property AMPMFormat: CrAMPMFormatEnum read Get_AMPMFormat write Set_AMPMFormat;
    property HourFormat: CrHourFormatEnum read Get_HourFormat write Set_HourFormat;
    property MinuteFormat: CrMinuteFormatEnum read Get_MinuteFormat write Set_MinuteFormat;
    property SecondFormat: CrSecondFormatEnum read Get_SecondFormat write Set_SecondFormat;
    property PMString: WideString read Get_PMString write Set_PMString;
    property AMString: WideString read Get_AMString write Set_AMString;
    property MinuteSecondSeparator: WideString read Get_MinuteSecondSeparator write Set_MinuteSecondSeparator;
    property HourMinuteSeparator: WideString read Get_HourMinuteSeparator write Set_HourMinuteSeparator;
  end;

// *********************************************************************//
// DispIntf:  ISCRTimeFieldFormatDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5C045C6E-14D7-4407-8AB9-0E5689AC4CA1}
// *********************************************************************//
  ISCRTimeFieldFormatDisp = dispinterface
    ['{5C045C6E-14D7-4407-8AB9-0E5689AC4CA1}']
    function  Clone(DeepClone: WordBool): ISCRTimeFieldFormat; dispid 1001;
    procedure CopyTo(const TimeFieldFormat: ISCRTimeFieldFormat; DeepCopy: WordBool); dispid 1002;
    function  Equals(const TimeFieldFormat: ISCRTimeFieldFormat): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property TimeBase: CrTimeBaseEnum dispid 51;
    property AMPMFormat: CrAMPMFormatEnum dispid 52;
    property HourFormat: CrHourFormatEnum dispid 53;
    property MinuteFormat: CrMinuteFormatEnum dispid 54;
    property SecondFormat: CrSecondFormatEnum dispid 55;
    property PMString: WideString dispid 56;
    property AMString: WideString dispid 57;
    property MinuteSecondSeparator: WideString dispid 58;
    property HourMinuteSeparator: WideString dispid 59;
    function  ConditionFormulas: {??PPUserType6}OleVariant; dispid 60;
  end;

// *********************************************************************//
// Interface: ISCRTimeFieldFormatConditionFormulas
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AC0B874B-2B20-449B-A7D0-A4627AA423AB}
// *********************************************************************//
  ISCRTimeFieldFormatConditionFormulas = interface(ISCRConditionFormulas)
    ['{AC0B874B-2B20-449B-A7D0-A4627AA423AB}']
    function  Get_Formula(id: CrTimeFieldFormatConditionFormulaTypeEnum): ISCRConditionFormula; safecall;
    procedure Set_Formula(id: CrTimeFieldFormatConditionFormulaTypeEnum; 
                          const pVal: ISCRConditionFormula); safecall;
    procedure RemoveFormula(id: CrTimeFieldFormatConditionFormulaTypeEnum); safecall;
    property Formula[id: CrTimeFieldFormatConditionFormulaTypeEnum]: ISCRConditionFormula read Get_Formula write Set_Formula; default;
  end;

// *********************************************************************//
// DispIntf:  ISCRTimeFieldFormatConditionFormulasDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AC0B874B-2B20-449B-A7D0-A4627AA423AB}
// *********************************************************************//
  ISCRTimeFieldFormatConditionFormulasDisp = dispinterface
    ['{AC0B874B-2B20-449B-A7D0-A4627AA423AB}']
    property Formula[id: CrTimeFieldFormatConditionFormulaTypeEnum]: ISCRConditionFormula dispid 0; default;
    procedure RemoveFormula(id: CrTimeFieldFormatConditionFormulaTypeEnum); dispid 41;
    function  Clone(DeepClone: WordBool): ISCRCommonFieldFormatConditionFormulas; dispid 1001;
    procedure CopyTo(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas; 
                     DeepCopy: WordBool); dispid 1002;
    function  Equals(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property Count: Integer readonly dispid 1;
    property InternalItem[id: Integer]: ISCRConditionFormula dispid 2;
    procedure RemoveAll; dispid 3;
    procedure RemoveInternalItem(id: Integer); dispid 4;
    procedure reserved9; dispid 1610743817;
    procedure reserved8; dispid 1610743818;
    procedure reserved7; dispid 1610743819;
    procedure reserved6; dispid 1610743820;
    procedure reserved5; dispid 1610743821;
    procedure reserved4; dispid 1610743822;
    procedure reserved3; dispid 1610743823;
    procedure reserved2; dispid 1610743824;
    procedure reserved1; dispid 1610743825;
    procedure reserved0; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: ISCRDateTimeFieldFormat
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0EA2E948-9E1A-4DD0-A830-A0FB956110F8}
// *********************************************************************//
  ISCRDateTimeFieldFormat = interface(IDispatch)
    ['{0EA2E948-9E1A-4DD0-A830-A0FB956110F8}']
    function  Clone(DeepClone: WordBool): ISCRDateTimeFieldFormat; safecall;
    procedure CopyTo(const DateTimeFieldFormat: ISCRDateTimeFieldFormat; DeepCopy: WordBool); safecall;
    function  Equals(const DateTimeFieldFormat: ISCRDateTimeFieldFormat): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_DateTimeOrder: CrDateTimeOrderEnum; safecall;
    procedure Set_DateTimeOrder(pVal: CrDateTimeOrderEnum); safecall;
    function  Get_DateTimeSeparator: WideString; safecall;
    procedure Set_DateTimeSeparator(const pVal: WideString); safecall;
    function  Get_ConditionFormulas: PPUserType7; safecall;
    procedure Set_ConditionFormulas(const pVal: ISCRDateTimeFieldFormatConditionFormulas); safecall;
    property ClassName: WideString read Get_ClassName;
    property DateTimeOrder: CrDateTimeOrderEnum read Get_DateTimeOrder write Set_DateTimeOrder;
    property DateTimeSeparator: WideString read Get_DateTimeSeparator write Set_DateTimeSeparator;
  end;

// *********************************************************************//
// DispIntf:  ISCRDateTimeFieldFormatDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0EA2E948-9E1A-4DD0-A830-A0FB956110F8}
// *********************************************************************//
  ISCRDateTimeFieldFormatDisp = dispinterface
    ['{0EA2E948-9E1A-4DD0-A830-A0FB956110F8}']
    function  Clone(DeepClone: WordBool): ISCRDateTimeFieldFormat; dispid 1001;
    procedure CopyTo(const DateTimeFieldFormat: ISCRDateTimeFieldFormat; DeepCopy: WordBool); dispid 1002;
    function  Equals(const DateTimeFieldFormat: ISCRDateTimeFieldFormat): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property DateTimeOrder: CrDateTimeOrderEnum dispid 51;
    property DateTimeSeparator: WideString dispid 52;
    function  ConditionFormulas: {??PPUserType7}OleVariant; dispid 53;
  end;

// *********************************************************************//
// Interface: ISCRDateTimeFieldFormatConditionFormulas
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4C195994-9BD9-488A-A9AA-B2071084F680}
// *********************************************************************//
  ISCRDateTimeFieldFormatConditionFormulas = interface(ISCRConditionFormulas)
    ['{4C195994-9BD9-488A-A9AA-B2071084F680}']
    function  Get_Formula(id: CrDateTimeFieldFormatConditionFormulaTypeEnum): ISCRConditionFormula; safecall;
    procedure Set_Formula(id: CrDateTimeFieldFormatConditionFormulaTypeEnum; 
                          const pVal: ISCRConditionFormula); safecall;
    procedure RemoveFormula(id: CrDateTimeFieldFormatConditionFormulaTypeEnum); safecall;
    property Formula[id: CrDateTimeFieldFormatConditionFormulaTypeEnum]: ISCRConditionFormula read Get_Formula write Set_Formula; default;
  end;

// *********************************************************************//
// DispIntf:  ISCRDateTimeFieldFormatConditionFormulasDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4C195994-9BD9-488A-A9AA-B2071084F680}
// *********************************************************************//
  ISCRDateTimeFieldFormatConditionFormulasDisp = dispinterface
    ['{4C195994-9BD9-488A-A9AA-B2071084F680}']
    property Formula[id: CrDateTimeFieldFormatConditionFormulaTypeEnum]: ISCRConditionFormula dispid 0; default;
    procedure RemoveFormula(id: CrDateTimeFieldFormatConditionFormulaTypeEnum); dispid 41;
    function  Clone(DeepClone: WordBool): ISCRCommonFieldFormatConditionFormulas; dispid 1001;
    procedure CopyTo(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas; 
                     DeepCopy: WordBool); dispid 1002;
    function  Equals(const ConditionFormulas: ISCRCommonFieldFormatConditionFormulas): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property Count: Integer readonly dispid 1;
    property InternalItem[id: Integer]: ISCRConditionFormula dispid 2;
    procedure RemoveAll; dispid 3;
    procedure RemoveInternalItem(id: Integer); dispid 4;
    procedure reserved9; dispid 1610743817;
    procedure reserved8; dispid 1610743818;
    procedure reserved7; dispid 1610743819;
    procedure reserved6; dispid 1610743820;
    procedure reserved5; dispid 1610743821;
    procedure reserved4; dispid 1610743822;
    procedure reserved3; dispid 1610743823;
    procedure reserved2; dispid 1610743824;
    procedure reserved1; dispid 1610743825;
    procedure reserved0; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: ISCRStringFieldFormat
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0690F48F-A415-43E4-9DB8-202A92F455C4}
// *********************************************************************//
  ISCRStringFieldFormat = interface(IDispatch)
    ['{0690F48F-A415-43E4-9DB8-202A92F455C4}']
    function  Clone(DeepClone: WordBool): ISCRStringFieldFormat; safecall;
    procedure CopyTo(const StringFieldFormat: ISCRStringFieldFormat; DeepCopy: WordBool); safecall;
    function  Equals(const StringFieldFormat: ISCRStringFieldFormat): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_IndentAndSpacingFormat: ISCRIndentAndSpacingFormat; safecall;
    procedure Set_IndentAndSpacingFormat(const pVal: ISCRIndentAndSpacingFormat); safecall;
    function  Get_CharacterSpacing: Integer; safecall;
    procedure Set_CharacterSpacing(pVal: Integer); safecall;
    function  Get_MaxNumberOfLines: Integer; safecall;
    procedure Set_MaxNumberOfLines(pVal: Integer); safecall;
    function  Get_TextFormat: CrTextFormatEnum; safecall;
    procedure Set_TextFormat(pVal: CrTextFormatEnum); safecall;
    function  Get_ReadingOrder: CrReadingOrderEnum; safecall;
    procedure Set_ReadingOrder(pVal: CrReadingOrderEnum); safecall;
    function  Get_EnableWordWrap: WordBool; safecall;
    procedure Set_EnableWordWrap(pVal: WordBool); safecall;
    property ClassName: WideString read Get_ClassName;
    property IndentAndSpacingFormat: ISCRIndentAndSpacingFormat read Get_IndentAndSpacingFormat write Set_IndentAndSpacingFormat;
    property CharacterSpacing: Integer read Get_CharacterSpacing write Set_CharacterSpacing;
    property MaxNumberOfLines: Integer read Get_MaxNumberOfLines write Set_MaxNumberOfLines;
    property TextFormat: CrTextFormatEnum read Get_TextFormat write Set_TextFormat;
    property ReadingOrder: CrReadingOrderEnum read Get_ReadingOrder write Set_ReadingOrder;
    property EnableWordWrap: WordBool read Get_EnableWordWrap write Set_EnableWordWrap;
  end;

// *********************************************************************//
// DispIntf:  ISCRStringFieldFormatDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0690F48F-A415-43E4-9DB8-202A92F455C4}
// *********************************************************************//
  ISCRStringFieldFormatDisp = dispinterface
    ['{0690F48F-A415-43E4-9DB8-202A92F455C4}']
    function  Clone(DeepClone: WordBool): ISCRStringFieldFormat; dispid 1001;
    procedure CopyTo(const StringFieldFormat: ISCRStringFieldFormat; DeepCopy: WordBool); dispid 1002;
    function  Equals(const StringFieldFormat: ISCRStringFieldFormat): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property IndentAndSpacingFormat: ISCRIndentAndSpacingFormat dispid 51;
    property CharacterSpacing: Integer dispid 52;
    property MaxNumberOfLines: Integer dispid 53;
    property TextFormat: CrTextFormatEnum dispid 54;
    property ReadingOrder: CrReadingOrderEnum dispid 55;
    property EnableWordWrap: WordBool dispid 56;
  end;

// *********************************************************************//
// Interface: ISCRFieldObjectInstanceEx
// Flags:     (16) Hidden
// GUID:      {304E2F76-14B0-49A4-9B5F-B7221D93AA3E}
// *********************************************************************//
  ISCRFieldObjectInstanceEx = interface(IUnknown)
    ['{304E2F76-14B0-49A4-9B5F-B7221D93AA3E}']
    function  getFieldName(out pVal: PWord1): HResult; stdcall;
    function  setFieldName(var newVal: Word): HResult; stdcall;
    function  getFieldStrings(out pVal: PUserType2): HResult; stdcall;
    function  setFieldStrings(var newVal: _CRStringListNode): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRFieldObjectInstanceInGrid
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AE0374FB-EF49-4A6B-80C0-1DBD14D41E0D}
// *********************************************************************//
  ISCRFieldObjectInstanceInGrid = interface(ISCRFieldObjectInstance)
    ['{AE0374FB-EF49-4A6B-80C0-1DBD14D41E0D}']
    function  Get_RowNumber: Integer; safecall;
    procedure Set_RowNumber(pVal: Integer); safecall;
    function  Get_ColumnNumber: Integer; safecall;
    procedure Set_ColumnNumber(pVal: Integer); safecall;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
  end;

// *********************************************************************//
// DispIntf:  ISCRFieldObjectInstanceInGridDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AE0374FB-EF49-4A6B-80C0-1DBD14D41E0D}
// *********************************************************************//
  ISCRFieldObjectInstanceInGridDisp = dispinterface
    ['{AE0374FB-EF49-4A6B-80C0-1DBD14D41E0D}']
    property RowNumber: Integer dispid 93;
    property ColumnNumber: Integer dispid 94;
    property FieldName: WideString dispid 41;
    property FieldType: CrRuntimeFieldKindEnum dispid 42;
    property FieldValueType: CrFieldValueTypeEnum dispid 43;
    property IsConstantField: WordBool dispid 44;
    property IsPrintTimeField: WordBool dispid 45;
    property FontColor: ISCRRuntimeFontColor dispid 46;
    property FieldFormat: ISCRFieldFormat dispid 47;
    property LeftAlignFixedLeft: WordBool dispid 48;
    property RightAlignFixedRight: WordBool dispid 49;
    property AllowClipping: WordBool dispid 50;
    property FieldStrings: ISCRStrings dispid 51;
    property FieldHasRawValue: WordBool dispid 52;
    property RawData: OleVariant dispid 53;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRNumericFieldObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7EF438A6-0185-45CB-8CF1-67A2CE93F9BC}
// *********************************************************************//
  ISCRNumericFieldObjectInstance = interface(ISCRFieldObjectInstance)
    ['{7EF438A6-0185-45CB-8CF1-67A2CE93F9BC}']
    function  Get_FixedLeft: WideString; safecall;
    procedure Set_FixedLeft(const pVal: WideString); safecall;
    function  Get_FixedLeftReserve: WideString; safecall;
    procedure Set_FixedLeftReserve(const pVal: WideString); safecall;
    function  Get_FixedRight: WideString; safecall;
    procedure Set_FixedRight(const pVal: WideString); safecall;
    function  Get_FixedRightReserve: WideString; safecall;
    procedure Set_FixedRightReserve(const pVal: WideString); safecall;
    function  Get_LeftFill: WideString; safecall;
    procedure Set_LeftFill(const pVal: WideString); safecall;
    function  Get_RightFill: WideString; safecall;
    procedure Set_RightFill(const pVal: WideString); safecall;
    function  Get_Prefix: WideString; safecall;
    procedure Set_Prefix(const pVal: WideString); safecall;
    function  Get_PrefixReserve: WideString; safecall;
    procedure Set_PrefixReserve(const pVal: WideString); safecall;
    function  Get_Suffix: WideString; safecall;
    procedure Set_Suffix(const pVal: WideString); safecall;
    function  Get_SuffixReserve: WideString; safecall;
    procedure Set_SuffixReserve(const pVal: WideString); safecall;
    property FixedLeft: WideString read Get_FixedLeft write Set_FixedLeft;
    property FixedLeftReserve: WideString read Get_FixedLeftReserve write Set_FixedLeftReserve;
    property FixedRight: WideString read Get_FixedRight write Set_FixedRight;
    property FixedRightReserve: WideString read Get_FixedRightReserve write Set_FixedRightReserve;
    property LeftFill: WideString read Get_LeftFill write Set_LeftFill;
    property RightFill: WideString read Get_RightFill write Set_RightFill;
    property Prefix: WideString read Get_Prefix write Set_Prefix;
    property PrefixReserve: WideString read Get_PrefixReserve write Set_PrefixReserve;
    property Suffix: WideString read Get_Suffix write Set_Suffix;
    property SuffixReserve: WideString read Get_SuffixReserve write Set_SuffixReserve;
  end;

// *********************************************************************//
// DispIntf:  ISCRNumericFieldObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7EF438A6-0185-45CB-8CF1-67A2CE93F9BC}
// *********************************************************************//
  ISCRNumericFieldObjectInstanceDisp = dispinterface
    ['{7EF438A6-0185-45CB-8CF1-67A2CE93F9BC}']
    property FixedLeft: WideString dispid 71;
    property FixedLeftReserve: WideString dispid 72;
    property FixedRight: WideString dispid 73;
    property FixedRightReserve: WideString dispid 74;
    property LeftFill: WideString dispid 75;
    property RightFill: WideString dispid 76;
    property Prefix: WideString dispid 77;
    property PrefixReserve: WideString dispid 78;
    property Suffix: WideString dispid 79;
    property SuffixReserve: WideString dispid 80;
    property FieldName: WideString dispid 41;
    property FieldType: CrRuntimeFieldKindEnum dispid 42;
    property FieldValueType: CrFieldValueTypeEnum dispid 43;
    property IsConstantField: WordBool dispid 44;
    property IsPrintTimeField: WordBool dispid 45;
    property FontColor: ISCRRuntimeFontColor dispid 46;
    property FieldFormat: ISCRFieldFormat dispid 47;
    property LeftAlignFixedLeft: WordBool dispid 48;
    property RightAlignFixedRight: WordBool dispid 49;
    property AllowClipping: WordBool dispid 50;
    property FieldStrings: ISCRStrings dispid 51;
    property FieldHasRawValue: WordBool dispid 52;
    property RawData: OleVariant dispid 53;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRNumericFieldObjectInstanceEx
// Flags:     (16) Hidden
// GUID:      {8062C99B-716F-4E95-8B12-F7ADBF41D141}
// *********************************************************************//
  ISCRNumericFieldObjectInstanceEx = interface(IUnknown)
    ['{8062C99B-716F-4E95-8B12-F7ADBF41D141}']
    function  getFixedLeft(out pVal: PWord1): HResult; stdcall;
    function  setFixedLeft(var newVal: Word): HResult; stdcall;
    function  getFixedLeftReserve(out pVal: PWord1): HResult; stdcall;
    function  setFixedLeftReserve(var newVal: Word): HResult; stdcall;
    function  getFixedRight(out pVal: PWord1): HResult; stdcall;
    function  setFixedRight(var newVal: Word): HResult; stdcall;
    function  getFixedRightReserve(out pVal: PWord1): HResult; stdcall;
    function  setFixedRightReserve(var newVal: Word): HResult; stdcall;
    function  getLeftFill(out pVal: PWord1): HResult; stdcall;
    function  setLeftFill(var newVal: Word): HResult; stdcall;
    function  getRightFill(out pVal: PWord1): HResult; stdcall;
    function  setRightFill(var newVal: Word): HResult; stdcall;
    function  getPrefix(out pVal: PWord1): HResult; stdcall;
    function  setPrefix(var newVal: Word): HResult; stdcall;
    function  getPrefixReserve(out pVal: PWord1): HResult; stdcall;
    function  setPrefixReserve(var newVal: Word): HResult; stdcall;
    function  getSuffix(out pVal: PWord1): HResult; stdcall;
    function  setSuffix(var newVal: Word): HResult; stdcall;
    function  getSuffixReserve(out pVal: PWord1): HResult; stdcall;
    function  setSuffixReserve(var newVal: Word): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRNumericFieldObjectInstanceInGrid
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5392C302-4DD3-4A7E-B246-9B91AE37CB36}
// *********************************************************************//
  ISCRNumericFieldObjectInstanceInGrid = interface(ISCRNumericFieldObjectInstance)
    ['{5392C302-4DD3-4A7E-B246-9B91AE37CB36}']
    function  Get_RowNumber: Integer; safecall;
    procedure Set_RowNumber(pVal: Integer); safecall;
    function  Get_ColumnNumber: Integer; safecall;
    procedure Set_ColumnNumber(pVal: Integer); safecall;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
  end;

// *********************************************************************//
// DispIntf:  ISCRNumericFieldObjectInstanceInGridDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5392C302-4DD3-4A7E-B246-9B91AE37CB36}
// *********************************************************************//
  ISCRNumericFieldObjectInstanceInGridDisp = dispinterface
    ['{5392C302-4DD3-4A7E-B246-9B91AE37CB36}']
    property RowNumber: Integer dispid 93;
    property ColumnNumber: Integer dispid 94;
    property FixedLeft: WideString dispid 71;
    property FixedLeftReserve: WideString dispid 72;
    property FixedRight: WideString dispid 73;
    property FixedRightReserve: WideString dispid 74;
    property LeftFill: WideString dispid 75;
    property RightFill: WideString dispid 76;
    property Prefix: WideString dispid 77;
    property PrefixReserve: WideString dispid 78;
    property Suffix: WideString dispid 79;
    property SuffixReserve: WideString dispid 80;
    property FieldName: WideString dispid 41;
    property FieldType: CrRuntimeFieldKindEnum dispid 42;
    property FieldValueType: CrFieldValueTypeEnum dispid 43;
    property IsConstantField: WordBool dispid 44;
    property IsPrintTimeField: WordBool dispid 45;
    property FontColor: ISCRRuntimeFontColor dispid 46;
    property FieldFormat: ISCRFieldFormat dispid 47;
    property LeftAlignFixedLeft: WordBool dispid 48;
    property RightAlignFixedRight: WordBool dispid 49;
    property AllowClipping: WordBool dispid 50;
    property FieldStrings: ISCRStrings dispid 51;
    property FieldHasRawValue: WordBool dispid 52;
    property RawData: OleVariant dispid 53;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRTextObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {83E6BD6F-76E0-4964-8902-18C45BBF4DE2}
// *********************************************************************//
  ISCRTextObjectInstance = interface(ISCRReportObjectInstance)
    ['{83E6BD6F-76E0-4964-8902-18C45BBF4DE2}']
    function  Get_StartLineNumber: Integer; safecall;
    procedure Set_StartLineNumber(pVal: Integer); safecall;
    function  Get_EndLineNumber: Integer; safecall;
    procedure Set_EndLineNumber(pVal: Integer); safecall;
    function  Get_VerticalStartOffset: Integer; safecall;
    procedure Set_VerticalStartOffset(pVal: Integer); safecall;
    function  Get_Paragraphs: ISCRRuntimeParagraphs; safecall;
    procedure Set_Paragraphs(const pVal: ISCRRuntimeParagraphs); safecall;
    procedure SetUpDefaultObject(const bstrText: WideString); safecall;
    property StartLineNumber: Integer read Get_StartLineNumber write Set_StartLineNumber;
    property EndLineNumber: Integer read Get_EndLineNumber write Set_EndLineNumber;
    property VerticalStartOffset: Integer read Get_VerticalStartOffset write Set_VerticalStartOffset;
    property Paragraphs: ISCRRuntimeParagraphs read Get_Paragraphs write Set_Paragraphs;
  end;

// *********************************************************************//
// DispIntf:  ISCRTextObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {83E6BD6F-76E0-4964-8902-18C45BBF4DE2}
// *********************************************************************//
  ISCRTextObjectInstanceDisp = dispinterface
    ['{83E6BD6F-76E0-4964-8902-18C45BBF4DE2}']
    property StartLineNumber: Integer dispid 41;
    property EndLineNumber: Integer dispid 42;
    property VerticalStartOffset: Integer dispid 43;
    property Paragraphs: ISCRRuntimeParagraphs dispid 44;
    procedure SetUpDefaultObject(const bstrText: WideString); dispid 45;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRStringFieldObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1CBCB17C-9982-40CC-9384-19EE1F4F6101}
// *********************************************************************//
  ISCRStringFieldObjectInstance = interface(ISCRTextObjectInstance)
    ['{1CBCB17C-9982-40CC-9384-19EE1F4F6101}']
    function  Get_FieldName: WideString; safecall;
    procedure Set_FieldName(const pVal: WideString); safecall;
    function  Get_FieldType: CrRuntimeFieldKindEnum; safecall;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum); safecall;
    function  Get_FieldValueType: CrFieldValueTypeEnum; safecall;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum); safecall;
    function  Get_IsConstantField: WordBool; safecall;
    procedure Set_IsConstantField(pVal: WordBool); safecall;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
  end;

// *********************************************************************//
// DispIntf:  ISCRStringFieldObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1CBCB17C-9982-40CC-9384-19EE1F4F6101}
// *********************************************************************//
  ISCRStringFieldObjectInstanceDisp = dispinterface
    ['{1CBCB17C-9982-40CC-9384-19EE1F4F6101}']
    property FieldName: WideString dispid 71;
    property FieldType: CrRuntimeFieldKindEnum dispid 72;
    property FieldValueType: CrFieldValueTypeEnum dispid 73;
    property IsConstantField: WordBool dispid 74;
    property StartLineNumber: Integer dispid 41;
    property EndLineNumber: Integer dispid 42;
    property VerticalStartOffset: Integer dispid 43;
    property Paragraphs: ISCRRuntimeParagraphs dispid 44;
    procedure SetUpDefaultObject(const bstrText: WideString); dispid 45;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRStringFieldObjectInstanceEx
// Flags:     (16) Hidden
// GUID:      {209AECD7-ECF6-46E2-A85E-9058E53F805C}
// *********************************************************************//
  ISCRStringFieldObjectInstanceEx = interface(IUnknown)
    ['{209AECD7-ECF6-46E2-A85E-9058E53F805C}']
    function  getFieldName(out pVal: PWideChar): HResult; stdcall;
    function  setFieldName(newVal: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRStringFieldObjectInstanceInGrid
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CFD56A9F-EE52-4043-8013-5005A1C853D9}
// *********************************************************************//
  ISCRStringFieldObjectInstanceInGrid = interface(ISCRStringFieldObjectInstance)
    ['{CFD56A9F-EE52-4043-8013-5005A1C853D9}']
    function  Get_RowNumber: Integer; safecall;
    procedure Set_RowNumber(pVal: Integer); safecall;
    function  Get_ColumnNumber: Integer; safecall;
    procedure Set_ColumnNumber(pVal: Integer); safecall;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
  end;

// *********************************************************************//
// DispIntf:  ISCRStringFieldObjectInstanceInGridDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CFD56A9F-EE52-4043-8013-5005A1C853D9}
// *********************************************************************//
  ISCRStringFieldObjectInstanceInGridDisp = dispinterface
    ['{CFD56A9F-EE52-4043-8013-5005A1C853D9}']
    property RowNumber: Integer dispid 93;
    property ColumnNumber: Integer dispid 94;
    property FieldName: WideString dispid 71;
    property FieldType: CrRuntimeFieldKindEnum dispid 72;
    property FieldValueType: CrFieldValueTypeEnum dispid 73;
    property IsConstantField: WordBool dispid 74;
    property StartLineNumber: Integer dispid 41;
    property EndLineNumber: Integer dispid 42;
    property VerticalStartOffset: Integer dispid 43;
    property Paragraphs: ISCRRuntimeParagraphs dispid 44;
    procedure SetUpDefaultObject(const bstrText: WideString); dispid 45;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRTextObjectInstanceInGrid
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B6A8A12D-F811-4BEA-8DEE-8BFEA6236AEE}
// *********************************************************************//
  ISCRTextObjectInstanceInGrid = interface(ISCRTextObjectInstance)
    ['{B6A8A12D-F811-4BEA-8DEE-8BFEA6236AEE}']
    function  Get_RowNumber: Integer; safecall;
    procedure Set_RowNumber(pVal: Integer); safecall;
    function  Get_ColumnNumber: Integer; safecall;
    procedure Set_ColumnNumber(pVal: Integer); safecall;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
  end;

// *********************************************************************//
// DispIntf:  ISCRTextObjectInstanceInGridDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B6A8A12D-F811-4BEA-8DEE-8BFEA6236AEE}
// *********************************************************************//
  ISCRTextObjectInstanceInGridDisp = dispinterface
    ['{B6A8A12D-F811-4BEA-8DEE-8BFEA6236AEE}']
    property RowNumber: Integer dispid 93;
    property ColumnNumber: Integer dispid 94;
    property StartLineNumber: Integer dispid 41;
    property EndLineNumber: Integer dispid 42;
    property VerticalStartOffset: Integer dispid 43;
    property Paragraphs: ISCRRuntimeParagraphs dispid 44;
    procedure SetUpDefaultObject(const bstrText: WideString); dispid 45;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRGraphicObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A8B7BFB0-575E-4F78-B80C-69D3BD88B84A}
// *********************************************************************//
  ISCRGraphicObjectInstance = interface(ISCRReportObjectInstance)
    ['{A8B7BFB0-575E-4F78-B80C-69D3BD88B84A}']
    function  Get_ImageFormat: CrImageFormatEnum; safecall;
    procedure Set_ImageFormat(pVal: CrImageFormatEnum); safecall;
    function  Get_ImageData: ISequentialStream; safecall;
    procedure Set_ImageData(const pVal: ISequentialStream); safecall;
    function  Get_ImageByteArray: ISCRByteArray; safecall;
    procedure Set_ImageByteArray(const pVal: ISCRByteArray); safecall;
    property ImageFormat: CrImageFormatEnum read Get_ImageFormat write Set_ImageFormat;
    property ImageData: ISequentialStream read Get_ImageData write Set_ImageData;
    property ImageByteArray: ISCRByteArray read Get_ImageByteArray write Set_ImageByteArray;
  end;

// *********************************************************************//
// DispIntf:  ISCRGraphicObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A8B7BFB0-575E-4F78-B80C-69D3BD88B84A}
// *********************************************************************//
  ISCRGraphicObjectInstanceDisp = dispinterface
    ['{A8B7BFB0-575E-4F78-B80C-69D3BD88B84A}']
    property ImageFormat: CrImageFormatEnum dispid 42;
    property ImageData: ISequentialStream dispid 43;
    property ImageByteArray: ISCRByteArray dispid 44;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISequentialStream
// Flags:     (0)
// GUID:      {0C733A30-2A1C-11CE-ADE5-00AA0044773D}
// *********************************************************************//
  ISequentialStream = interface(IUnknown)
    ['{0C733A30-2A1C-11CE-ADE5-00AA0044773D}']
    function  RemoteRead(out pv: Byte; cb: LongWord; out pcbRead: LongWord): HResult; stdcall;
    function  RemoteWrite(var pv: Byte; cb: LongWord; out pcbWritten: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IStream
// Flags:     (0)
// GUID:      {0000000C-0000-0000-C000-000000000046}
// *********************************************************************//
  IStream = interface(ISequentialStream)
    ['{0000000C-0000-0000-C000-000000000046}']
    function  RemoteSeek(dlibMove: _LARGE_INTEGER; dwOrigin: LongWord; 
                         out plibNewPosition: _ULARGE_INTEGER): HResult; stdcall;
    function  SetSize(libNewSize: _ULARGE_INTEGER): HResult; stdcall;
    function  RemoteCopyTo(const pstm: ISequentialStream; cb: _ULARGE_INTEGER; 
                           out pcbRead: _ULARGE_INTEGER; out pcbWritten: _ULARGE_INTEGER): HResult; stdcall;
    function  Commit(grfCommitFlags: LongWord): HResult; stdcall;
    function  Revert: HResult; stdcall;
    function  LockRegion(libOffset: _ULARGE_INTEGER; cb: _ULARGE_INTEGER; dwLockType: LongWord): HResult; stdcall;
    function  UnlockRegion(libOffset: _ULARGE_INTEGER; cb: _ULARGE_INTEGER; dwLockType: LongWord): HResult; stdcall;
    function  Stat(out pstatstg: tagSTATSTG; grfStatFlag: LongWord): HResult; stdcall;
    function  Clone(out ppstm: ISequentialStream): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCROleObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0B40FB2E-99A4-4DB6-8E83-3EAA68942FBA}
// *********************************************************************//
  ISCROleObjectInstance = interface(ISCRGraphicObjectInstance)
    ['{0B40FB2E-99A4-4DB6-8E83-3EAA68942FBA}']
  end;

// *********************************************************************//
// DispIntf:  ISCROleObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0B40FB2E-99A4-4DB6-8E83-3EAA68942FBA}
// *********************************************************************//
  ISCROleObjectInstanceDisp = dispinterface
    ['{0B40FB2E-99A4-4DB6-8E83-3EAA68942FBA}']
    property ImageFormat: CrImageFormatEnum dispid 42;
    property ImageData: ISequentialStream dispid 43;
    property ImageByteArray: ISCRByteArray dispid 44;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRFlashObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E1368757-31F4-4AE8-819D-857F9ECEEE48}
// *********************************************************************//
  ISCRFlashObjectInstance = interface(ISCRGraphicObjectInstance)
    ['{E1368757-31F4-4AE8-819D-857F9ECEEE48}']
    function  Get_SWFLocation: WideString; safecall;
    procedure Set_SWFLocation(const pVal: WideString); safecall;
    function  Get_ParamNames: ISCRStrings; safecall;
    procedure Set_ParamNames(const pVal: ISCRStrings); safecall;
    function  Get_ParamValues: ISCRStrings; safecall;
    procedure Set_ParamValues(const pVal: ISCRStrings); safecall;
    function  Get_IsEmbedded: WordBool; safecall;
    procedure Set_IsEmbedded(pVal: WordBool); safecall;
    property SWFLocation: WideString read Get_SWFLocation write Set_SWFLocation;
    property ParamNames: ISCRStrings read Get_ParamNames write Set_ParamNames;
    property ParamValues: ISCRStrings read Get_ParamValues write Set_ParamValues;
    property IsEmbedded: WordBool read Get_IsEmbedded write Set_IsEmbedded;
  end;

// *********************************************************************//
// DispIntf:  ISCRFlashObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E1368757-31F4-4AE8-819D-857F9ECEEE48}
// *********************************************************************//
  ISCRFlashObjectInstanceDisp = dispinterface
    ['{E1368757-31F4-4AE8-819D-857F9ECEEE48}']
    property SWFLocation: WideString dispid 50;
    property ParamNames: ISCRStrings dispid 51;
    property ParamValues: ISCRStrings dispid 52;
    property IsEmbedded: WordBool dispid 53;
    property ImageFormat: CrImageFormatEnum dispid 42;
    property ImageData: ISequentialStream dispid 43;
    property ImageByteArray: ISCRByteArray dispid 44;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRFlashObjectInstanceEx
// Flags:     (16) Hidden
// GUID:      {0B3C468E-4D5C-4AE3-A368-66B79921D285}
// *********************************************************************//
  ISCRFlashObjectInstanceEx = interface(IUnknown)
    ['{0B3C468E-4D5C-4AE3-A368-66B79921D285}']
    function  getSWFLocation(out pVal: PWord1): HResult; stdcall;
    function  setSWFLocation(var newVal: Word): HResult; stdcall;
    function  getParamNames(out pVal: PUserType2): HResult; stdcall;
    function  setParamNames(var newVal: _CRStringListNode): HResult; stdcall;
    function  getParamValues(out pVal: PUserType2): HResult; stdcall;
    function  setParamValues(var newVal: _CRStringListNode): HResult; stdcall;
    function  getIsEmbedded(out pVal: WordBool): HResult; stdcall;
    function  setIsEmbedded(newVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRBlobFieldObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29746F56-DE32-4B1D-80E6-C2309552C272}
// *********************************************************************//
  ISCRBlobFieldObjectInstance = interface(ISCRGraphicObjectInstance)
    ['{29746F56-DE32-4B1D-80E6-C2309552C272}']
    function  Get_FieldName: WideString; safecall;
    procedure Set_FieldName(const pVal: WideString); safecall;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
  end;

// *********************************************************************//
// DispIntf:  ISCRBlobFieldObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29746F56-DE32-4B1D-80E6-C2309552C272}
// *********************************************************************//
  ISCRBlobFieldObjectInstanceDisp = dispinterface
    ['{29746F56-DE32-4B1D-80E6-C2309552C272}']
    property FieldName: WideString dispid 61;
    property ImageFormat: CrImageFormatEnum dispid 42;
    property ImageData: ISequentialStream dispid 43;
    property ImageByteArray: ISCRByteArray dispid 44;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRAnalysisObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0A5AEBBE-ACD3-4F83-B2DE-A193A84C778E}
// *********************************************************************//
  ISCRAnalysisObjectInstance = interface(ISCRGraphicObjectInstance)
    ['{0A5AEBBE-ACD3-4F83-B2DE-A193A84C778E}']
    function  Get_AnalysisGridType: CrAnalysisGridEnum; safecall;
    procedure Set_AnalysisGridType(pVal: CrAnalysisGridEnum); safecall;
    property AnalysisGridType: CrAnalysisGridEnum read Get_AnalysisGridType write Set_AnalysisGridType;
  end;

// *********************************************************************//
// DispIntf:  ISCRAnalysisObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0A5AEBBE-ACD3-4F83-B2DE-A193A84C778E}
// *********************************************************************//
  ISCRAnalysisObjectInstanceDisp = dispinterface
    ['{0A5AEBBE-ACD3-4F83-B2DE-A193A84C778E}']
    property AnalysisGridType: CrAnalysisGridEnum dispid 61;
    property ImageFormat: CrImageFormatEnum dispid 42;
    property ImageData: ISequentialStream dispid 43;
    property ImageByteArray: ISCRByteArray dispid 44;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRChartObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {85E0F245-EABA-455E-B232-17D347D72DE7}
// *********************************************************************//
  ISCRChartObjectInstance = interface(ISCRAnalysisObjectInstance)
    ['{85E0F245-EABA-455E-B232-17D347D72DE7}']
  end;

// *********************************************************************//
// DispIntf:  ISCRChartObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {85E0F245-EABA-455E-B232-17D347D72DE7}
// *********************************************************************//
  ISCRChartObjectInstanceDisp = dispinterface
    ['{85E0F245-EABA-455E-B232-17D347D72DE7}']
    property AnalysisGridType: CrAnalysisGridEnum dispid 61;
    property ImageFormat: CrImageFormatEnum dispid 42;
    property ImageData: ISequentialStream dispid 43;
    property ImageByteArray: ISCRByteArray dispid 44;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRMapObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {26819CFD-089D-4884-AF2A-08C126FB9E05}
// *********************************************************************//
  ISCRMapObjectInstance = interface(ISCRAnalysisObjectInstance)
    ['{26819CFD-089D-4884-AF2A-08C126FB9E05}']
  end;

// *********************************************************************//
// DispIntf:  ISCRMapObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {26819CFD-089D-4884-AF2A-08C126FB9E05}
// *********************************************************************//
  ISCRMapObjectInstanceDisp = dispinterface
    ['{26819CFD-089D-4884-AF2A-08C126FB9E05}']
    property AnalysisGridType: CrAnalysisGridEnum dispid 61;
    property ImageFormat: CrImageFormatEnum dispid 42;
    property ImageData: ISequentialStream dispid 43;
    property ImageByteArray: ISCRByteArray dispid 44;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRSubreportObjectInstanceBase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {116107E1-B006-459C-89CC-421128BBC527}
// *********************************************************************//
  ISCRSubreportObjectInstanceBase = interface(ISCRReportObjectInstance)
    ['{116107E1-B006-459C-89CC-421128BBC527}']
    function  Get_SubreportName: WideString; safecall;
    procedure Set_SubreportName(const pVal: WideString); safecall;
    function  Get_FontColor: ISCRRuntimeFontColor; safecall;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor); safecall;
    function  Get_TabText: WideString; safecall;
    procedure Set_TabText(const pVal: WideString); safecall;
    property SubreportName: WideString read Get_SubreportName write Set_SubreportName;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property TabText: WideString read Get_TabText write Set_TabText;
  end;

// *********************************************************************//
// DispIntf:  ISCRSubreportObjectInstanceBaseDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {116107E1-B006-459C-89CC-421128BBC527}
// *********************************************************************//
  ISCRSubreportObjectInstanceBaseDisp = dispinterface
    ['{116107E1-B006-459C-89CC-421128BBC527}']
    property SubreportName: WideString dispid 41;
    property FontColor: ISCRRuntimeFontColor dispid 42;
    property TabText: WideString dispid 45;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRSubreportObjectInstanceBaseEx
// Flags:     (16) Hidden
// GUID:      {68841C3E-11F8-4BB2-AED7-263A564E95E8}
// *********************************************************************//
  ISCRSubreportObjectInstanceBaseEx = interface(IUnknown)
    ['{68841C3E-11F8-4BB2-AED7-263A564E95E8}']
    function  getSubreportName(out pVal: PWideChar): HResult; stdcall;
    function  setSubreportName(newVal: PWideChar): HResult; stdcall;
    function  getTabText(out pVal: PWideChar): HResult; stdcall;
    function  setTabText(newVal: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRSubreportObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {116107E2-B006-459C-89CC-421128BBC527}
// *********************************************************************//
  ISCRSubreportObjectInstance = interface(ISCRSubreportObjectInstanceBase)
    ['{116107E2-B006-459C-89CC-421128BBC527}']
    function  Get_SubreportPageObject: ISCRPageObjectInstance; safecall;
    procedure Set_SubreportPageObject(const pVal: ISCRPageObjectInstance); safecall;
    property SubreportPageObject: ISCRPageObjectInstance read Get_SubreportPageObject write Set_SubreportPageObject;
  end;

// *********************************************************************//
// DispIntf:  ISCRSubreportObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {116107E2-B006-459C-89CC-421128BBC527}
// *********************************************************************//
  ISCRSubreportObjectInstanceDisp = dispinterface
    ['{116107E2-B006-459C-89CC-421128BBC527}']
    property SubreportPageObject: ISCRPageObjectInstance dispid 43;
    property SubreportName: WideString dispid 41;
    property FontColor: ISCRRuntimeFontColor dispid 42;
    property TabText: WideString dispid 45;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCROnDemandSubreportObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {116107E3-B006-459C-89CC-421128BBC527}
// *********************************************************************//
  ISCROnDemandSubreportObjectInstance = interface(ISCRSubreportObjectInstanceBase)
    ['{116107E3-B006-459C-89CC-421128BBC527}']
    function  Get_OnDemandSubreportIndex: Integer; safecall;
    procedure Set_OnDemandSubreportIndex(pVal: Integer); safecall;
    function  Get_OnDemandSubreportDisplayString: WideString; safecall;
    procedure Set_OnDemandSubreportDisplayString(const pVal: WideString); safecall;
    property OnDemandSubreportIndex: Integer read Get_OnDemandSubreportIndex write Set_OnDemandSubreportIndex;
    property OnDemandSubreportDisplayString: WideString read Get_OnDemandSubreportDisplayString write Set_OnDemandSubreportDisplayString;
  end;

// *********************************************************************//
// DispIntf:  ISCROnDemandSubreportObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {116107E3-B006-459C-89CC-421128BBC527}
// *********************************************************************//
  ISCROnDemandSubreportObjectInstanceDisp = dispinterface
    ['{116107E3-B006-459C-89CC-421128BBC527}']
    property OnDemandSubreportIndex: Integer dispid 46;
    property OnDemandSubreportDisplayString: WideString dispid 47;
    property SubreportName: WideString dispid 41;
    property FontColor: ISCRRuntimeFontColor dispid 42;
    property TabText: WideString dispid 45;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCROnDemandSubreportObjectInstanceEx
// Flags:     (16) Hidden
// GUID:      {57A19C10-B622-4AE5-B24E-84258310D4F4}
// *********************************************************************//
  ISCROnDemandSubreportObjectInstanceEx = interface(IUnknown)
    ['{57A19C10-B622-4AE5-B24E-84258310D4F4}']
    function  getOnDemandSubreportDisplayString(out pVal: PWideChar): HResult; stdcall;
    function  setOnDemandSubreportDisplayString(newVal: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRGridLineInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {808C3FBD-1A2A-43AF-AD6E-F16DC577022A}
// *********************************************************************//
  ISCRGridLineInstance = interface(ISCRDrawingObjectInstance)
    ['{808C3FBD-1A2A-43AF-AD6E-F16DC577022A}']
    function  Clone(DeepClone: WordBool): ISCRGridLineInstance; safecall;
    procedure CopyTo(const GridLineInstance: ISCRGridLineInstance; DeepCopy: WordBool); safecall;
    function  Equals(const GridLineInstance: ISCRGridLineInstance): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_GridLineType: CrGridLineEnum; safecall;
    procedure Set_GridLineType(pVal: CrGridLineEnum); safecall;
    property ClassName: WideString read Get_ClassName;
    property GridLineType: CrGridLineEnum read Get_GridLineType write Set_GridLineType;
  end;

// *********************************************************************//
// DispIntf:  ISCRGridLineInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {808C3FBD-1A2A-43AF-AD6E-F16DC577022A}
// *********************************************************************//
  ISCRGridLineInstanceDisp = dispinterface
    ['{808C3FBD-1A2A-43AF-AD6E-F16DC577022A}']
    function  Clone(DeepClone: WordBool): ISCRGridLineInstance; dispid 1001;
    procedure CopyTo(const GridLineInstance: ISCRGridLineInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GridLineInstance: ISCRGridLineInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property GridLineType: CrGridLineEnum dispid 21;
    property StartX: Integer dispid 1;
    property StartY: Integer dispid 2;
    property EndX: Integer dispid 3;
    property EndY: Integer dispid 4;
    property LineColor: OLE_COLOR dispid 5;
    property LineStyle: CrLineStyleEnum dispid 6;
    property LineThickness: Integer dispid 7;
    property ObjectName: WideString dispid 8;
    property StyleSheetName: WideString dispid 9;
  end;

// *********************************************************************//
// Interface: ISCRGridLineInstances
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BA460C53-DC28-40E1-80E1-788C7BAE6131}
// *********************************************************************//
  ISCRGridLineInstances = interface(IDispatch)
    ['{BA460C53-DC28-40E1-80E1-788C7BAE6131}']
    function  Clone(DeepClone: WordBool): ISCRGridLineInstances; safecall;
    procedure CopyTo(const GridLineInstances: ISCRGridLineInstances; DeepCopy: WordBool); safecall;
    function  Equals(const GridLineInstances: ISCRGridLineInstances): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRGridLineInstance; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRGridLineInstance); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const GridLineInstance: ISCRGridLineInstance); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const GridLineInstance: ISCRGridLineInstance); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const GridLineInstance: ISCRGridLineInstance): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRGridLineInstance read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRGridLineInstancesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BA460C53-DC28-40E1-80E1-788C7BAE6131}
// *********************************************************************//
  ISCRGridLineInstancesDisp = dispinterface
    ['{BA460C53-DC28-40E1-80E1-788C7BAE6131}']
    function  Clone(DeepClone: WordBool): ISCRGridLineInstances; dispid 1001;
    procedure CopyTo(const GridLineInstances: ISCRGridLineInstances; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GridLineInstances: ISCRGridLineInstances): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRGridLineInstance dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const GridLineInstance: ISCRGridLineInstance); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const GridLineInstance: ISCRGridLineInstance); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const GridLineInstance: ISCRGridLineInstance): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRGridAreaInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C609E477-2272-45C8-B8B4-067761117B8F}
// *********************************************************************//
  ISCRGridAreaInstance = interface(IDispatch)
    ['{C609E477-2272-45C8-B8B4-067761117B8F}']
    function  Clone(DeepClone: WordBool): ISCRGridAreaInstance; safecall;
    procedure CopyTo(const GridAreaInstance: ISCRGridAreaInstance; DeepCopy: WordBool); safecall;
    function  Equals(const GridAreaInstance: ISCRGridAreaInstance): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_OffsetX: Integer; safecall;
    procedure Set_OffsetX(pVal: Integer); safecall;
    function  Get_OffsetY: Integer; safecall;
    procedure Set_OffsetY(pVal: Integer); safecall;
    function  Get_Width: Integer; safecall;
    procedure Set_Width(pVal: Integer); safecall;
    function  Get_Height: Integer; safecall;
    procedure Set_Height(pVal: Integer); safecall;
    function  Get_BackgroundColor: OLE_COLOR; safecall;
    procedure Set_BackgroundColor(pVal: OLE_COLOR); safecall;
    property ClassName: WideString read Get_ClassName;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
  end;

// *********************************************************************//
// DispIntf:  ISCRGridAreaInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C609E477-2272-45C8-B8B4-067761117B8F}
// *********************************************************************//
  ISCRGridAreaInstanceDisp = dispinterface
    ['{C609E477-2272-45C8-B8B4-067761117B8F}']
    function  Clone(DeepClone: WordBool): ISCRGridAreaInstance; dispid 1001;
    procedure CopyTo(const GridAreaInstance: ISCRGridAreaInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GridAreaInstance: ISCRGridAreaInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property BackgroundColor: OLE_COLOR dispid 5;
  end;

// *********************************************************************//
// Interface: ISCRGridAreaInstances
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {22B018CE-4157-4882-B497-78F5D1FD6E27}
// *********************************************************************//
  ISCRGridAreaInstances = interface(IDispatch)
    ['{22B018CE-4157-4882-B497-78F5D1FD6E27}']
    function  Clone(DeepClone: WordBool): ISCRGridAreaInstances; safecall;
    procedure CopyTo(const GridAreaInstances: ISCRGridAreaInstances; DeepCopy: WordBool); safecall;
    function  Equals(const GridAreaInstances: ISCRGridAreaInstances): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRGridAreaInstance; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRGridAreaInstance); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const GridAreaInstance: ISCRGridAreaInstance); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const GridAreaInstance: ISCRGridAreaInstance); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const GridAreaInstance: ISCRGridAreaInstance): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRGridAreaInstance read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRGridAreaInstancesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {22B018CE-4157-4882-B497-78F5D1FD6E27}
// *********************************************************************//
  ISCRGridAreaInstancesDisp = dispinterface
    ['{22B018CE-4157-4882-B497-78F5D1FD6E27}']
    function  Clone(DeepClone: WordBool): ISCRGridAreaInstances; dispid 1001;
    procedure CopyTo(const GridAreaInstances: ISCRGridAreaInstances; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GridAreaInstances: ISCRGridAreaInstances): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRGridAreaInstance dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const GridAreaInstance: ISCRGridAreaInstance); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const GridAreaInstance: ISCRGridAreaInstance); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const GridAreaInstance: ISCRGridAreaInstance): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRGridRowInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F943819E-EC22-4C6A-BBD2-8389CC7BD7EA}
// *********************************************************************//
  ISCRGridRowInstance = interface(ISCRGridAreaInstance)
    ['{F943819E-EC22-4C6A-BBD2-8389CC7BD7EA}']
    function  Get_RowNumber: Integer; safecall;
    procedure Set_RowNumber(pVal: Integer); safecall;
    function  Get_IsGrandTotalRow: WordBool; safecall;
    procedure Set_IsGrandTotalRow(pVal: WordBool); safecall;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property IsGrandTotalRow: WordBool read Get_IsGrandTotalRow write Set_IsGrandTotalRow;
  end;

// *********************************************************************//
// DispIntf:  ISCRGridRowInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F943819E-EC22-4C6A-BBD2-8389CC7BD7EA}
// *********************************************************************//
  ISCRGridRowInstanceDisp = dispinterface
    ['{F943819E-EC22-4C6A-BBD2-8389CC7BD7EA}']
    property RowNumber: Integer dispid 21;
    property IsGrandTotalRow: WordBool dispid 22;
    function  Clone(DeepClone: WordBool): ISCRGridAreaInstance; dispid 1001;
    procedure CopyTo(const GridAreaInstance: ISCRGridAreaInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GridAreaInstance: ISCRGridAreaInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property BackgroundColor: OLE_COLOR dispid 5;
  end;

// *********************************************************************//
// Interface: ISCRGridColumnInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E6B94A8B-A025-45AC-827A-B2386DAB3821}
// *********************************************************************//
  ISCRGridColumnInstance = interface(ISCRGridAreaInstance)
    ['{E6B94A8B-A025-45AC-827A-B2386DAB3821}']
    function  Get_ColumnNumber: Integer; safecall;
    procedure Set_ColumnNumber(pVal: Integer); safecall;
    function  Get_IsGrandTotalColumn: WordBool; safecall;
    procedure Set_IsGrandTotalColumn(pVal: WordBool); safecall;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
    property IsGrandTotalColumn: WordBool read Get_IsGrandTotalColumn write Set_IsGrandTotalColumn;
  end;

// *********************************************************************//
// DispIntf:  ISCRGridColumnInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E6B94A8B-A025-45AC-827A-B2386DAB3821}
// *********************************************************************//
  ISCRGridColumnInstanceDisp = dispinterface
    ['{E6B94A8B-A025-45AC-827A-B2386DAB3821}']
    property ColumnNumber: Integer dispid 21;
    property IsGrandTotalColumn: WordBool dispid 22;
    function  Clone(DeepClone: WordBool): ISCRGridAreaInstance; dispid 1001;
    procedure CopyTo(const GridAreaInstance: ISCRGridAreaInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GridAreaInstance: ISCRGridAreaInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property BackgroundColor: OLE_COLOR dispid 5;
  end;

// *********************************************************************//
// Interface: ISCRGridLabelInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10C7A28B-B50F-440F-82D4-65F16D80F9B7}
// *********************************************************************//
  ISCRGridLabelInstance = interface(ISCRGridAreaInstance)
    ['{10C7A28B-B50F-440F-82D4-65F16D80F9B7}']
    function  Get_StartRowNumber: Integer; safecall;
    procedure Set_StartRowNumber(pVal: Integer); safecall;
    function  Get_EndRowNumber: Integer; safecall;
    procedure Set_EndRowNumber(pVal: Integer); safecall;
    function  Get_StartColumnNumber: Integer; safecall;
    procedure Set_StartColumnNumber(pVal: Integer); safecall;
    function  Get_EndColumnNumber: Integer; safecall;
    procedure Set_EndColumnNumber(pVal: Integer); safecall;
    function  Get_HasText: WordBool; safecall;
    procedure Set_HasText(pVal: WordBool); safecall;
    property StartRowNumber: Integer read Get_StartRowNumber write Set_StartRowNumber;
    property EndRowNumber: Integer read Get_EndRowNumber write Set_EndRowNumber;
    property StartColumnNumber: Integer read Get_StartColumnNumber write Set_StartColumnNumber;
    property EndColumnNumber: Integer read Get_EndColumnNumber write Set_EndColumnNumber;
    property HasText: WordBool read Get_HasText write Set_HasText;
  end;

// *********************************************************************//
// DispIntf:  ISCRGridLabelInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10C7A28B-B50F-440F-82D4-65F16D80F9B7}
// *********************************************************************//
  ISCRGridLabelInstanceDisp = dispinterface
    ['{10C7A28B-B50F-440F-82D4-65F16D80F9B7}']
    property StartRowNumber: Integer dispid 21;
    property EndRowNumber: Integer dispid 22;
    property StartColumnNumber: Integer dispid 23;
    property EndColumnNumber: Integer dispid 24;
    property HasText: WordBool dispid 25;
    function  Clone(DeepClone: WordBool): ISCRGridAreaInstance; dispid 1001;
    procedure CopyTo(const GridAreaInstance: ISCRGridAreaInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GridAreaInstance: ISCRGridAreaInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property BackgroundColor: OLE_COLOR dispid 5;
  end;

// *********************************************************************//
// Interface: ISCRCrossTabObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {13814FB8-6F31-48EF-B645-FAB11C3E915C}
// *********************************************************************//
  ISCRCrossTabObjectInstance = interface(ISCRReportObjectInstance)
    ['{13814FB8-6F31-48EF-B645-FAB11C3E915C}']
    function  Get_GridAreas: ISCRGridAreaInstances; safecall;
    procedure Set_GridAreas(const pVal: ISCRGridAreaInstances); safecall;
    function  Get_GridLines: ISCRGridLineInstances; safecall;
    procedure Set_GridLines(const pVal: ISCRGridLineInstances); safecall;
    function  Get_InGridReportObjectInstances: ISCRReportObjectInstances; safecall;
    procedure Set_InGridReportObjectInstances(const pVal: ISCRReportObjectInstances); safecall;
    property GridAreas: ISCRGridAreaInstances read Get_GridAreas write Set_GridAreas;
    property GridLines: ISCRGridLineInstances read Get_GridLines write Set_GridLines;
    property InGridReportObjectInstances: ISCRReportObjectInstances read Get_InGridReportObjectInstances write Set_InGridReportObjectInstances;
  end;

// *********************************************************************//
// DispIntf:  ISCRCrossTabObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {13814FB8-6F31-48EF-B645-FAB11C3E915C}
// *********************************************************************//
  ISCRCrossTabObjectInstanceDisp = dispinterface
    ['{13814FB8-6F31-48EF-B645-FAB11C3E915C}']
    property GridAreas: ISCRGridAreaInstances dispid 41;
    property GridLines: ISCRGridLineInstances dispid 42;
    property InGridReportObjectInstances: ISCRReportObjectInstances dispid 43;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCROlapSectHeadObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0843AFEC-8E65-415F-9E64-EAE1CBBF8CD3}
// *********************************************************************//
  ISCROlapSectHeadObjectInstance = interface(ISCRReportObjectInstance)
    ['{0843AFEC-8E65-415F-9E64-EAE1CBBF8CD3}']
    function  Get_InSectHeadObjectInstances: ISCRReportObjectInstances; safecall;
    procedure Set_InSectHeadObjectInstances(const pVal: ISCRReportObjectInstances); safecall;
    property InSectHeadObjectInstances: ISCRReportObjectInstances read Get_InSectHeadObjectInstances write Set_InSectHeadObjectInstances;
  end;

// *********************************************************************//
// DispIntf:  ISCROlapSectHeadObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0843AFEC-8E65-415F-9E64-EAE1CBBF8CD3}
// *********************************************************************//
  ISCROlapSectHeadObjectInstanceDisp = dispinterface
    ['{0843AFEC-8E65-415F-9E64-EAE1CBBF8CD3}']
    property InSectHeadObjectInstances: ISCRReportObjectInstances dispid 41;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCROlapObjectInstance
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DE286594-9688-4D73-963C-D4549F792CBC}
// *********************************************************************//
  ISCROlapObjectInstance = interface(ISCRReportObjectInstance)
    ['{DE286594-9688-4D73-963C-D4549F792CBC}']
    function  Get_SectionHeadingInstance: ISCROlapSectHeadObjectInstance; safecall;
    procedure Set_SectionHeadingInstance(const pVal: ISCROlapSectHeadObjectInstance); safecall;
    function  Get_GridObjectInstance: ISCRCrossTabObjectInstance; safecall;
    procedure Set_GridObjectInstance(const pVal: ISCRCrossTabObjectInstance); safecall;
    property SectionHeadingInstance: ISCROlapSectHeadObjectInstance read Get_SectionHeadingInstance write Set_SectionHeadingInstance;
    property GridObjectInstance: ISCRCrossTabObjectInstance read Get_GridObjectInstance write Set_GridObjectInstance;
  end;

// *********************************************************************//
// DispIntf:  ISCROlapObjectInstanceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DE286594-9688-4D73-963C-D4549F792CBC}
// *********************************************************************//
  ISCROlapObjectInstanceDisp = dispinterface
    ['{DE286594-9688-4D73-963C-D4549F792CBC}']
    property SectionHeadingInstance: ISCROlapSectHeadObjectInstance dispid 61;
    property GridObjectInstance: ISCRCrossTabObjectInstance dispid 62;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance; dispid 1001;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property OffsetX: Integer dispid 1;
    property OffsetY: Integer dispid 2;
    property Width: Integer dispid 3;
    property Height: Integer dispid 4;
    property Kind: CrObjectInstanceKindEnum dispid 5;
    property Visible: WordBool dispid 6;
    property ToolTipText: WideString dispid 7;
    property HyperLink: WideString dispid 8;
    property Border: ISCRRuntimeBorder dispid 9;
    property SplitAtTop: WordBool dispid 11;
    property SplitAtBottom: WordBool dispid 12;
    property ReportObjectName: WideString dispid 13;
    property StyleSheetName: WideString dispid 14;
    property Rotation: CrTextRotationAngleEnum dispid 15;
    property HorizontalAlignment: CrAlignmentEnum dispid 16;
    property DataContext: WideString dispid 17;
    property OverriddenInfo: Integer dispid 18;
    procedure GetObjectText(out pObjectText: WideString); dispid 19;
    procedure CanBeDrillDown(out pCanDrillDown: WordBool); dispid 20;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool); dispid 21;
    property ReportPartBookmark: ISCRReportPartBookmark dispid 22;
    procedure HasHyperLink(out pVal: WordBool); dispid 23;
    function  HasReportPartBookmark: WordBool; dispid 24;
    property Highlight: WordBool dispid 25;
    property GroupNamePath: WideString dispid 26;
    property GroupName: WideString dispid 27;
    property HasObjectEnded: WordBool dispid 28;
    property HasBookmark: WordBool writeonly dispid 29;
    property HasPartsDrilldown: WordBool writeonly dispid 30;
    function  HasReportPartDrilldown: WordBool; dispid 31;
  end;

// *********************************************************************//
// Interface: ISCRGroupTreeNodes
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C970BA6-4F7F-49AB-87FD-694B0AE0FD76}
// *********************************************************************//
  ISCRGroupTreeNodes = interface(IDispatch)
    ['{2C970BA6-4F7F-49AB-87FD-694B0AE0FD76}']
    function  Clone(DeepClone: WordBool): ISCRGroupTreeNodes; safecall;
    procedure CopyTo(const GroupTreeNodes: ISCRGroupTreeNodes; DeepCopy: WordBool); safecall;
    function  Equals(const GroupTreeNodes: ISCRGroupTreeNodes): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRGroupTreeNode; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRGroupTreeNode); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const GroupTreeNode: ISCRGroupTreeNode); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const GroupTreeNode: ISCRGroupTreeNode); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const GroupTreeNode: ISCRGroupTreeNode): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRGroupTreeNode read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRGroupTreeNodesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C970BA6-4F7F-49AB-87FD-694B0AE0FD76}
// *********************************************************************//
  ISCRGroupTreeNodesDisp = dispinterface
    ['{2C970BA6-4F7F-49AB-87FD-694B0AE0FD76}']
    function  Clone(DeepClone: WordBool): ISCRGroupTreeNodes; dispid 1001;
    procedure CopyTo(const GroupTreeNodes: ISCRGroupTreeNodes; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GroupTreeNodes: ISCRGroupTreeNodes): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRGroupTreeNode dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const GroupTreeNode: ISCRGroupTreeNode); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const GroupTreeNode: ISCRGroupTreeNode); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const GroupTreeNode: ISCRGroupTreeNode): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRGroupTreeNode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C5D4E9DD-615A-4FAF-9B82-9111BB6C918D}
// *********************************************************************//
  ISCRGroupTreeNode = interface(IDispatch)
    ['{C5D4E9DD-615A-4FAF-9B82-9111BB6C918D}']
    function  Clone(DeepClone: WordBool): ISCRGroupTreeNode; safecall;
    procedure CopyTo(const GroupTreeNode: ISCRGroupTreeNode; DeepCopy: WordBool); safecall;
    function  Equals(const GroupTreeNode: ISCRGroupTreeNode): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_GroupName: WideString; safecall;
    procedure Set_GroupName(const pVal: WideString); safecall;
    function  Get_GroupLevel: LongWord; safecall;
    procedure Set_GroupLevel(pVal: LongWord); safecall;
    function  Get_GroupPath: OleVariant; safecall;
    procedure Set_GroupPath(pVal: OleVariant); safecall;
    function  Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pVal: WordBool); safecall;
    function  Get_SubGroupNodes: ISCRGroupTreeNodes; safecall;
    procedure Set_SubGroupNodes(const pVal: ISCRGroupTreeNodes); safecall;
    function  Get_IsHierarchicalGroup: WordBool; safecall;
    procedure Set_IsHierarchicalGroup(pVal: WordBool); safecall;
    function  Get_IsNewQueryNeededForChildren: WordBool; safecall;
    procedure Set_IsNewQueryNeededForChildren(pVal: WordBool); safecall;
    function  Get_IsNodeExpanded: WordBool; safecall;
    procedure Set_IsNodeExpanded(pVal: WordBool); safecall;
    function  Get_IsDrillDownNode: WordBool; safecall;
    procedure Set_IsDrillDownNode(pVal: WordBool); safecall;
    function  Get_NumberOfChildren: Integer; safecall;
    procedure Set_NumberOfChildren(pVal: Integer); safecall;
    function  Get_LevelInHierarchy: Integer; safecall;
    procedure Set_LevelInHierarchy(pVal: Integer); safecall;
    procedure GetGroupInfo(out ppGroupTreeNodeID: ISCRGroupTreeNodeID); safecall;
    procedure IsEqualByPath(path: OleVariant; out pEqual: WordBool); safecall;
    procedure IsEqualByName(const GroupName: WideString; out pEqual: WordBool); safecall;
    procedure GetNumberOfLoadedSubgroups(out pSubgroupNo: Integer); safecall;
    procedure GetNthSubgroup(Index: Integer; out ppSubgroupNode: ISCRGroupTreeNode); safecall;
    procedure GetLastSubgroup(out ppSubgroupNode: ISCRGroupTreeNode); safecall;
    procedure AddSubgroup(const pSubgroupNode: ISCRGroupTreeNode); safecall;
    property ClassName: WideString read Get_ClassName;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property GroupLevel: LongWord read Get_GroupLevel write Set_GroupLevel;
    property GroupPath: OleVariant read Get_GroupPath write Set_GroupPath;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property SubGroupNodes: ISCRGroupTreeNodes read Get_SubGroupNodes write Set_SubGroupNodes;
    property IsHierarchicalGroup: WordBool read Get_IsHierarchicalGroup write Set_IsHierarchicalGroup;
    property IsNewQueryNeededForChildren: WordBool read Get_IsNewQueryNeededForChildren write Set_IsNewQueryNeededForChildren;
    property IsNodeExpanded: WordBool read Get_IsNodeExpanded write Set_IsNodeExpanded;
    property IsDrillDownNode: WordBool read Get_IsDrillDownNode write Set_IsDrillDownNode;
    property NumberOfChildren: Integer read Get_NumberOfChildren write Set_NumberOfChildren;
    property LevelInHierarchy: Integer read Get_LevelInHierarchy write Set_LevelInHierarchy;
  end;

// *********************************************************************//
// DispIntf:  ISCRGroupTreeNodeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C5D4E9DD-615A-4FAF-9B82-9111BB6C918D}
// *********************************************************************//
  ISCRGroupTreeNodeDisp = dispinterface
    ['{C5D4E9DD-615A-4FAF-9B82-9111BB6C918D}']
    function  Clone(DeepClone: WordBool): ISCRGroupTreeNode; dispid 1001;
    procedure CopyTo(const GroupTreeNode: ISCRGroupTreeNode; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GroupTreeNode: ISCRGroupTreeNode): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property GroupName: WideString dispid 1;
    property GroupLevel: LongWord dispid 2;
    property GroupPath: OleVariant dispid 3;
    property IsVisible: WordBool dispid 4;
    property SubGroupNodes: ISCRGroupTreeNodes dispid 5;
    property IsHierarchicalGroup: WordBool dispid 6;
    property IsNewQueryNeededForChildren: WordBool dispid 7;
    property IsNodeExpanded: WordBool dispid 8;
    property IsDrillDownNode: WordBool dispid 9;
    property NumberOfChildren: Integer dispid 10;
    property LevelInHierarchy: Integer dispid 11;
    procedure GetGroupInfo(out ppGroupTreeNodeID: ISCRGroupTreeNodeID); dispid 12;
    procedure IsEqualByPath(path: OleVariant; out pEqual: WordBool); dispid 13;
    procedure IsEqualByName(const GroupName: WideString; out pEqual: WordBool); dispid 14;
    procedure GetNumberOfLoadedSubgroups(out pSubgroupNo: Integer); dispid 16;
    procedure GetNthSubgroup(Index: Integer; out ppSubgroupNode: ISCRGroupTreeNode); dispid 17;
    procedure GetLastSubgroup(out ppSubgroupNode: ISCRGroupTreeNode); dispid 18;
    procedure AddSubgroup(const pSubgroupNode: ISCRGroupTreeNode); dispid 19;
  end;

// *********************************************************************//
// Interface: ISCRGroupTreeNodeEx
// Flags:     (16) Hidden
// GUID:      {4323E1B8-194E-4651-81A4-A77E7F03FD2B}
// *********************************************************************//
  ISCRGroupTreeNodeEx = interface(IUnknown)
    ['{4323E1B8-194E-4651-81A4-A77E7F03FD2B}']
    function  getGroupName(out pVal: PWideChar): HResult; stdcall;
    function  setGroupName(newVal: PWideChar): HResult; stdcall;
    function  getGroupPath(out pcSize: LongWord; out pVal: PUINT1): HResult; stdcall;
    function  setGroupPath(cSize: LongWord; var newVal: LongWord): HResult; stdcall;
    function  IsEqualByPath(cSize: LongWord; var pPath: LongWord; out pEqual: Shortint): HResult; stdcall;
    function  IsEqualByName(pGroupName: PWideChar; out pEqual: Shortint): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRGroupTree
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A91CEB69-21B1-41E1-A12B-03119711A4C9}
// *********************************************************************//
  ISCRGroupTree = interface(IDispatch)
    ['{A91CEB69-21B1-41E1-A12B-03119711A4C9}']
    function  Clone(DeepClone: WordBool): ISCRGroupTree; safecall;
    procedure CopyTo(const GroupTree: ISCRGroupTree; DeepCopy: WordBool); safecall;
    function  Equals(const GroupTree: ISCRGroupTree): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_TreeRoot: ISCRGroupTreeNode; safecall;
    procedure Set_TreeRoot(const pVal: ISCRGroupTreeNode); safecall;
    function  Get_IsHierarchicalTree: WordBool; safecall;
    procedure Set_IsHierarchicalTree(pVal: WordBool); safecall;
    procedure FindSubtreeByNodeID(const pNodeID: ISCRGroupTreeNodeID; out ppSubTree: ISCRGroupTree); safecall;
    procedure FindSubtreeByArrayPath(GroupPath: OleVariant; out ppSubTree: ISCRGroupTree); safecall;
    procedure FindSubtreeByArrayPathEx(GroupPath: OleVariant; out ppSubTree: ISCRGroupTree; 
                                       out ppParentNode: ISCRGroupTreeNode); safecall;
    procedure FindSubtreeByBSTRPath(const GroupPath: WideString; out ppSubTree: ISCRGroupTree); safecall;
    property ClassName: WideString read Get_ClassName;
    property TreeRoot: ISCRGroupTreeNode read Get_TreeRoot write Set_TreeRoot;
    property IsHierarchicalTree: WordBool read Get_IsHierarchicalTree write Set_IsHierarchicalTree;
  end;

// *********************************************************************//
// DispIntf:  ISCRGroupTreeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A91CEB69-21B1-41E1-A12B-03119711A4C9}
// *********************************************************************//
  ISCRGroupTreeDisp = dispinterface
    ['{A91CEB69-21B1-41E1-A12B-03119711A4C9}']
    function  Clone(DeepClone: WordBool): ISCRGroupTree; dispid 1001;
    procedure CopyTo(const GroupTree: ISCRGroupTree; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GroupTree: ISCRGroupTree): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property TreeRoot: ISCRGroupTreeNode dispid 1;
    property IsHierarchicalTree: WordBool dispid 2;
    procedure FindSubtreeByNodeID(const pNodeID: ISCRGroupTreeNodeID; out ppSubTree: ISCRGroupTree); dispid 3;
    procedure FindSubtreeByArrayPath(GroupPath: OleVariant; out ppSubTree: ISCRGroupTree); dispid 4;
    procedure FindSubtreeByArrayPathEx(GroupPath: OleVariant; out ppSubTree: ISCRGroupTree; 
                                       out ppParentNode: ISCRGroupTreeNode); dispid 5;
    procedure FindSubtreeByBSTRPath(const GroupPath: WideString; out ppSubTree: ISCRGroupTree); dispid 6;
  end;

// *********************************************************************//
// Interface: ISCRToolbar
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {952C196D-9307-4A58-9F92-96C18354CAC7}
// *********************************************************************//
  ISCRToolbar = interface(IDispatch)
    ['{952C196D-9307-4A58-9F92-96C18354CAC7}']
    function  Get_Left: Double; safecall;
    procedure Set_Left(pVal: Double); safecall;
    function  Get_Top: Double; safecall;
    procedure Set_Top(pVal: Double); safecall;
    function  Get_Width: Double; safecall;
    procedure Set_Width(pVal: Double); safecall;
    function  Get_Height: Double; safecall;
    procedure Set_Height(pVal: Double); safecall;
    function  Get_LeftUnit: WideString; safecall;
    procedure Set_LeftUnit(pVal: PWideChar); safecall;
    function  Get_TopUnit: WideString; safecall;
    procedure Set_TopUnit(pVal: PWideChar); safecall;
    function  Get_WidthUnit: WideString; safecall;
    procedure Set_WidthUnit(pVal: PWideChar); safecall;
    function  Get_HeightUnit: WideString; safecall;
    procedure Set_HeightUnit(pVal: PWideChar); safecall;
    function  Get_Controls: ISCRToolbarControls; safecall;
    procedure Set_Controls(const pVal: ISCRToolbarControls); safecall;
    function  Get_StyleClassName: WideString; safecall;
    procedure Set_StyleClassName(const pVal: WideString); safecall;
    function  GetLeftAndUnit: WideString; safecall;
    function  GetTopAndUnit: WideString; safecall;
    function  GetWidthAndUnit: WideString; safecall;
    function  GetHeightAndUnit: WideString; safecall;
    procedure InsertToolbarAt(nIndex: Integer; const pToolbarControls: ISCRToolbarControls); safecall;
    function  Get_VerticalAlignment: WideString; safecall;
    procedure Set_VerticalAlignment(const pVal: WideString); safecall;
    function  FindElementWithName(const bstrNameToFind: WideString): Integer; safecall;
    function  Get_Name: WideString; safecall;
    procedure Set_Name(const pVal: WideString); safecall;
    property Left: Double read Get_Left write Set_Left;
    property Top: Double read Get_Top write Set_Top;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Controls: ISCRToolbarControls read Get_Controls write Set_Controls;
    property StyleClassName: WideString read Get_StyleClassName write Set_StyleClassName;
    property VerticalAlignment: WideString read Get_VerticalAlignment write Set_VerticalAlignment;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  ISCRToolbarDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {952C196D-9307-4A58-9F92-96C18354CAC7}
// *********************************************************************//
  ISCRToolbarDisp = dispinterface
    ['{952C196D-9307-4A58-9F92-96C18354CAC7}']
    property Left: Double dispid 1;
    property Top: Double dispid 2;
    property Width: Double dispid 3;
    property Height: Double dispid 4;
    function  LeftUnit: WideString; dispid 5;
    function  TopUnit: WideString; dispid 6;
    function  WidthUnit: WideString; dispid 7;
    function  HeightUnit: WideString; dispid 8;
    property Controls: ISCRToolbarControls dispid 9;
    property StyleClassName: WideString dispid 10;
    function  GetLeftAndUnit: WideString; dispid 11;
    function  GetTopAndUnit: WideString; dispid 12;
    function  GetWidthAndUnit: WideString; dispid 13;
    function  GetHeightAndUnit: WideString; dispid 14;
    procedure InsertToolbarAt(nIndex: Integer; const pToolbarControls: ISCRToolbarControls); dispid 15;
    property VerticalAlignment: WideString dispid 16;
    function  FindElementWithName(const bstrNameToFind: WideString): Integer; dispid 17;
    property Name: WideString dispid 18;
  end;

// *********************************************************************//
// Interface: ISCRToolbarControls
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A89BBC1-798C-4980-9758-7DFB83FAFEEB}
// *********************************************************************//
  ISCRToolbarControls = interface(IDispatch)
    ['{8A89BBC1-798C-4980-9758-7DFB83FAFEEB}']
    function  Clone(DeepClone: WordBool): ISCRToolbarControls; safecall;
    procedure CopyTo(const ToolbarControls: ISCRToolbarControls; DeepCopy: WordBool); safecall;
    function  Equals(const ToolbarControls: ISCRToolbarControls): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRToolbarControlBase; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRToolbarControlBase); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const ToolbarControlBase: ISCRToolbarControlBase); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const ToolbarControlBase: ISCRToolbarControlBase); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const ToolbarControlBase: ISCRToolbarControlBase): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRToolbarControlBase read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRToolbarControlsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A89BBC1-798C-4980-9758-7DFB83FAFEEB}
// *********************************************************************//
  ISCRToolbarControlsDisp = dispinterface
    ['{8A89BBC1-798C-4980-9758-7DFB83FAFEEB}']
    function  Clone(DeepClone: WordBool): ISCRToolbarControls; dispid 1001;
    procedure CopyTo(const ToolbarControls: ISCRToolbarControls; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ToolbarControls: ISCRToolbarControls): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRToolbarControlBase dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const ToolbarControlBase: ISCRToolbarControlBase); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const ToolbarControlBase: ISCRToolbarControlBase); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const ToolbarControlBase: ISCRToolbarControlBase): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRToolbarControlBase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B7B8C925-937E-4323-ADB2-D57AFE14B50F}
// *********************************************************************//
  ISCRToolbarControlBase = interface(IDispatch)
    ['{B7B8C925-937E-4323-ADB2-D57AFE14B50F}']
    function  Clone(DeepClone: WordBool): ISCRToolbarControlBase; safecall;
    procedure CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; DeepCopy: WordBool); safecall;
    function  Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_Name: WideString; safecall;
    procedure Set_Name(pVal: PWideChar); safecall;
    function  Get_Width: Double; safecall;
    procedure Set_Width(pVal: Double); safecall;
    function  Get_Height: Double; safecall;
    procedure Set_Height(pVal: Double); safecall;
    function  Get_WidthUnit: WideString; safecall;
    procedure Set_WidthUnit(pVal: PWideChar); safecall;
    function  Get_HeightUnit: WideString; safecall;
    procedure Set_HeightUnit(pVal: PWideChar); safecall;
    function  Get_Kind: CrToolbarControlKindEnum; safecall;
    procedure Set_Kind(pVal: CrToolbarControlKindEnum); safecall;
    function  Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pVal: WordBool); safecall;
    function  Get_Action: WideString; safecall;
    procedure Set_Action(pVal: PWideChar); safecall;
    function  Get_DisplayName: WideString; safecall;
    procedure Set_DisplayName(pVal: PWideChar); safecall;
    function  Get_ImageName: WideString; safecall;
    procedure Set_ImageName(pVal: PWideChar); safecall;
    function  Get_IsClientSide: WordBool; safecall;
    procedure Set_IsClientSide(pVal: WordBool); safecall;
    procedure GetWidthAndUnit(out pVal: WideString); safecall;
    procedure GetHeightAndUnit(out pVal: WideString); safecall;
    function  Get_StyleClassName: WideString; safecall;
    procedure Set_StyleClassName(pVal: PWideChar); safecall;
    property ClassName: WideString read Get_ClassName;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Kind: CrToolbarControlKindEnum read Get_Kind write Set_Kind;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property IsClientSide: WordBool read Get_IsClientSide write Set_IsClientSide;
  end;

// *********************************************************************//
// DispIntf:  ISCRToolbarControlBaseDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B7B8C925-937E-4323-ADB2-D57AFE14B50F}
// *********************************************************************//
  ISCRToolbarControlBaseDisp = dispinterface
    ['{B7B8C925-937E-4323-ADB2-D57AFE14B50F}']
    function  Clone(DeepClone: WordBool): ISCRToolbarControlBase; dispid 1001;
    procedure CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    function  Name: WideString; dispid 1;
    property Width: Double dispid 2;
    property Height: Double dispid 3;
    function  WidthUnit: WideString; dispid 4;
    function  HeightUnit: WideString; dispid 5;
    property Kind: CrToolbarControlKindEnum dispid 6;
    property Enabled: WordBool dispid 7;
    function  Action: WideString; dispid 8;
    function  DisplayName: WideString; dispid 9;
    function  ImageName: WideString; dispid 10;
    property IsClientSide: WordBool dispid 11;
    procedure GetWidthAndUnit(out pVal: WideString); dispid 12;
    procedure GetHeightAndUnit(out pVal: WideString); dispid 13;
    function  StyleClassName: WideString; dispid 14;
  end;

// *********************************************************************//
// Interface: IGridColumnCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A7D4BAEA-B9A6-4DAF-B572-163DC8845065}
// *********************************************************************//
  IGridColumnCollection = interface(IDispatch)
    ['{A7D4BAEA-B9A6-4DAF-B572-163DC8845065}']
    function  Clone(DeepClone: WordBool): IGridColumnCollection; safecall;
    procedure CopyTo(const GridColumnCollection: IGridColumnCollection; DeepCopy: WordBool); safecall;
    function  Equals(const GridColumnCollection: IGridColumnCollection): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): IGridColumn; safecall;
    procedure Set_Item(Index: Integer; const ppVal: IGridColumn); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const GridColumn: IGridColumn); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const GridColumn: IGridColumn); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const GridColumn: IGridColumn): Integer; safecall;
    function  AddGridColumn(const bstrFieldName: WideString): IGridColumn; safecall;
    procedure RemoveGridColumn(const bstrFieldName: WideString); safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: IGridColumn read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IGridColumnCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A7D4BAEA-B9A6-4DAF-B572-163DC8845065}
// *********************************************************************//
  IGridColumnCollectionDisp = dispinterface
    ['{A7D4BAEA-B9A6-4DAF-B572-163DC8845065}']
    function  Clone(DeepClone: WordBool): IGridColumnCollection; dispid 1001;
    procedure CopyTo(const GridColumnCollection: IGridColumnCollection; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GridColumnCollection: IGridColumnCollection): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: IGridColumn dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const GridColumn: IGridColumn); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const GridColumn: IGridColumn); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const GridColumn: IGridColumn): Integer; dispid 1016;
    function  AddGridColumn(const bstrFieldName: WideString): IGridColumn; dispid 100;
    procedure RemoveGridColumn(const bstrFieldName: WideString); dispid 101;
  end;

// *********************************************************************//
// Interface: IGridColumn
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E4FBA702-8CD1-4A8A-8D69-B86B6F5EFFB5}
// *********************************************************************//
  IGridColumn = interface(IDispatch)
    ['{E4FBA702-8CD1-4A8A-8D69-B86B6F5EFFB5}']
    function  Clone(DeepClone: WordBool): IGridColumn; safecall;
    procedure CopyTo(const GridColumn: IGridColumn; DeepCopy: WordBool); safecall;
    function  Equals(const GridColumn: IGridColumn): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_FieldName: WideString; safecall;
    procedure Set_FieldName(const pVal: WideString); safecall;
    function  Get_FormatPattern: WideString; safecall;
    procedure Set_FormatPattern(const pVal: WideString); safecall;
    function  Get_GroupLevel: Integer; safecall;
    procedure Set_GroupLevel(pVal: Integer); safecall;
    function  Get_StyleClassName: WideString; safecall;
    procedure Set_StyleClassName(const pVal: WideString); safecall;
    function  Get_ColumnVisibility: CrColumnVisibilityEnum; safecall;
    procedure Set_ColumnVisibility(pVal: CrColumnVisibilityEnum); safecall;
    function  Get_Heading: WideString; safecall;
    procedure Set_Heading(const pVal: WideString); safecall;
    property ClassName: WideString read Get_ClassName;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FormatPattern: WideString read Get_FormatPattern write Set_FormatPattern;
    property GroupLevel: Integer read Get_GroupLevel write Set_GroupLevel;
    property StyleClassName: WideString read Get_StyleClassName write Set_StyleClassName;
    property ColumnVisibility: CrColumnVisibilityEnum read Get_ColumnVisibility write Set_ColumnVisibility;
    property Heading: WideString read Get_Heading write Set_Heading;
  end;

// *********************************************************************//
// DispIntf:  IGridColumnDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E4FBA702-8CD1-4A8A-8D69-B86B6F5EFFB5}
// *********************************************************************//
  IGridColumnDisp = dispinterface
    ['{E4FBA702-8CD1-4A8A-8D69-B86B6F5EFFB5}']
    function  Clone(DeepClone: WordBool): IGridColumn; dispid 1001;
    procedure CopyTo(const GridColumn: IGridColumn; DeepCopy: WordBool); dispid 1002;
    function  Equals(const GridColumn: IGridColumn): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property FieldName: WideString dispid 1;
    property FormatPattern: WideString dispid 2;
    property GroupLevel: Integer dispid 3;
    property StyleClassName: WideString dispid 4;
    property ColumnVisibility: CrColumnVisibilityEnum dispid 5;
    property Heading: WideString dispid 6;
  end;

// *********************************************************************//
// Interface: ICRGridContent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B6A545F8-E6B1-4EE3-879B-AB93C943B99C}
// *********************************************************************//
  ICRGridContent = interface(IDispatch)
    ['{B6A545F8-E6B1-4EE3-879B-AB93C943B99C}']
    function  Get_Cursor: ISCRCursor; safecall;
    procedure Set_Cursor(const pVal: ISCRCursor); safecall;
    function  Get_Captions: ISCRStrings; safecall;
    procedure Set_Captions(const pVal: ISCRStrings); safecall;
    function  Get_PageSize: Integer; safecall;
    procedure Set_PageSize(pVal: Integer); safecall;
    function  Get_StartRecordNumber: Integer; safecall;
    procedure Set_StartRecordNumber(pVal: Integer); safecall;
    function  Get_CaptionStyle: WideString; safecall;
    procedure Set_CaptionStyle(const pVal: WideString); safecall;
    function  Get_ContentStyle: WideString; safecall;
    procedure Set_ContentStyle(const pVal: WideString); safecall;
    function  Get_Title: WideString; safecall;
    procedure Set_Title(const pVal: WideString); safecall;
    function  Get_TitleStyle: WideString; safecall;
    procedure Set_TitleStyle(const pVal: WideString); safecall;
    function  Get_TopToolbar: ISCRToolbar; safecall;
    procedure Set_TopToolbar(const pVal: ISCRToolbar); safecall;
    function  Get_BottomToolbar: ISCRToolbar; safecall;
    procedure Set_BottomToolbar(const pVal: ISCRToolbar); safecall;
    function  Get_GridColumnCollection: IGridColumnCollection; safecall;
    procedure Set_GridColumnCollection(const pVal: IGridColumnCollection); safecall;
    function  Get_Groups: ISCRGroups; safecall;
    procedure Set_Groups(const pVal: ISCRGroups); safecall;
    function  Get_TableStyle: WideString; safecall;
    procedure Set_TableStyle(const pVal: WideString); safecall;
    function  Get_DisplayRecordNumber: WordBool; safecall;
    procedure Set_DisplayRecordNumber(pVal: WordBool); safecall;
    function  Get_IsGridAlignedWithToolbar: WordBool; safecall;
    procedure Set_IsGridAlignedWithToolbar(pVal: WordBool); safecall;
    function  Get_RecordNumberStyle: WideString; safecall;
    procedure Set_RecordNumberStyle(const pVal: WideString); safecall;
    function  Get_DisplayHyperlink: WordBool; safecall;
    procedure Set_DisplayHyperlink(pVal: WordBool); safecall;
    function  Get_AlternateContentStyle: WideString; safecall;
    procedure Set_AlternateContentStyle(const pVal: WideString); safecall;
    property Cursor: ISCRCursor read Get_Cursor write Set_Cursor;
    property Captions: ISCRStrings read Get_Captions write Set_Captions;
    property PageSize: Integer read Get_PageSize write Set_PageSize;
    property StartRecordNumber: Integer read Get_StartRecordNumber write Set_StartRecordNumber;
    property CaptionStyle: WideString read Get_CaptionStyle write Set_CaptionStyle;
    property ContentStyle: WideString read Get_ContentStyle write Set_ContentStyle;
    property Title: WideString read Get_Title write Set_Title;
    property TitleStyle: WideString read Get_TitleStyle write Set_TitleStyle;
    property TopToolbar: ISCRToolbar read Get_TopToolbar write Set_TopToolbar;
    property BottomToolbar: ISCRToolbar read Get_BottomToolbar write Set_BottomToolbar;
    property GridColumnCollection: IGridColumnCollection read Get_GridColumnCollection write Set_GridColumnCollection;
    property Groups: ISCRGroups read Get_Groups write Set_Groups;
    property TableStyle: WideString read Get_TableStyle write Set_TableStyle;
    property DisplayRecordNumber: WordBool read Get_DisplayRecordNumber write Set_DisplayRecordNumber;
    property IsGridAlignedWithToolbar: WordBool read Get_IsGridAlignedWithToolbar write Set_IsGridAlignedWithToolbar;
    property RecordNumberStyle: WideString read Get_RecordNumberStyle write Set_RecordNumberStyle;
    property DisplayHyperlink: WordBool read Get_DisplayHyperlink write Set_DisplayHyperlink;
    property AlternateContentStyle: WideString read Get_AlternateContentStyle write Set_AlternateContentStyle;
  end;

// *********************************************************************//
// DispIntf:  ICRGridContentDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B6A545F8-E6B1-4EE3-879B-AB93C943B99C}
// *********************************************************************//
  ICRGridContentDisp = dispinterface
    ['{B6A545F8-E6B1-4EE3-879B-AB93C943B99C}']
    property Cursor: ISCRCursor dispid 1;
    property Captions: ISCRStrings dispid 2;
    property PageSize: Integer dispid 3;
    property StartRecordNumber: Integer dispid 4;
    property CaptionStyle: WideString dispid 5;
    property ContentStyle: WideString dispid 6;
    property Title: WideString dispid 7;
    property TitleStyle: WideString dispid 8;
    property TopToolbar: ISCRToolbar dispid 9;
    property BottomToolbar: ISCRToolbar dispid 10;
    property GridColumnCollection: IGridColumnCollection dispid 11;
    property Groups: ISCRGroups dispid 12;
    property TableStyle: WideString dispid 13;
    property DisplayRecordNumber: WordBool dispid 14;
    property IsGridAlignedWithToolbar: WordBool dispid 15;
    property RecordNumberStyle: WideString dispid 16;
    property DisplayHyperlink: WordBool dispid 17;
    property AlternateContentStyle: WideString dispid 18;
  end;

// *********************************************************************//
// Interface: ISCREPFFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A61E7792-3E6E-4C11-8BBF-A302B50A9991}
// *********************************************************************//
  ISCREPFFactory = interface(IDispatch)
    ['{A61E7792-3E6E-4C11-8BBF-A302B50A9991}']
    function  GetPageObject(epfData: OleVariant): ISCRPageObjectInstance; safecall;
    function  GetLocaleSpecificPageObject(epfData: OleVariant; locale: LongWord): ISCRPageObjectInstance; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISCREPFFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A61E7792-3E6E-4C11-8BBF-A302B50A9991}
// *********************************************************************//
  ISCREPFFactoryDisp = dispinterface
    ['{A61E7792-3E6E-4C11-8BBF-A302B50A9991}']
    function  GetPageObject(epfData: OleVariant): ISCRPageObjectInstance; dispid 1;
    function  GetLocaleSpecificPageObject(epfData: OleVariant; locale: LongWord): ISCRPageObjectInstance; dispid 2;
  end;

// *********************************************************************//
// Interface: ISCRETFFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F2FDE6FE-8E54-4257-84C9-3CA9AF4A8B4A}
// *********************************************************************//
  ISCRETFFactory = interface(IDispatch)
    ['{F2FDE6FE-8E54-4257-84C9-3CA9AF4A8B4A}']
    function  GetGroupTree(etfData: OleVariant): ISCRGroupTree; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISCRETFFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F2FDE6FE-8E54-4257-84C9-3CA9AF4A8B4A}
// *********************************************************************//
  ISCRETFFactoryDisp = dispinterface
    ['{F2FDE6FE-8E54-4257-84C9-3CA9AF4A8B4A}']
    function  GetGroupTree(etfData: OleVariant): ISCRGroupTree; dispid 1;
  end;

// *********************************************************************//
// Interface: ISCRToolbarControlBaseEx
// Flags:     (16) Hidden
// GUID:      {3C0FA78D-164D-4A07-8245-8E88B4A29408}
// *********************************************************************//
  ISCRToolbarControlBaseEx = interface(IUnknown)
    ['{3C0FA78D-164D-4A07-8245-8E88B4A29408}']
    function  getName(out pVal: PWideChar): HResult; stdcall;
    function  getWidthUnit(out pVal: PWideChar): HResult; stdcall;
    function  getHeightUnit(out pVal: PWideChar): HResult; stdcall;
    function  getAction(out pVal: PWideChar): HResult; stdcall;
    function  getDisplayName(out pVal: PWideChar): HResult; stdcall;
    function  getImageName(out pVal: PWideChar): HResult; stdcall;
    function  GetWidthAndUnit(out pVal: PWideChar): HResult; stdcall;
    function  GetHeightAndUnit(out pVal: PWideChar): HResult; stdcall;
    function  getStyleClassName(out pVal: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRToolbarButtonControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {71BAEA56-9369-4CA4-83D9-86844DA0CD71}
// *********************************************************************//
  ISCRToolbarButtonControl = interface(ISCRToolbarControlBase)
    ['{71BAEA56-9369-4CA4-83D9-86844DA0CD71}']
    function  Get_PartnerControl: ISCRToolbarControlBase; safecall;
    procedure Set_PartnerControl(const pVal: ISCRToolbarControlBase); safecall;
    function  Get_FlyOverImage: WideString; safecall;
    procedure Set_FlyOverImage(pVal: PWideChar); safecall;
    function  Get_Target: WideString; safecall;
    procedure Set_Target(pVal: PWideChar); safecall;
    function  Get_TextValue: WideString; safecall;
    procedure Set_TextValue(pVal: PWideChar); safecall;
    function  Get_Tooltip: WideString; safecall;
    procedure Set_Tooltip(pVal: PWideChar); safecall;
    function  Get_UseButton: WordBool; safecall;
    procedure Set_UseButton(pVal: WordBool); safecall;
    property PartnerControl: ISCRToolbarControlBase read Get_PartnerControl write Set_PartnerControl;
    property UseButton: WordBool read Get_UseButton write Set_UseButton;
  end;

// *********************************************************************//
// DispIntf:  ISCRToolbarButtonControlDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {71BAEA56-9369-4CA4-83D9-86844DA0CD71}
// *********************************************************************//
  ISCRToolbarButtonControlDisp = dispinterface
    ['{71BAEA56-9369-4CA4-83D9-86844DA0CD71}']
    property PartnerControl: ISCRToolbarControlBase dispid 21;
    function  FlyOverImage: WideString; dispid 22;
    function  Target: WideString; dispid 23;
    function  TextValue: WideString; dispid 24;
    function  Tooltip: WideString; dispid 25;
    property UseButton: WordBool dispid 26;
    function  Clone(DeepClone: WordBool): ISCRToolbarControlBase; dispid 1001;
    procedure CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    function  Name: WideString; dispid 1;
    property Width: Double dispid 2;
    property Height: Double dispid 3;
    function  WidthUnit: WideString; dispid 4;
    function  HeightUnit: WideString; dispid 5;
    property Kind: CrToolbarControlKindEnum dispid 6;
    property Enabled: WordBool dispid 7;
    function  Action: WideString; dispid 8;
    function  DisplayName: WideString; dispid 9;
    function  ImageName: WideString; dispid 10;
    property IsClientSide: WordBool dispid 11;
    procedure GetWidthAndUnit(out pVal: WideString); dispid 12;
    procedure GetHeightAndUnit(out pVal: WideString); dispid 13;
    function  StyleClassName: WideString; dispid 14;
  end;

// *********************************************************************//
// Interface: ISCRToolbarButtonControlEx
// Flags:     (16) Hidden
// GUID:      {9C5DA9BA-AFB7-4F28-928C-274BD855B6AB}
// *********************************************************************//
  ISCRToolbarButtonControlEx = interface(IUnknown)
    ['{9C5DA9BA-AFB7-4F28-928C-274BD855B6AB}']
    function  getFlyOverImage(out pVal: PWideChar): HResult; stdcall;
    function  getTarget(out pVal: PWideChar): HResult; stdcall;
    function  getTextValue(out pVal: PWideChar): HResult; stdcall;
    function  getTooltip(out pVal: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRToolbarListItem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D269B38F-1DED-4493-B326-DDFCECB224DB}
// *********************************************************************//
  ISCRToolbarListItem = interface(IDispatch)
    ['{D269B38F-1DED-4493-B326-DDFCECB224DB}']
    function  Clone(DeepClone: WordBool): ISCRToolbarListItem; safecall;
    procedure CopyTo(const ToolbarListItem: ISCRToolbarListItem; DeepCopy: WordBool); safecall;
    function  Equals(const ToolbarListItem: ISCRToolbarListItem): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get_DisplayName: WideString; safecall;
    procedure Set_DisplayName(pVal: PWideChar); safecall;
    function  Get_Value: WideString; safecall;
    procedure Set_Value(pVal: PWideChar); safecall;
    property ClassName: WideString read Get_ClassName;
  end;

// *********************************************************************//
// DispIntf:  ISCRToolbarListItemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D269B38F-1DED-4493-B326-DDFCECB224DB}
// *********************************************************************//
  ISCRToolbarListItemDisp = dispinterface
    ['{D269B38F-1DED-4493-B326-DDFCECB224DB}']
    function  Clone(DeepClone: WordBool): ISCRToolbarListItem; dispid 1001;
    procedure CopyTo(const ToolbarListItem: ISCRToolbarListItem; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ToolbarListItem: ISCRToolbarListItem): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    function  DisplayName: WideString; dispid 1;
    function  Value: WideString; dispid 2;
  end;

// *********************************************************************//
// Interface: ISCRToolbarListItemEx
// Flags:     (16) Hidden
// GUID:      {2EC347AD-E83C-4542-899B-01165C87F1A7}
// *********************************************************************//
  ISCRToolbarListItemEx = interface(IUnknown)
    ['{2EC347AD-E83C-4542-899B-01165C87F1A7}']
    function  getDisplayName(out pVal: PWideChar): HResult; stdcall;
    function  getValue(out pVal: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISCRToolbarListItemCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6BED962C-A63D-43B0-B347-3CE8EFC0227A}
// *********************************************************************//
  ISCRToolbarListItemCollection = interface(IDispatch)
    ['{6BED962C-A63D-43B0-B347-3CE8EFC0227A}']
    function  Clone(DeepClone: WordBool): ISCRToolbarListItemCollection; safecall;
    procedure CopyTo(const ToolbarListItemCollection: ISCRToolbarListItemCollection; 
                     DeepCopy: WordBool); safecall;
    function  Equals(const ToolbarListItemCollection: ISCRToolbarListItemCollection): WordBool; safecall;
    function  Get_ClassName: WideString; safecall;
    function  Get__NewEnum: IUnknown; safecall;
    function  Get_Item(Index: Integer): ISCRToolbarListItem; safecall;
    procedure Set_Item(Index: Integer; const ppVal: ISCRToolbarListItem); safecall;
    function  Get_Count: Integer; safecall;
    procedure Add(const ToolbarListItem: ISCRToolbarListItem); safecall;
    procedure Remove(Index: Integer); safecall;
    procedure Insert(Index: Integer; const ToolbarListItem: ISCRToolbarListItem); safecall;
    procedure RemoveAll; safecall;
    procedure EnsureCapacity(MaxCapacity: Integer); safecall;
    function  FindIndexOf(const ToolbarListItem: ISCRToolbarListItem): Integer; safecall;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRToolbarListItem read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ISCRToolbarListItemCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6BED962C-A63D-43B0-B347-3CE8EFC0227A}
// *********************************************************************//
  ISCRToolbarListItemCollectionDisp = dispinterface
    ['{6BED962C-A63D-43B0-B347-3CE8EFC0227A}']
    function  Clone(DeepClone: WordBool): ISCRToolbarListItemCollection; dispid 1001;
    procedure CopyTo(const ToolbarListItemCollection: ISCRToolbarListItemCollection; 
                     DeepCopy: WordBool); dispid 1002;
    function  Equals(const ToolbarListItemCollection: ISCRToolbarListItemCollection): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[Index: Integer]: ISCRToolbarListItem dispid 0; default;
    property Count: Integer readonly dispid 1010;
    procedure Add(const ToolbarListItem: ISCRToolbarListItem); dispid 1011;
    procedure Remove(Index: Integer); dispid 1012;
    procedure Insert(Index: Integer; const ToolbarListItem: ISCRToolbarListItem); dispid 1013;
    procedure RemoveAll; dispid 1014;
    procedure EnsureCapacity(MaxCapacity: Integer); dispid 1015;
    function  FindIndexOf(const ToolbarListItem: ISCRToolbarListItem): Integer; dispid 1016;
  end;

// *********************************************************************//
// Interface: ISCRToolbarComboBoxControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {90307F79-690F-4FE1-B884-126BA55A975B}
// *********************************************************************//
  ISCRToolbarComboBoxControl = interface(ISCRToolbarControlBase)
    ['{90307F79-690F-4FE1-B884-126BA55A975B}']
    function  Get_ListItems: ISCRToolbarListItemCollection; safecall;
    procedure Set_ListItems(const pVal: ISCRToolbarListItemCollection); safecall;
    function  Get_SelectedIndex: Integer; safecall;
    procedure Set_SelectedIndex(pVal: Integer); safecall;
    function  Get_ClientSidePrefix: WideString; safecall;
    procedure Set_ClientSidePrefix(pVal: PWideChar); safecall;
    function  Get_ClientSideSuffix: WideString; safecall;
    procedure Set_ClientSideSuffix(pVal: PWideChar); safecall;
    function  Get_MaxItemsPerMenu: Integer; safecall;
    procedure Set_MaxItemsPerMenu(pVal: Integer); safecall;
    function  Get_MenuNumber: Integer; safecall;
    procedure Set_MenuNumber(pVal: Integer); safecall;
    function  Get_Left: Double; safecall;
    procedure Set_Left(pVal: Double); safecall;
    function  Get_Top: Double; safecall;
    procedure Set_Top(pVal: Double); safecall;
    property ListItems: ISCRToolbarListItemCollection read Get_ListItems write Set_ListItems;
    property SelectedIndex: Integer read Get_SelectedIndex write Set_SelectedIndex;
    property MaxItemsPerMenu: Integer read Get_MaxItemsPerMenu write Set_MaxItemsPerMenu;
    property MenuNumber: Integer read Get_MenuNumber write Set_MenuNumber;
    property Left: Double read Get_Left write Set_Left;
    property Top: Double read Get_Top write Set_Top;
  end;

// *********************************************************************//
// DispIntf:  ISCRToolbarComboBoxControlDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {90307F79-690F-4FE1-B884-126BA55A975B}
// *********************************************************************//
  ISCRToolbarComboBoxControlDisp = dispinterface
    ['{90307F79-690F-4FE1-B884-126BA55A975B}']
    property ListItems: ISCRToolbarListItemCollection dispid 21;
    property SelectedIndex: Integer dispid 22;
    function  ClientSidePrefix: WideString; dispid 23;
    function  ClientSideSuffix: WideString; dispid 24;
    property MaxItemsPerMenu: Integer dispid 25;
    property MenuNumber: Integer dispid 26;
    property Left: Double dispid 27;
    property Top: Double dispid 28;
    function  Clone(DeepClone: WordBool): ISCRToolbarControlBase; dispid 1001;
    procedure CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    function  Name: WideString; dispid 1;
    property Width: Double dispid 2;
    property Height: Double dispid 3;
    function  WidthUnit: WideString; dispid 4;
    function  HeightUnit: WideString; dispid 5;
    property Kind: CrToolbarControlKindEnum dispid 6;
    property Enabled: WordBool dispid 7;
    function  Action: WideString; dispid 8;
    function  DisplayName: WideString; dispid 9;
    function  ImageName: WideString; dispid 10;
    property IsClientSide: WordBool dispid 11;
    procedure GetWidthAndUnit(out pVal: WideString); dispid 12;
    procedure GetHeightAndUnit(out pVal: WideString); dispid 13;
    function  StyleClassName: WideString; dispid 14;
  end;

// *********************************************************************//
// Interface: ISCRToolbarLabelControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8595CE2B-75FD-4387-BEE7-FF0ACE995757}
// *********************************************************************//
  ISCRToolbarLabelControl = interface(ISCRToolbarControlBase)
    ['{8595CE2B-75FD-4387-BEE7-FF0ACE995757}']
    function  Get_LabelText: WideString; safecall;
    procedure Set_LabelText(pVal: PWideChar); safecall;
  end;

// *********************************************************************//
// DispIntf:  ISCRToolbarLabelControlDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8595CE2B-75FD-4387-BEE7-FF0ACE995757}
// *********************************************************************//
  ISCRToolbarLabelControlDisp = dispinterface
    ['{8595CE2B-75FD-4387-BEE7-FF0ACE995757}']
    function  LabelText: WideString; dispid 21;
    function  Clone(DeepClone: WordBool): ISCRToolbarControlBase; dispid 1001;
    procedure CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    function  Name: WideString; dispid 1;
    property Width: Double dispid 2;
    property Height: Double dispid 3;
    function  WidthUnit: WideString; dispid 4;
    function  HeightUnit: WideString; dispid 5;
    property Kind: CrToolbarControlKindEnum dispid 6;
    property Enabled: WordBool dispid 7;
    function  Action: WideString; dispid 8;
    function  DisplayName: WideString; dispid 9;
    function  ImageName: WideString; dispid 10;
    property IsClientSide: WordBool dispid 11;
    procedure GetWidthAndUnit(out pVal: WideString); dispid 12;
    procedure GetHeightAndUnit(out pVal: WideString); dispid 13;
    function  StyleClassName: WideString; dispid 14;
  end;

// *********************************************************************//
// Interface: ISCRToolbarSeparatorControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {378B71D8-D40D-49E3-AA63-2625AB27BC34}
// *********************************************************************//
  ISCRToolbarSeparatorControl = interface(ISCRToolbarControlBase)
    ['{378B71D8-D40D-49E3-AA63-2625AB27BC34}']
    function  Get_IsLineSeparator: WordBool; safecall;
    procedure Set_IsLineSeparator(pVal: WordBool); safecall;
    property IsLineSeparator: WordBool read Get_IsLineSeparator write Set_IsLineSeparator;
  end;

// *********************************************************************//
// DispIntf:  ISCRToolbarSeparatorControlDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {378B71D8-D40D-49E3-AA63-2625AB27BC34}
// *********************************************************************//
  ISCRToolbarSeparatorControlDisp = dispinterface
    ['{378B71D8-D40D-49E3-AA63-2625AB27BC34}']
    property IsLineSeparator: WordBool dispid 21;
    function  Clone(DeepClone: WordBool): ISCRToolbarControlBase; dispid 1001;
    procedure CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    function  Name: WideString; dispid 1;
    property Width: Double dispid 2;
    property Height: Double dispid 3;
    function  WidthUnit: WideString; dispid 4;
    function  HeightUnit: WideString; dispid 5;
    property Kind: CrToolbarControlKindEnum dispid 6;
    property Enabled: WordBool dispid 7;
    function  Action: WideString; dispid 8;
    function  DisplayName: WideString; dispid 9;
    function  ImageName: WideString; dispid 10;
    property IsClientSide: WordBool dispid 11;
    procedure GetWidthAndUnit(out pVal: WideString); dispid 12;
    procedure GetHeightAndUnit(out pVal: WideString); dispid 13;
    function  StyleClassName: WideString; dispid 14;
  end;

// *********************************************************************//
// Interface: ISCRToolbarTextBoxControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C69F41A6-22FB-4A2E-B210-39851E53BD12}
// *********************************************************************//
  ISCRToolbarTextBoxControl = interface(ISCRToolbarControlBase)
    ['{C69F41A6-22FB-4A2E-B210-39851E53BD12}']
    function  Get_DefaultText: WideString; safecall;
    procedure Set_DefaultText(pVal: PWideChar); safecall;
    function  Get_IsMultiLine: WordBool; safecall;
    procedure Set_IsMultiLine(pVal: WordBool); safecall;
    property IsMultiLine: WordBool read Get_IsMultiLine write Set_IsMultiLine;
  end;

// *********************************************************************//
// DispIntf:  ISCRToolbarTextBoxControlDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C69F41A6-22FB-4A2E-B210-39851E53BD12}
// *********************************************************************//
  ISCRToolbarTextBoxControlDisp = dispinterface
    ['{C69F41A6-22FB-4A2E-B210-39851E53BD12}']
    function  DefaultText: WideString; dispid 21;
    property IsMultiLine: WordBool dispid 22;
    function  Clone(DeepClone: WordBool): ISCRToolbarControlBase; dispid 1001;
    procedure CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; DeepCopy: WordBool); dispid 1002;
    function  Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool; dispid 1003;
    property ClassName: WideString readonly dispid 1004;
    function  Name: WideString; dispid 1;
    property Width: Double dispid 2;
    property Height: Double dispid 3;
    function  WidthUnit: WideString; dispid 4;
    function  HeightUnit: WideString; dispid 5;
    property Kind: CrToolbarControlKindEnum dispid 6;
    property Enabled: WordBool dispid 7;
    function  Action: WideString; dispid 8;
    function  DisplayName: WideString; dispid 9;
    function  ImageName: WideString; dispid 10;
    property IsClientSide: WordBool dispid 11;
    procedure GetWidthAndUnit(out pVal: WideString); dispid 12;
    procedure GetHeightAndUnit(out pVal: WideString); dispid 13;
    function  StyleClassName: WideString; dispid 14;
  end;

// *********************************************************************//
// Interface: ICRViewContext
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D112FEF8-1AD9-4EA8-8F98-D75C70F34D17}
// *********************************************************************//
  ICRViewContext = interface(IDispatch)
    ['{D112FEF8-1AD9-4EA8-8F98-D75C70F34D17}']
    function  Get_GroupPath: WideString; safecall;
    procedure Set_GroupPath(const pVal: WideString); safecall;
    function  Get_GroupName: WideString; safecall;
    procedure Set_GroupName(const pVal: WideString); safecall;
    function  Get_DrillDownLevel: Integer; safecall;
    procedure Set_DrillDownLevel(pVal: Integer); safecall;
    function  Get_ReportName: WideString; safecall;
    procedure Set_ReportName(const pVal: WideString); safecall;
    function  Get_ContainingPageNumber: Integer; safecall;
    procedure Set_ContainingPageNumber(pVal: Integer); safecall;
    function  Get_ContainingGroupPath: WideString; safecall;
    procedure Set_ContainingGroupPath(const pVal: WideString); safecall;
    function  Get_ContainingGroupName: WideString; safecall;
    procedure Set_ContainingGroupName(const pVal: WideString); safecall;
    function  Get_XOffset: Integer; safecall;
    procedure Set_XOffset(pVal: Integer); safecall;
    function  Get_YOffset: Integer; safecall;
    procedure Set_YOffset(pVal: Integer); safecall;
    property GroupPath: WideString read Get_GroupPath write Set_GroupPath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property DrillDownLevel: Integer read Get_DrillDownLevel write Set_DrillDownLevel;
    property ReportName: WideString read Get_ReportName write Set_ReportName;
    property ContainingPageNumber: Integer read Get_ContainingPageNumber write Set_ContainingPageNumber;
    property ContainingGroupPath: WideString read Get_ContainingGroupPath write Set_ContainingGroupPath;
    property ContainingGroupName: WideString read Get_ContainingGroupName write Set_ContainingGroupName;
    property XOffset: Integer read Get_XOffset write Set_XOffset;
    property YOffset: Integer read Get_YOffset write Set_YOffset;
  end;

// *********************************************************************//
// DispIntf:  ICRViewContextDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D112FEF8-1AD9-4EA8-8F98-D75C70F34D17}
// *********************************************************************//
  ICRViewContextDisp = dispinterface
    ['{D112FEF8-1AD9-4EA8-8F98-D75C70F34D17}']
    property GroupPath: WideString dispid 1;
    property GroupName: WideString dispid 2;
    property DrillDownLevel: Integer dispid 3;
    property ReportName: WideString dispid 4;
    property ContainingPageNumber: Integer dispid 5;
    property ContainingGroupPath: WideString dispid 6;
    property ContainingGroupName: WideString dispid 7;
    property XOffset: Integer dispid 8;
    property YOffset: Integer dispid 9;
  end;

// *********************************************************************//
// Interface: ICRDebugInformation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DE82BC06-E0FC-48E2-A5D3-172D1FB4925C}
// *********************************************************************//
  ICRDebugInformation = interface(IDispatch)
    ['{DE82BC06-E0FC-48E2-A5D3-172D1FB4925C}']
    function  Get_PrintJobID: Integer; safecall;
    procedure Set_PrintJobID(pVal: Integer); safecall;
    function  Get_ProcessID: Integer; safecall;
    procedure Set_ProcessID(pVal: Integer); safecall;
    function  Get_DebugRecordID: Integer; safecall;
    procedure Set_DebugRecordID(pVal: Integer); safecall;
    function  Get_DataDateTimeStamp: WideString; safecall;
    procedure Set_DataDateTimeStamp(const pVal: WideString); safecall;
    property PrintJobID: Integer read Get_PrintJobID write Set_PrintJobID;
    property ProcessID: Integer read Get_ProcessID write Set_ProcessID;
    property DebugRecordID: Integer read Get_DebugRecordID write Set_DebugRecordID;
    property DataDateTimeStamp: WideString read Get_DataDateTimeStamp write Set_DataDateTimeStamp;
  end;

// *********************************************************************//
// DispIntf:  ICRDebugInformationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DE82BC06-E0FC-48E2-A5D3-172D1FB4925C}
// *********************************************************************//
  ICRDebugInformationDisp = dispinterface
    ['{DE82BC06-E0FC-48E2-A5D3-172D1FB4925C}']
    property PrintJobID: Integer dispid 1;
    property ProcessID: Integer dispid 2;
    property DebugRecordID: Integer dispid 3;
    property DataDateTimeStamp: WideString dispid 4;
  end;

// *********************************************************************//
// The Class CoPageObjectFactory provides a Create and CreateRemote method to          
// create instances of the default interface ISCRPageObjectFactory exposed by              
// the CoClass PageObjectFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPageObjectFactory = class
    class function Create: ISCRPageObjectFactory;
    class function CreateRemote(const MachineName: string): ISCRPageObjectFactory;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPageObjectFactory
// Help String      : PageObjectFactory Class 12.0
// Default Interface: ISCRPageObjectFactory
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TPageObjectFactoryProperties= class;
{$ENDIF}
  TPageObjectFactory = class(TOleServer)
  private
    FIntf:        ISCRPageObjectFactory;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TPageObjectFactoryProperties;
    function      GetServerProperties: TPageObjectFactoryProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRPageObjectFactory;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRPageObjectFactory);
    procedure Disconnect; override;
    procedure GetReportObject(objectType: CrObjectInstanceKindEnum; 
                              out ppReportObject: ISCRReportObjectInstance);
    procedure GetPage(out ppReportPage: ISCRPageObjectInstance);
    property  DefaultInterface: ISCRPageObjectFactory read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TPageObjectFactoryProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TPageObjectFactory
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TPageObjectFactoryProperties = class(TPersistent)
  private
    FServer:    TPageObjectFactory;
    function    GetDefaultInterface: ISCRPageObjectFactory;
    constructor Create(AServer: TPageObjectFactory);
  protected
  public
    property DefaultInterface: ISCRPageObjectFactory read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoPlaceHolderObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRPlaceHolderObjectInstance exposed by              
// the CoClass PlaceHolderObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPlaceHolderObjectInstance = class
    class function Create: ISCRPlaceHolderObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRPlaceHolderObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPlaceHolderObjectInstance
// Help String      : PlaceHolderObjectInstance Class 12.0
// Default Interface: ISCRPlaceHolderObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TPlaceHolderObjectInstanceProperties= class;
{$ENDIF}
  TPlaceHolderObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRPlaceHolderObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TPlaceHolderObjectInstanceProperties;
    function      GetServerProperties: TPlaceHolderObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRPlaceHolderObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRPlaceHolderObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRPlaceHolderObjectInstance;
    procedure CopyTo(const PlaceHolderObjectInstance: ISCRPlaceHolderObjectInstance; 
                     DeepCopy: WordBool);
    function  Equals(const PlaceHolderObjectInstance: ISCRPlaceHolderObjectInstance): WordBool;
    property  DefaultInterface: ISCRPlaceHolderObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TPlaceHolderObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TPlaceHolderObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TPlaceHolderObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TPlaceHolderObjectInstance;
    function    GetDefaultInterface: ISCRPlaceHolderObjectInstance;
    constructor Create(AServer: TPlaceHolderObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
  public
    property DefaultInterface: ISCRPlaceHolderObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFieldObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRFieldObjectInstance exposed by              
// the CoClass FieldObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFieldObjectInstance = class
    class function Create: ISCRFieldObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRFieldObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFieldObjectInstance
// Help String      : FieldObjectInstance Class 12.0
// Default Interface: ISCRFieldObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFieldObjectInstanceProperties= class;
{$ENDIF}
  TFieldObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRFieldObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFieldObjectInstanceProperties;
    function      GetServerProperties: TFieldObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRFieldObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
    function  Get_FieldType: CrRuntimeFieldKindEnum;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum);
    function  Get_FieldValueType: CrFieldValueTypeEnum;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum);
    function  Get_IsConstantField: WordBool;
    procedure Set_IsConstantField(pVal: WordBool);
    function  Get_IsPrintTimeField: WordBool;
    procedure Set_IsPrintTimeField(pVal: WordBool);
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_FieldFormat: ISCRFieldFormat;
    procedure Set_FieldFormat(const pVal: ISCRFieldFormat);
    function  Get_LeftAlignFixedLeft: WordBool;
    procedure Set_LeftAlignFixedLeft(pVal: WordBool);
    function  Get_RightAlignFixedRight: WordBool;
    procedure Set_RightAlignFixedRight(pVal: WordBool);
    function  Get_AllowClipping: WordBool;
    procedure Set_AllowClipping(pVal: WordBool);
    function  Get_FieldStrings: ISCRStrings;
    procedure Set_FieldStrings(const pVal: ISCRStrings);
    function  Get_FieldHasRawValue: WordBool;
    procedure Set_FieldHasRawValue(pVal: WordBool);
    function  Get_RawData: OleVariant;
    procedure Set_RawData(pVal: OleVariant);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRFieldObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCRFieldObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property RawData: OleVariant read Get_RawData write Set_RawData;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
    property IsPrintTimeField: WordBool read Get_IsPrintTimeField write Set_IsPrintTimeField;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property FieldFormat: ISCRFieldFormat read Get_FieldFormat write Set_FieldFormat;
    property LeftAlignFixedLeft: WordBool read Get_LeftAlignFixedLeft write Set_LeftAlignFixedLeft;
    property RightAlignFixedRight: WordBool read Get_RightAlignFixedRight write Set_RightAlignFixedRight;
    property AllowClipping: WordBool read Get_AllowClipping write Set_AllowClipping;
    property FieldStrings: ISCRStrings read Get_FieldStrings write Set_FieldStrings;
    property FieldHasRawValue: WordBool read Get_FieldHasRawValue write Set_FieldHasRawValue;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFieldObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFieldObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFieldObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TFieldObjectInstance;
    function    GetDefaultInterface: ISCRFieldObjectInstance;
    constructor Create(AServer: TFieldObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
    function  Get_FieldType: CrRuntimeFieldKindEnum;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum);
    function  Get_FieldValueType: CrFieldValueTypeEnum;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum);
    function  Get_IsConstantField: WordBool;
    procedure Set_IsConstantField(pVal: WordBool);
    function  Get_IsPrintTimeField: WordBool;
    procedure Set_IsPrintTimeField(pVal: WordBool);
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_FieldFormat: ISCRFieldFormat;
    procedure Set_FieldFormat(const pVal: ISCRFieldFormat);
    function  Get_LeftAlignFixedLeft: WordBool;
    procedure Set_LeftAlignFixedLeft(pVal: WordBool);
    function  Get_RightAlignFixedRight: WordBool;
    procedure Set_RightAlignFixedRight(pVal: WordBool);
    function  Get_AllowClipping: WordBool;
    procedure Set_AllowClipping(pVal: WordBool);
    function  Get_FieldStrings: ISCRStrings;
    procedure Set_FieldStrings(const pVal: ISCRStrings);
    function  Get_FieldHasRawValue: WordBool;
    procedure Set_FieldHasRawValue(pVal: WordBool);
    function  Get_RawData: OleVariant;
    procedure Set_RawData(pVal: OleVariant);
  public
    property DefaultInterface: ISCRFieldObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
    property IsPrintTimeField: WordBool read Get_IsPrintTimeField write Set_IsPrintTimeField;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property FieldFormat: ISCRFieldFormat read Get_FieldFormat write Set_FieldFormat;
    property LeftAlignFixedLeft: WordBool read Get_LeftAlignFixedLeft write Set_LeftAlignFixedLeft;
    property RightAlignFixedRight: WordBool read Get_RightAlignFixedRight write Set_RightAlignFixedRight;
    property AllowClipping: WordBool read Get_AllowClipping write Set_AllowClipping;
    property FieldStrings: ISCRStrings read Get_FieldStrings write Set_FieldStrings;
    property FieldHasRawValue: WordBool read Get_FieldHasRawValue write Set_FieldHasRawValue;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTextObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRTextObjectInstance exposed by              
// the CoClass TextObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTextObjectInstance = class
    class function Create: ISCRTextObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRTextObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTextObjectInstance
// Help String      : TextObjectInstance Class 12.0
// Default Interface: ISCRTextObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTextObjectInstanceProperties= class;
{$ENDIF}
  TTextObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRTextObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTextObjectInstanceProperties;
    function      GetServerProperties: TTextObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRTextObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_StartLineNumber: Integer;
    procedure Set_StartLineNumber(pVal: Integer);
    function  Get_EndLineNumber: Integer;
    procedure Set_EndLineNumber(pVal: Integer);
    function  Get_VerticalStartOffset: Integer;
    procedure Set_VerticalStartOffset(pVal: Integer);
    function  Get_Paragraphs: ISCRRuntimeParagraphs;
    procedure Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRTextObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    procedure SetUpDefaultObject(const bstrText: WideString);
    property  DefaultInterface: ISCRTextObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property StartLineNumber: Integer read Get_StartLineNumber write Set_StartLineNumber;
    property EndLineNumber: Integer read Get_EndLineNumber write Set_EndLineNumber;
    property VerticalStartOffset: Integer read Get_VerticalStartOffset write Set_VerticalStartOffset;
    property Paragraphs: ISCRRuntimeParagraphs read Get_Paragraphs write Set_Paragraphs;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTextObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTextObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTextObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TTextObjectInstance;
    function    GetDefaultInterface: ISCRTextObjectInstance;
    constructor Create(AServer: TTextObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_StartLineNumber: Integer;
    procedure Set_StartLineNumber(pVal: Integer);
    function  Get_EndLineNumber: Integer;
    procedure Set_EndLineNumber(pVal: Integer);
    function  Get_VerticalStartOffset: Integer;
    procedure Set_VerticalStartOffset(pVal: Integer);
    function  Get_Paragraphs: ISCRRuntimeParagraphs;
    procedure Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
  public
    property DefaultInterface: ISCRTextObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property StartLineNumber: Integer read Get_StartLineNumber write Set_StartLineNumber;
    property EndLineNumber: Integer read Get_EndLineNumber write Set_EndLineNumber;
    property VerticalStartOffset: Integer read Get_VerticalStartOffset write Set_VerticalStartOffset;
    property Paragraphs: ISCRRuntimeParagraphs read Get_Paragraphs write Set_Paragraphs;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoReportObjectInstances provides a Create and CreateRemote method to          
// create instances of the default interface ISCRReportObjectInstances exposed by              
// the CoClass ReportObjectInstances. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReportObjectInstances = class
    class function Create: ISCRReportObjectInstances;
    class function CreateRemote(const MachineName: string): ISCRReportObjectInstances;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TReportObjectInstances
// Help String      : ReportObjectInstances Class 12.0
// Default Interface: ISCRReportObjectInstances
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TReportObjectInstancesProperties= class;
{$ENDIF}
  TReportObjectInstances = class(TOleServer)
  private
    FIntf:        ISCRReportObjectInstances;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TReportObjectInstancesProperties;
    function      GetServerProperties: TReportObjectInstancesProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRReportObjectInstances;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRReportObjectInstance;
    procedure Set_Item(Index: Integer; const ppVal: ISCRReportObjectInstance);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRReportObjectInstances);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstances;
    procedure CopyTo(const ReportObjectInstances: ISCRReportObjectInstances; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstances: ISCRReportObjectInstances): WordBool;
    procedure Add(const ReportObjectInstance: ISCRReportObjectInstance);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const ReportObjectInstance: ISCRReportObjectInstance);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const ReportObjectInstance: ISCRReportObjectInstance): Integer;
    property  DefaultInterface: ISCRReportObjectInstances read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRReportObjectInstance read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TReportObjectInstancesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TReportObjectInstances
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TReportObjectInstancesProperties = class(TPersistent)
  private
    FServer:    TReportObjectInstances;
    function    GetDefaultInterface: ISCRReportObjectInstances;
    constructor Create(AServer: TReportObjectInstances);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRReportObjectInstance;
    procedure Set_Item(Index: Integer; const ppVal: ISCRReportObjectInstance);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRReportObjectInstances read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoChartObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRChartObjectInstance exposed by              
// the CoClass ChartObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChartObjectInstance = class
    class function Create: ISCRChartObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRChartObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TChartObjectInstance
// Help String      : ChartObjectInstance Class 12.0
// Default Interface: ISCRChartObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TChartObjectInstanceProperties= class;
{$ENDIF}
  TChartObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRChartObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TChartObjectInstanceProperties;
    function      GetServerProperties: TChartObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRChartObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_ImageFormat: CrImageFormatEnum;
    procedure Set_ImageFormat(pVal: CrImageFormatEnum);
    function  Get_ImageData: ISequentialStream;
    procedure Set_ImageData(const pVal: ISequentialStream);
    function  Get_ImageByteArray: ISCRByteArray;
    procedure Set_ImageByteArray(const pVal: ISCRByteArray);
    function  Get_AnalysisGridType: CrAnalysisGridEnum;
    procedure Set_AnalysisGridType(pVal: CrAnalysisGridEnum);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRChartObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCRChartObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property ImageFormat: CrImageFormatEnum read Get_ImageFormat write Set_ImageFormat;
    property ImageData: ISequentialStream read Get_ImageData write Set_ImageData;
    property ImageByteArray: ISCRByteArray read Get_ImageByteArray write Set_ImageByteArray;
    property AnalysisGridType: CrAnalysisGridEnum read Get_AnalysisGridType write Set_AnalysisGridType;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TChartObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TChartObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TChartObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TChartObjectInstance;
    function    GetDefaultInterface: ISCRChartObjectInstance;
    constructor Create(AServer: TChartObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_ImageFormat: CrImageFormatEnum;
    procedure Set_ImageFormat(pVal: CrImageFormatEnum);
    function  Get_ImageData: ISequentialStream;
    procedure Set_ImageData(const pVal: ISequentialStream);
    function  Get_ImageByteArray: ISCRByteArray;
    procedure Set_ImageByteArray(const pVal: ISCRByteArray);
    function  Get_AnalysisGridType: CrAnalysisGridEnum;
    procedure Set_AnalysisGridType(pVal: CrAnalysisGridEnum);
  public
    property DefaultInterface: ISCRChartObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property ImageFormat: CrImageFormatEnum read Get_ImageFormat write Set_ImageFormat;
    property ImageData: ISequentialStream read Get_ImageData write Set_ImageData;
    property ImageByteArray: ISCRByteArray read Get_ImageByteArray write Set_ImageByteArray;
    property AnalysisGridType: CrAnalysisGridEnum read Get_AnalysisGridType write Set_AnalysisGridType;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNumericFieldObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRNumericFieldObjectInstance exposed by              
// the CoClass NumericFieldObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNumericFieldObjectInstance = class
    class function Create: ISCRNumericFieldObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRNumericFieldObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNumericFieldObjectInstance
// Help String      : NumericFieldObjectInstance Class 12.0
// Default Interface: ISCRNumericFieldObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNumericFieldObjectInstanceProperties= class;
{$ENDIF}
  TNumericFieldObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRNumericFieldObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNumericFieldObjectInstanceProperties;
    function      GetServerProperties: TNumericFieldObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRNumericFieldObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
    function  Get_FieldType: CrRuntimeFieldKindEnum;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum);
    function  Get_FieldValueType: CrFieldValueTypeEnum;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum);
    function  Get_IsConstantField: WordBool;
    procedure Set_IsConstantField(pVal: WordBool);
    function  Get_IsPrintTimeField: WordBool;
    procedure Set_IsPrintTimeField(pVal: WordBool);
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_FieldFormat: ISCRFieldFormat;
    procedure Set_FieldFormat(const pVal: ISCRFieldFormat);
    function  Get_LeftAlignFixedLeft: WordBool;
    procedure Set_LeftAlignFixedLeft(pVal: WordBool);
    function  Get_RightAlignFixedRight: WordBool;
    procedure Set_RightAlignFixedRight(pVal: WordBool);
    function  Get_AllowClipping: WordBool;
    procedure Set_AllowClipping(pVal: WordBool);
    function  Get_FieldStrings: ISCRStrings;
    procedure Set_FieldStrings(const pVal: ISCRStrings);
    function  Get_FieldHasRawValue: WordBool;
    procedure Set_FieldHasRawValue(pVal: WordBool);
    function  Get_RawData: OleVariant;
    procedure Set_RawData(pVal: OleVariant);
    function  Get_FixedLeft: WideString;
    procedure Set_FixedLeft(const pVal: WideString);
    function  Get_FixedLeftReserve: WideString;
    procedure Set_FixedLeftReserve(const pVal: WideString);
    function  Get_FixedRight: WideString;
    procedure Set_FixedRight(const pVal: WideString);
    function  Get_FixedRightReserve: WideString;
    procedure Set_FixedRightReserve(const pVal: WideString);
    function  Get_LeftFill: WideString;
    procedure Set_LeftFill(const pVal: WideString);
    function  Get_RightFill: WideString;
    procedure Set_RightFill(const pVal: WideString);
    function  Get_Prefix: WideString;
    procedure Set_Prefix(const pVal: WideString);
    function  Get_PrefixReserve: WideString;
    procedure Set_PrefixReserve(const pVal: WideString);
    function  Get_Suffix: WideString;
    procedure Set_Suffix(const pVal: WideString);
    function  Get_SuffixReserve: WideString;
    procedure Set_SuffixReserve(const pVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRNumericFieldObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCRNumericFieldObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property RawData: OleVariant read Get_RawData write Set_RawData;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
    property IsPrintTimeField: WordBool read Get_IsPrintTimeField write Set_IsPrintTimeField;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property FieldFormat: ISCRFieldFormat read Get_FieldFormat write Set_FieldFormat;
    property LeftAlignFixedLeft: WordBool read Get_LeftAlignFixedLeft write Set_LeftAlignFixedLeft;
    property RightAlignFixedRight: WordBool read Get_RightAlignFixedRight write Set_RightAlignFixedRight;
    property AllowClipping: WordBool read Get_AllowClipping write Set_AllowClipping;
    property FieldStrings: ISCRStrings read Get_FieldStrings write Set_FieldStrings;
    property FieldHasRawValue: WordBool read Get_FieldHasRawValue write Set_FieldHasRawValue;
    property FixedLeft: WideString read Get_FixedLeft write Set_FixedLeft;
    property FixedLeftReserve: WideString read Get_FixedLeftReserve write Set_FixedLeftReserve;
    property FixedRight: WideString read Get_FixedRight write Set_FixedRight;
    property FixedRightReserve: WideString read Get_FixedRightReserve write Set_FixedRightReserve;
    property LeftFill: WideString read Get_LeftFill write Set_LeftFill;
    property RightFill: WideString read Get_RightFill write Set_RightFill;
    property Prefix: WideString read Get_Prefix write Set_Prefix;
    property PrefixReserve: WideString read Get_PrefixReserve write Set_PrefixReserve;
    property Suffix: WideString read Get_Suffix write Set_Suffix;
    property SuffixReserve: WideString read Get_SuffixReserve write Set_SuffixReserve;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNumericFieldObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNumericFieldObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNumericFieldObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TNumericFieldObjectInstance;
    function    GetDefaultInterface: ISCRNumericFieldObjectInstance;
    constructor Create(AServer: TNumericFieldObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
    function  Get_FieldType: CrRuntimeFieldKindEnum;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum);
    function  Get_FieldValueType: CrFieldValueTypeEnum;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum);
    function  Get_IsConstantField: WordBool;
    procedure Set_IsConstantField(pVal: WordBool);
    function  Get_IsPrintTimeField: WordBool;
    procedure Set_IsPrintTimeField(pVal: WordBool);
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_FieldFormat: ISCRFieldFormat;
    procedure Set_FieldFormat(const pVal: ISCRFieldFormat);
    function  Get_LeftAlignFixedLeft: WordBool;
    procedure Set_LeftAlignFixedLeft(pVal: WordBool);
    function  Get_RightAlignFixedRight: WordBool;
    procedure Set_RightAlignFixedRight(pVal: WordBool);
    function  Get_AllowClipping: WordBool;
    procedure Set_AllowClipping(pVal: WordBool);
    function  Get_FieldStrings: ISCRStrings;
    procedure Set_FieldStrings(const pVal: ISCRStrings);
    function  Get_FieldHasRawValue: WordBool;
    procedure Set_FieldHasRawValue(pVal: WordBool);
    function  Get_RawData: OleVariant;
    procedure Set_RawData(pVal: OleVariant);
    function  Get_FixedLeft: WideString;
    procedure Set_FixedLeft(const pVal: WideString);
    function  Get_FixedLeftReserve: WideString;
    procedure Set_FixedLeftReserve(const pVal: WideString);
    function  Get_FixedRight: WideString;
    procedure Set_FixedRight(const pVal: WideString);
    function  Get_FixedRightReserve: WideString;
    procedure Set_FixedRightReserve(const pVal: WideString);
    function  Get_LeftFill: WideString;
    procedure Set_LeftFill(const pVal: WideString);
    function  Get_RightFill: WideString;
    procedure Set_RightFill(const pVal: WideString);
    function  Get_Prefix: WideString;
    procedure Set_Prefix(const pVal: WideString);
    function  Get_PrefixReserve: WideString;
    procedure Set_PrefixReserve(const pVal: WideString);
    function  Get_Suffix: WideString;
    procedure Set_Suffix(const pVal: WideString);
    function  Get_SuffixReserve: WideString;
    procedure Set_SuffixReserve(const pVal: WideString);
  public
    property DefaultInterface: ISCRNumericFieldObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
    property IsPrintTimeField: WordBool read Get_IsPrintTimeField write Set_IsPrintTimeField;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property FieldFormat: ISCRFieldFormat read Get_FieldFormat write Set_FieldFormat;
    property LeftAlignFixedLeft: WordBool read Get_LeftAlignFixedLeft write Set_LeftAlignFixedLeft;
    property RightAlignFixedRight: WordBool read Get_RightAlignFixedRight write Set_RightAlignFixedRight;
    property AllowClipping: WordBool read Get_AllowClipping write Set_AllowClipping;
    property FieldStrings: ISCRStrings read Get_FieldStrings write Set_FieldStrings;
    property FieldHasRawValue: WordBool read Get_FieldHasRawValue write Set_FieldHasRawValue;
    property FixedLeft: WideString read Get_FixedLeft write Set_FixedLeft;
    property FixedLeftReserve: WideString read Get_FixedLeftReserve write Set_FixedLeftReserve;
    property FixedRight: WideString read Get_FixedRight write Set_FixedRight;
    property FixedRightReserve: WideString read Get_FixedRightReserve write Set_FixedRightReserve;
    property LeftFill: WideString read Get_LeftFill write Set_LeftFill;
    property RightFill: WideString read Get_RightFill write Set_RightFill;
    property Prefix: WideString read Get_Prefix write Set_Prefix;
    property PrefixReserve: WideString read Get_PrefixReserve write Set_PrefixReserve;
    property Suffix: WideString read Get_Suffix write Set_Suffix;
    property SuffixReserve: WideString read Get_SuffixReserve write Set_SuffixReserve;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFieldObjectInstanceInGrid provides a Create and CreateRemote method to          
// create instances of the default interface ISCRFieldObjectInstanceInGrid exposed by              
// the CoClass FieldObjectInstanceInGrid. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFieldObjectInstanceInGrid = class
    class function Create: ISCRFieldObjectInstanceInGrid;
    class function CreateRemote(const MachineName: string): ISCRFieldObjectInstanceInGrid;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFieldObjectInstanceInGrid
// Help String      : FieldObjectInstanceInGrid Class 12.0
// Default Interface: ISCRFieldObjectInstanceInGrid
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFieldObjectInstanceInGridProperties= class;
{$ENDIF}
  TFieldObjectInstanceInGrid = class(TOleServer)
  private
    FIntf:        ISCRFieldObjectInstanceInGrid;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFieldObjectInstanceInGridProperties;
    function      GetServerProperties: TFieldObjectInstanceInGridProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRFieldObjectInstanceInGrid;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
    function  Get_FieldType: CrRuntimeFieldKindEnum;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum);
    function  Get_FieldValueType: CrFieldValueTypeEnum;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum);
    function  Get_IsConstantField: WordBool;
    procedure Set_IsConstantField(pVal: WordBool);
    function  Get_IsPrintTimeField: WordBool;
    procedure Set_IsPrintTimeField(pVal: WordBool);
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_FieldFormat: ISCRFieldFormat;
    procedure Set_FieldFormat(const pVal: ISCRFieldFormat);
    function  Get_LeftAlignFixedLeft: WordBool;
    procedure Set_LeftAlignFixedLeft(pVal: WordBool);
    function  Get_RightAlignFixedRight: WordBool;
    procedure Set_RightAlignFixedRight(pVal: WordBool);
    function  Get_AllowClipping: WordBool;
    procedure Set_AllowClipping(pVal: WordBool);
    function  Get_FieldStrings: ISCRStrings;
    procedure Set_FieldStrings(const pVal: ISCRStrings);
    function  Get_FieldHasRawValue: WordBool;
    procedure Set_FieldHasRawValue(pVal: WordBool);
    function  Get_RawData: OleVariant;
    procedure Set_RawData(pVal: OleVariant);
    function  Get_RowNumber: Integer;
    procedure Set_RowNumber(pVal: Integer);
    function  Get_ColumnNumber: Integer;
    procedure Set_ColumnNumber(pVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRFieldObjectInstanceInGrid);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCRFieldObjectInstanceInGrid read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property RawData: OleVariant read Get_RawData write Set_RawData;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
    property IsPrintTimeField: WordBool read Get_IsPrintTimeField write Set_IsPrintTimeField;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property FieldFormat: ISCRFieldFormat read Get_FieldFormat write Set_FieldFormat;
    property LeftAlignFixedLeft: WordBool read Get_LeftAlignFixedLeft write Set_LeftAlignFixedLeft;
    property RightAlignFixedRight: WordBool read Get_RightAlignFixedRight write Set_RightAlignFixedRight;
    property AllowClipping: WordBool read Get_AllowClipping write Set_AllowClipping;
    property FieldStrings: ISCRStrings read Get_FieldStrings write Set_FieldStrings;
    property FieldHasRawValue: WordBool read Get_FieldHasRawValue write Set_FieldHasRawValue;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFieldObjectInstanceInGridProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFieldObjectInstanceInGrid
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFieldObjectInstanceInGridProperties = class(TPersistent)
  private
    FServer:    TFieldObjectInstanceInGrid;
    function    GetDefaultInterface: ISCRFieldObjectInstanceInGrid;
    constructor Create(AServer: TFieldObjectInstanceInGrid);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
    function  Get_FieldType: CrRuntimeFieldKindEnum;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum);
    function  Get_FieldValueType: CrFieldValueTypeEnum;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum);
    function  Get_IsConstantField: WordBool;
    procedure Set_IsConstantField(pVal: WordBool);
    function  Get_IsPrintTimeField: WordBool;
    procedure Set_IsPrintTimeField(pVal: WordBool);
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_FieldFormat: ISCRFieldFormat;
    procedure Set_FieldFormat(const pVal: ISCRFieldFormat);
    function  Get_LeftAlignFixedLeft: WordBool;
    procedure Set_LeftAlignFixedLeft(pVal: WordBool);
    function  Get_RightAlignFixedRight: WordBool;
    procedure Set_RightAlignFixedRight(pVal: WordBool);
    function  Get_AllowClipping: WordBool;
    procedure Set_AllowClipping(pVal: WordBool);
    function  Get_FieldStrings: ISCRStrings;
    procedure Set_FieldStrings(const pVal: ISCRStrings);
    function  Get_FieldHasRawValue: WordBool;
    procedure Set_FieldHasRawValue(pVal: WordBool);
    function  Get_RawData: OleVariant;
    procedure Set_RawData(pVal: OleVariant);
    function  Get_RowNumber: Integer;
    procedure Set_RowNumber(pVal: Integer);
    function  Get_ColumnNumber: Integer;
    procedure Set_ColumnNumber(pVal: Integer);
  public
    property DefaultInterface: ISCRFieldObjectInstanceInGrid read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
    property IsPrintTimeField: WordBool read Get_IsPrintTimeField write Set_IsPrintTimeField;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property FieldFormat: ISCRFieldFormat read Get_FieldFormat write Set_FieldFormat;
    property LeftAlignFixedLeft: WordBool read Get_LeftAlignFixedLeft write Set_LeftAlignFixedLeft;
    property RightAlignFixedRight: WordBool read Get_RightAlignFixedRight write Set_RightAlignFixedRight;
    property AllowClipping: WordBool read Get_AllowClipping write Set_AllowClipping;
    property FieldStrings: ISCRStrings read Get_FieldStrings write Set_FieldStrings;
    property FieldHasRawValue: WordBool read Get_FieldHasRawValue write Set_FieldHasRawValue;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNumericFieldObjectInstanceInGrid provides a Create and CreateRemote method to          
// create instances of the default interface ISCRNumericFieldObjectInstanceInGrid exposed by              
// the CoClass NumericFieldObjectInstanceInGrid. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNumericFieldObjectInstanceInGrid = class
    class function Create: ISCRNumericFieldObjectInstanceInGrid;
    class function CreateRemote(const MachineName: string): ISCRNumericFieldObjectInstanceInGrid;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNumericFieldObjectInstanceInGrid
// Help String      : NumericFieldObjectInstanceInGrid Class 12.0
// Default Interface: ISCRNumericFieldObjectInstanceInGrid
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNumericFieldObjectInstanceInGridProperties= class;
{$ENDIF}
  TNumericFieldObjectInstanceInGrid = class(TOleServer)
  private
    FIntf:        ISCRNumericFieldObjectInstanceInGrid;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNumericFieldObjectInstanceInGridProperties;
    function      GetServerProperties: TNumericFieldObjectInstanceInGridProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRNumericFieldObjectInstanceInGrid;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
    function  Get_FieldType: CrRuntimeFieldKindEnum;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum);
    function  Get_FieldValueType: CrFieldValueTypeEnum;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum);
    function  Get_IsConstantField: WordBool;
    procedure Set_IsConstantField(pVal: WordBool);
    function  Get_IsPrintTimeField: WordBool;
    procedure Set_IsPrintTimeField(pVal: WordBool);
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_FieldFormat: ISCRFieldFormat;
    procedure Set_FieldFormat(const pVal: ISCRFieldFormat);
    function  Get_LeftAlignFixedLeft: WordBool;
    procedure Set_LeftAlignFixedLeft(pVal: WordBool);
    function  Get_RightAlignFixedRight: WordBool;
    procedure Set_RightAlignFixedRight(pVal: WordBool);
    function  Get_AllowClipping: WordBool;
    procedure Set_AllowClipping(pVal: WordBool);
    function  Get_FieldStrings: ISCRStrings;
    procedure Set_FieldStrings(const pVal: ISCRStrings);
    function  Get_FieldHasRawValue: WordBool;
    procedure Set_FieldHasRawValue(pVal: WordBool);
    function  Get_RawData: OleVariant;
    procedure Set_RawData(pVal: OleVariant);
    function  Get_FixedLeft: WideString;
    procedure Set_FixedLeft(const pVal: WideString);
    function  Get_FixedLeftReserve: WideString;
    procedure Set_FixedLeftReserve(const pVal: WideString);
    function  Get_FixedRight: WideString;
    procedure Set_FixedRight(const pVal: WideString);
    function  Get_FixedRightReserve: WideString;
    procedure Set_FixedRightReserve(const pVal: WideString);
    function  Get_LeftFill: WideString;
    procedure Set_LeftFill(const pVal: WideString);
    function  Get_RightFill: WideString;
    procedure Set_RightFill(const pVal: WideString);
    function  Get_Prefix: WideString;
    procedure Set_Prefix(const pVal: WideString);
    function  Get_PrefixReserve: WideString;
    procedure Set_PrefixReserve(const pVal: WideString);
    function  Get_Suffix: WideString;
    procedure Set_Suffix(const pVal: WideString);
    function  Get_SuffixReserve: WideString;
    procedure Set_SuffixReserve(const pVal: WideString);
    function  Get_RowNumber: Integer;
    procedure Set_RowNumber(pVal: Integer);
    function  Get_ColumnNumber: Integer;
    procedure Set_ColumnNumber(pVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRNumericFieldObjectInstanceInGrid);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCRNumericFieldObjectInstanceInGrid read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property RawData: OleVariant read Get_RawData write Set_RawData;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
    property IsPrintTimeField: WordBool read Get_IsPrintTimeField write Set_IsPrintTimeField;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property FieldFormat: ISCRFieldFormat read Get_FieldFormat write Set_FieldFormat;
    property LeftAlignFixedLeft: WordBool read Get_LeftAlignFixedLeft write Set_LeftAlignFixedLeft;
    property RightAlignFixedRight: WordBool read Get_RightAlignFixedRight write Set_RightAlignFixedRight;
    property AllowClipping: WordBool read Get_AllowClipping write Set_AllowClipping;
    property FieldStrings: ISCRStrings read Get_FieldStrings write Set_FieldStrings;
    property FieldHasRawValue: WordBool read Get_FieldHasRawValue write Set_FieldHasRawValue;
    property FixedLeft: WideString read Get_FixedLeft write Set_FixedLeft;
    property FixedLeftReserve: WideString read Get_FixedLeftReserve write Set_FixedLeftReserve;
    property FixedRight: WideString read Get_FixedRight write Set_FixedRight;
    property FixedRightReserve: WideString read Get_FixedRightReserve write Set_FixedRightReserve;
    property LeftFill: WideString read Get_LeftFill write Set_LeftFill;
    property RightFill: WideString read Get_RightFill write Set_RightFill;
    property Prefix: WideString read Get_Prefix write Set_Prefix;
    property PrefixReserve: WideString read Get_PrefixReserve write Set_PrefixReserve;
    property Suffix: WideString read Get_Suffix write Set_Suffix;
    property SuffixReserve: WideString read Get_SuffixReserve write Set_SuffixReserve;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNumericFieldObjectInstanceInGridProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNumericFieldObjectInstanceInGrid
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNumericFieldObjectInstanceInGridProperties = class(TPersistent)
  private
    FServer:    TNumericFieldObjectInstanceInGrid;
    function    GetDefaultInterface: ISCRNumericFieldObjectInstanceInGrid;
    constructor Create(AServer: TNumericFieldObjectInstanceInGrid);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
    function  Get_FieldType: CrRuntimeFieldKindEnum;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum);
    function  Get_FieldValueType: CrFieldValueTypeEnum;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum);
    function  Get_IsConstantField: WordBool;
    procedure Set_IsConstantField(pVal: WordBool);
    function  Get_IsPrintTimeField: WordBool;
    procedure Set_IsPrintTimeField(pVal: WordBool);
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_FieldFormat: ISCRFieldFormat;
    procedure Set_FieldFormat(const pVal: ISCRFieldFormat);
    function  Get_LeftAlignFixedLeft: WordBool;
    procedure Set_LeftAlignFixedLeft(pVal: WordBool);
    function  Get_RightAlignFixedRight: WordBool;
    procedure Set_RightAlignFixedRight(pVal: WordBool);
    function  Get_AllowClipping: WordBool;
    procedure Set_AllowClipping(pVal: WordBool);
    function  Get_FieldStrings: ISCRStrings;
    procedure Set_FieldStrings(const pVal: ISCRStrings);
    function  Get_FieldHasRawValue: WordBool;
    procedure Set_FieldHasRawValue(pVal: WordBool);
    function  Get_RawData: OleVariant;
    procedure Set_RawData(pVal: OleVariant);
    function  Get_FixedLeft: WideString;
    procedure Set_FixedLeft(const pVal: WideString);
    function  Get_FixedLeftReserve: WideString;
    procedure Set_FixedLeftReserve(const pVal: WideString);
    function  Get_FixedRight: WideString;
    procedure Set_FixedRight(const pVal: WideString);
    function  Get_FixedRightReserve: WideString;
    procedure Set_FixedRightReserve(const pVal: WideString);
    function  Get_LeftFill: WideString;
    procedure Set_LeftFill(const pVal: WideString);
    function  Get_RightFill: WideString;
    procedure Set_RightFill(const pVal: WideString);
    function  Get_Prefix: WideString;
    procedure Set_Prefix(const pVal: WideString);
    function  Get_PrefixReserve: WideString;
    procedure Set_PrefixReserve(const pVal: WideString);
    function  Get_Suffix: WideString;
    procedure Set_Suffix(const pVal: WideString);
    function  Get_SuffixReserve: WideString;
    procedure Set_SuffixReserve(const pVal: WideString);
    function  Get_RowNumber: Integer;
    procedure Set_RowNumber(pVal: Integer);
    function  Get_ColumnNumber: Integer;
    procedure Set_ColumnNumber(pVal: Integer);
  public
    property DefaultInterface: ISCRNumericFieldObjectInstanceInGrid read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
    property IsPrintTimeField: WordBool read Get_IsPrintTimeField write Set_IsPrintTimeField;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property FieldFormat: ISCRFieldFormat read Get_FieldFormat write Set_FieldFormat;
    property LeftAlignFixedLeft: WordBool read Get_LeftAlignFixedLeft write Set_LeftAlignFixedLeft;
    property RightAlignFixedRight: WordBool read Get_RightAlignFixedRight write Set_RightAlignFixedRight;
    property AllowClipping: WordBool read Get_AllowClipping write Set_AllowClipping;
    property FieldStrings: ISCRStrings read Get_FieldStrings write Set_FieldStrings;
    property FieldHasRawValue: WordBool read Get_FieldHasRawValue write Set_FieldHasRawValue;
    property FixedLeft: WideString read Get_FixedLeft write Set_FixedLeft;
    property FixedLeftReserve: WideString read Get_FixedLeftReserve write Set_FixedLeftReserve;
    property FixedRight: WideString read Get_FixedRight write Set_FixedRight;
    property FixedRightReserve: WideString read Get_FixedRightReserve write Set_FixedRightReserve;
    property LeftFill: WideString read Get_LeftFill write Set_LeftFill;
    property RightFill: WideString read Get_RightFill write Set_RightFill;
    property Prefix: WideString read Get_Prefix write Set_Prefix;
    property PrefixReserve: WideString read Get_PrefixReserve write Set_PrefixReserve;
    property Suffix: WideString read Get_Suffix write Set_Suffix;
    property SuffixReserve: WideString read Get_SuffixReserve write Set_SuffixReserve;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTextObjectInstanceInGrid provides a Create and CreateRemote method to          
// create instances of the default interface ISCRTextObjectInstanceInGrid exposed by              
// the CoClass TextObjectInstanceInGrid. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTextObjectInstanceInGrid = class
    class function Create: ISCRTextObjectInstanceInGrid;
    class function CreateRemote(const MachineName: string): ISCRTextObjectInstanceInGrid;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTextObjectInstanceInGrid
// Help String      : TextObjectInstanceInGrid Class 12.0
// Default Interface: ISCRTextObjectInstanceInGrid
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTextObjectInstanceInGridProperties= class;
{$ENDIF}
  TTextObjectInstanceInGrid = class(TOleServer)
  private
    FIntf:        ISCRTextObjectInstanceInGrid;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTextObjectInstanceInGridProperties;
    function      GetServerProperties: TTextObjectInstanceInGridProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRTextObjectInstanceInGrid;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_StartLineNumber: Integer;
    procedure Set_StartLineNumber(pVal: Integer);
    function  Get_EndLineNumber: Integer;
    procedure Set_EndLineNumber(pVal: Integer);
    function  Get_VerticalStartOffset: Integer;
    procedure Set_VerticalStartOffset(pVal: Integer);
    function  Get_Paragraphs: ISCRRuntimeParagraphs;
    procedure Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
    function  Get_RowNumber: Integer;
    procedure Set_RowNumber(pVal: Integer);
    function  Get_ColumnNumber: Integer;
    procedure Set_ColumnNumber(pVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRTextObjectInstanceInGrid);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    procedure SetUpDefaultObject(const bstrText: WideString);
    property  DefaultInterface: ISCRTextObjectInstanceInGrid read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property StartLineNumber: Integer read Get_StartLineNumber write Set_StartLineNumber;
    property EndLineNumber: Integer read Get_EndLineNumber write Set_EndLineNumber;
    property VerticalStartOffset: Integer read Get_VerticalStartOffset write Set_VerticalStartOffset;
    property Paragraphs: ISCRRuntimeParagraphs read Get_Paragraphs write Set_Paragraphs;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTextObjectInstanceInGridProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTextObjectInstanceInGrid
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTextObjectInstanceInGridProperties = class(TPersistent)
  private
    FServer:    TTextObjectInstanceInGrid;
    function    GetDefaultInterface: ISCRTextObjectInstanceInGrid;
    constructor Create(AServer: TTextObjectInstanceInGrid);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_StartLineNumber: Integer;
    procedure Set_StartLineNumber(pVal: Integer);
    function  Get_EndLineNumber: Integer;
    procedure Set_EndLineNumber(pVal: Integer);
    function  Get_VerticalStartOffset: Integer;
    procedure Set_VerticalStartOffset(pVal: Integer);
    function  Get_Paragraphs: ISCRRuntimeParagraphs;
    procedure Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
    function  Get_RowNumber: Integer;
    procedure Set_RowNumber(pVal: Integer);
    function  Get_ColumnNumber: Integer;
    procedure Set_ColumnNumber(pVal: Integer);
  public
    property DefaultInterface: ISCRTextObjectInstanceInGrid read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property StartLineNumber: Integer read Get_StartLineNumber write Set_StartLineNumber;
    property EndLineNumber: Integer read Get_EndLineNumber write Set_EndLineNumber;
    property VerticalStartOffset: Integer read Get_VerticalStartOffset write Set_VerticalStartOffset;
    property Paragraphs: ISCRRuntimeParagraphs read Get_Paragraphs write Set_Paragraphs;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRuntimeParagraph provides a Create and CreateRemote method to          
// create instances of the default interface ISCRRuntimeParagraph exposed by              
// the CoClass RuntimeParagraph. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuntimeParagraph = class
    class function Create: ISCRRuntimeParagraph;
    class function CreateRemote(const MachineName: string): ISCRRuntimeParagraph;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRuntimeParagraph
// Help String      : RuntimeParagraph Class 12.0
// Default Interface: ISCRRuntimeParagraph
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuntimeParagraphProperties= class;
{$ENDIF}
  TRuntimeParagraph = class(TOleServer)
  private
    FIntf:        ISCRRuntimeParagraph;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuntimeParagraphProperties;
    function      GetServerProperties: TRuntimeParagraphProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRRuntimeParagraph;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_IndentAndSpacingFormat: ISCRIndentAndSpacingFormat;
    procedure Set_IndentAndSpacingFormat(const pVal: ISCRIndentAndSpacingFormat);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_TextLines: ISCRTextLines;
    procedure Set_TextLines(const pVal: ISCRTextLines);
    function  Get_TabStops: ISCRTabStops;
    procedure Set_TabStops(const pVal: ISCRTabStops);
    function  Get_RightToLeftReading: WordBool;
    procedure Set_RightToLeftReading(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRRuntimeParagraph);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraph;
    procedure CopyTo(const RuntimeParagraph: ISCRRuntimeParagraph; DeepCopy: WordBool);
    function  Equals(const RuntimeParagraph: ISCRRuntimeParagraph): WordBool;
    property  DefaultInterface: ISCRRuntimeParagraph read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property IndentAndSpacingFormat: ISCRIndentAndSpacingFormat read Get_IndentAndSpacingFormat write Set_IndentAndSpacingFormat;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property TextLines: ISCRTextLines read Get_TextLines write Set_TextLines;
    property TabStops: ISCRTabStops read Get_TabStops write Set_TabStops;
    property RightToLeftReading: WordBool read Get_RightToLeftReading write Set_RightToLeftReading;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuntimeParagraphProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRuntimeParagraph
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuntimeParagraphProperties = class(TPersistent)
  private
    FServer:    TRuntimeParagraph;
    function    GetDefaultInterface: ISCRRuntimeParagraph;
    constructor Create(AServer: TRuntimeParagraph);
  protected
    function  Get_ClassName: WideString;
    function  Get_IndentAndSpacingFormat: ISCRIndentAndSpacingFormat;
    procedure Set_IndentAndSpacingFormat(const pVal: ISCRIndentAndSpacingFormat);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_TextLines: ISCRTextLines;
    procedure Set_TextLines(const pVal: ISCRTextLines);
    function  Get_TabStops: ISCRTabStops;
    procedure Set_TabStops(const pVal: ISCRTabStops);
    function  Get_RightToLeftReading: WordBool;
    procedure Set_RightToLeftReading(pVal: WordBool);
  public
    property DefaultInterface: ISCRRuntimeParagraph read GetDefaultInterface;
  published
    property IndentAndSpacingFormat: ISCRIndentAndSpacingFormat read Get_IndentAndSpacingFormat write Set_IndentAndSpacingFormat;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property TextLines: ISCRTextLines read Get_TextLines write Set_TextLines;
    property TabStops: ISCRTabStops read Get_TabStops write Set_TabStops;
    property RightToLeftReading: WordBool read Get_RightToLeftReading write Set_RightToLeftReading;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRuntimeParagraphs provides a Create and CreateRemote method to          
// create instances of the default interface ISCRRuntimeParagraphs exposed by              
// the CoClass RuntimeParagraphs. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuntimeParagraphs = class
    class function Create: ISCRRuntimeParagraphs;
    class function CreateRemote(const MachineName: string): ISCRRuntimeParagraphs;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRuntimeParagraphs
// Help String      : RuntimeParagraphs Class 12.0
// Default Interface: ISCRRuntimeParagraphs
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuntimeParagraphsProperties= class;
{$ENDIF}
  TRuntimeParagraphs = class(TOleServer)
  private
    FIntf:        ISCRRuntimeParagraphs;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuntimeParagraphsProperties;
    function      GetServerProperties: TRuntimeParagraphsProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRRuntimeParagraphs;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRRuntimeParagraph;
    procedure Set_Item(Index: Integer; const ppVal: ISCRRuntimeParagraph);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRRuntimeParagraphs);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraphs;
    procedure CopyTo(const RuntimeParagraphs: ISCRRuntimeParagraphs; DeepCopy: WordBool);
    function  Equals(const RuntimeParagraphs: ISCRRuntimeParagraphs): WordBool;
    procedure Add(const RuntimeParagraph: ISCRRuntimeParagraph);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const RuntimeParagraph: ISCRRuntimeParagraph);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const RuntimeParagraph: ISCRRuntimeParagraph): Integer;
    property  DefaultInterface: ISCRRuntimeParagraphs read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRRuntimeParagraph read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuntimeParagraphsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRuntimeParagraphs
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuntimeParagraphsProperties = class(TPersistent)
  private
    FServer:    TRuntimeParagraphs;
    function    GetDefaultInterface: ISCRRuntimeParagraphs;
    constructor Create(AServer: TRuntimeParagraphs);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRRuntimeParagraph;
    procedure Set_Item(Index: Integer; const ppVal: ISCRRuntimeParagraph);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRRuntimeParagraphs read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTextLine provides a Create and CreateRemote method to          
// create instances of the default interface ISCRTextLine exposed by              
// the CoClass TextLine. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTextLine = class
    class function Create: ISCRTextLine;
    class function CreateRemote(const MachineName: string): ISCRTextLine;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTextLine
// Help String      : TextLine Class 12.0
// Default Interface: ISCRTextLine
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTextLineProperties= class;
{$ENDIF}
  TTextLine = class(TOleServer)
  private
    FIntf:        ISCRTextLine;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTextLineProperties;
    function      GetServerProperties: TTextLineProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRTextLine;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_ParagraphElements: ISCRRuntimeParagraphElements;
    procedure Set_ParagraphElements(const pVal: ISCRRuntimeParagraphElements);
    function  Get_BaseLine: Integer;
    procedure Set_BaseLine(pVal: Integer);
    function  Get_TabUnits: ISCRTabUnits;
    procedure Set_TabUnits(const pVal: ISCRTabUnits);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRTextLine);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRTextLine;
    procedure CopyTo(const TextLine: ISCRTextLine; DeepCopy: WordBool);
    function  Equals(const TextLine: ISCRTextLine): WordBool;
    property  DefaultInterface: ISCRTextLine read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property ParagraphElements: ISCRRuntimeParagraphElements read Get_ParagraphElements write Set_ParagraphElements;
    property BaseLine: Integer read Get_BaseLine write Set_BaseLine;
    property TabUnits: ISCRTabUnits read Get_TabUnits write Set_TabUnits;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTextLineProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTextLine
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTextLineProperties = class(TPersistent)
  private
    FServer:    TTextLine;
    function    GetDefaultInterface: ISCRTextLine;
    constructor Create(AServer: TTextLine);
  protected
    function  Get_ClassName: WideString;
    function  Get_ParagraphElements: ISCRRuntimeParagraphElements;
    procedure Set_ParagraphElements(const pVal: ISCRRuntimeParagraphElements);
    function  Get_BaseLine: Integer;
    procedure Set_BaseLine(pVal: Integer);
    function  Get_TabUnits: ISCRTabUnits;
    procedure Set_TabUnits(const pVal: ISCRTabUnits);
  public
    property DefaultInterface: ISCRTextLine read GetDefaultInterface;
  published
    property ParagraphElements: ISCRRuntimeParagraphElements read Get_ParagraphElements write Set_ParagraphElements;
    property BaseLine: Integer read Get_BaseLine write Set_BaseLine;
    property TabUnits: ISCRTabUnits read Get_TabUnits write Set_TabUnits;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTextLines provides a Create and CreateRemote method to          
// create instances of the default interface ISCRTextLines exposed by              
// the CoClass TextLines. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTextLines = class
    class function Create: ISCRTextLines;
    class function CreateRemote(const MachineName: string): ISCRTextLines;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTextLines
// Help String      : TextLines Class 12.0
// Default Interface: ISCRTextLines
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTextLinesProperties= class;
{$ENDIF}
  TTextLines = class(TOleServer)
  private
    FIntf:        ISCRTextLines;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTextLinesProperties;
    function      GetServerProperties: TTextLinesProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRTextLines;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRTextLine;
    procedure Set_Item(Index: Integer; const ppVal: ISCRTextLine);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRTextLines);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRTextLines;
    procedure CopyTo(const TextLines: ISCRTextLines; DeepCopy: WordBool);
    function  Equals(const TextLines: ISCRTextLines): WordBool;
    procedure Add(const TextLine: ISCRTextLine);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const TextLine: ISCRTextLine);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const TextLine: ISCRTextLine): Integer;
    property  DefaultInterface: ISCRTextLines read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRTextLine read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTextLinesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTextLines
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTextLinesProperties = class(TPersistent)
  private
    FServer:    TTextLines;
    function    GetDefaultInterface: ISCRTextLines;
    constructor Create(AServer: TTextLines);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRTextLine;
    procedure Set_Item(Index: Integer; const ppVal: ISCRTextLine);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRTextLines read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGroupTreeNodeID provides a Create and CreateRemote method to          
// create instances of the default interface ISCRGroupTreeNodeID exposed by              
// the CoClass GroupTreeNodeID. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGroupTreeNodeID = class
    class function Create: ISCRGroupTreeNodeID;
    class function CreateRemote(const MachineName: string): ISCRGroupTreeNodeID;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGroupTreeNodeID
// Help String      : GroupTreeNodeID Class 12.0
// Default Interface: ISCRGroupTreeNodeID
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGroupTreeNodeIDProperties= class;
{$ENDIF}
  TGroupTreeNodeID = class(TOleServer)
  private
    FIntf:        ISCRGroupTreeNodeID;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGroupTreeNodeIDProperties;
    function      GetServerProperties: TGroupTreeNodeIDProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRGroupTreeNodeID;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_GroupLevel: LongWord;
    procedure Set_GroupLevel(pVal: LongWord);
    function  Get_GroupPath: OleVariant;
    procedure Set_GroupPath(pVal: OleVariant);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRGroupTreeNodeID);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRGroupTreeNodeID;
    procedure CopyTo(const GroupTreeNodeID: ISCRGroupTreeNodeID; DeepCopy: WordBool);
    function  Equals(const GroupTreeNodeID: ISCRGroupTreeNodeID): WordBool;
    procedure MatchID(const nodeID: ISCRGroupTreeNodeID; out pMatched: WordBool);
    property  DefaultInterface: ISCRGroupTreeNodeID read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property GroupPath: OleVariant read Get_GroupPath write Set_GroupPath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property GroupLevel: LongWord read Get_GroupLevel write Set_GroupLevel;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGroupTreeNodeIDProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGroupTreeNodeID
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGroupTreeNodeIDProperties = class(TPersistent)
  private
    FServer:    TGroupTreeNodeID;
    function    GetDefaultInterface: ISCRGroupTreeNodeID;
    constructor Create(AServer: TGroupTreeNodeID);
  protected
    function  Get_ClassName: WideString;
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_GroupLevel: LongWord;
    procedure Set_GroupLevel(pVal: LongWord);
    function  Get_GroupPath: OleVariant;
    procedure Set_GroupPath(pVal: OleVariant);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
  public
    property DefaultInterface: ISCRGroupTreeNodeID read GetDefaultInterface;
  published
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property GroupLevel: LongWord read Get_GroupLevel write Set_GroupLevel;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSectionInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRSectionInstance exposed by              
// the CoClass SectionInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSectionInstance = class
    class function Create: ISCRSectionInstance;
    class function CreateRemote(const MachineName: string): ISCRSectionInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSectionInstance
// Help String      : SectionInstance Class 12.0
// Default Interface: ISCRSectionInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSectionInstanceProperties= class;
{$ENDIF}
  TSectionInstance = class(TOleServer)
  private
    FIntf:        ISCRSectionInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSectionInstanceProperties;
    function      GetServerProperties: TSectionInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRSectionInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetInPageX: Integer;
    procedure Set_OffsetInPageX(pVal: Integer);
    function  Get_OffsetInPageY: Integer;
    procedure Set_OffsetInPageY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_BackgroundColor: OLE_COLOR;
    procedure Set_BackgroundColor(pVal: OLE_COLOR);
    function  Get_Kind: CrAreaSectionKindEnum;
    procedure Set_Kind(pVal: CrAreaSectionKindEnum);
    function  Get_GroupTreeNodeID: ISCRGroupTreeNodeID;
    procedure Set_GroupTreeNodeID(const pVal: ISCRGroupTreeNodeID);
    function  Get_EnableUnderlaySection: WordBool;
    procedure Set_EnableUnderlaySection(pVal: WordBool);
    function  Get_ReportObjectInstances: ISCRReportObjectInstances;
    procedure Set_ReportObjectInstances(const pVal: ISCRReportObjectInstances);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_SectionName: WideString;
    procedure Set_SectionName(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRSectionInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRSectionInstance;
    procedure CopyTo(const SectionInstance: ISCRSectionInstance; DeepCopy: WordBool);
    function  Equals(const SectionInstance: ISCRSectionInstance): WordBool;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    property  DefaultInterface: ISCRSectionInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property OffsetInPageX: Integer read Get_OffsetInPageX write Set_OffsetInPageX;
    property OffsetInPageY: Integer read Get_OffsetInPageY write Set_OffsetInPageY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
    property Kind: CrAreaSectionKindEnum read Get_Kind write Set_Kind;
    property GroupTreeNodeID: ISCRGroupTreeNodeID read Get_GroupTreeNodeID write Set_GroupTreeNodeID;
    property EnableUnderlaySection: WordBool read Get_EnableUnderlaySection write Set_EnableUnderlaySection;
    property ReportObjectInstances: ISCRReportObjectInstances read Get_ReportObjectInstances write Set_ReportObjectInstances;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property SectionName: WideString read Get_SectionName write Set_SectionName;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSectionInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSectionInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSectionInstanceProperties = class(TPersistent)
  private
    FServer:    TSectionInstance;
    function    GetDefaultInterface: ISCRSectionInstance;
    constructor Create(AServer: TSectionInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetInPageX: Integer;
    procedure Set_OffsetInPageX(pVal: Integer);
    function  Get_OffsetInPageY: Integer;
    procedure Set_OffsetInPageY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_BackgroundColor: OLE_COLOR;
    procedure Set_BackgroundColor(pVal: OLE_COLOR);
    function  Get_Kind: CrAreaSectionKindEnum;
    procedure Set_Kind(pVal: CrAreaSectionKindEnum);
    function  Get_GroupTreeNodeID: ISCRGroupTreeNodeID;
    procedure Set_GroupTreeNodeID(const pVal: ISCRGroupTreeNodeID);
    function  Get_EnableUnderlaySection: WordBool;
    procedure Set_EnableUnderlaySection(pVal: WordBool);
    function  Get_ReportObjectInstances: ISCRReportObjectInstances;
    procedure Set_ReportObjectInstances(const pVal: ISCRReportObjectInstances);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_SectionName: WideString;
    procedure Set_SectionName(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
  public
    property DefaultInterface: ISCRSectionInstance read GetDefaultInterface;
  published
    property OffsetInPageX: Integer read Get_OffsetInPageX write Set_OffsetInPageX;
    property OffsetInPageY: Integer read Get_OffsetInPageY write Set_OffsetInPageY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
    property Kind: CrAreaSectionKindEnum read Get_Kind write Set_Kind;
    property GroupTreeNodeID: ISCRGroupTreeNodeID read Get_GroupTreeNodeID write Set_GroupTreeNodeID;
    property EnableUnderlaySection: WordBool read Get_EnableUnderlaySection write Set_EnableUnderlaySection;
    property ReportObjectInstances: ISCRReportObjectInstances read Get_ReportObjectInstances write Set_ReportObjectInstances;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property SectionName: WideString read Get_SectionName write Set_SectionName;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSubreportObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRSubreportObjectInstance exposed by              
// the CoClass SubreportObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSubreportObjectInstance = class
    class function Create: ISCRSubreportObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRSubreportObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSubreportObjectInstance
// Help String      : SubreportObjectInstance Class 12.0
// Default Interface: ISCRSubreportObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSubreportObjectInstanceProperties= class;
{$ENDIF}
  TSubreportObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRSubreportObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSubreportObjectInstanceProperties;
    function      GetServerProperties: TSubreportObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRSubreportObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_SubreportName: WideString;
    procedure Set_SubreportName(const pVal: WideString);
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_TabText: WideString;
    procedure Set_TabText(const pVal: WideString);
    function  Get_SubreportPageObject: ISCRPageObjectInstance;
    procedure Set_SubreportPageObject(const pVal: ISCRPageObjectInstance);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRSubreportObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCRSubreportObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property SubreportName: WideString read Get_SubreportName write Set_SubreportName;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property TabText: WideString read Get_TabText write Set_TabText;
    property SubreportPageObject: ISCRPageObjectInstance read Get_SubreportPageObject write Set_SubreportPageObject;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSubreportObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSubreportObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSubreportObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TSubreportObjectInstance;
    function    GetDefaultInterface: ISCRSubreportObjectInstance;
    constructor Create(AServer: TSubreportObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_SubreportName: WideString;
    procedure Set_SubreportName(const pVal: WideString);
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_TabText: WideString;
    procedure Set_TabText(const pVal: WideString);
    function  Get_SubreportPageObject: ISCRPageObjectInstance;
    procedure Set_SubreportPageObject(const pVal: ISCRPageObjectInstance);
  public
    property DefaultInterface: ISCRSubreportObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property SubreportName: WideString read Get_SubreportName write Set_SubreportName;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property TabText: WideString read Get_TabText write Set_TabText;
    property SubreportPageObject: ISCRPageObjectInstance read Get_SubreportPageObject write Set_SubreportPageObject;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoOnDemandSubreportObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCROnDemandSubreportObjectInstance exposed by              
// the CoClass OnDemandSubreportObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOnDemandSubreportObjectInstance = class
    class function Create: ISCROnDemandSubreportObjectInstance;
    class function CreateRemote(const MachineName: string): ISCROnDemandSubreportObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TOnDemandSubreportObjectInstance
// Help String      : OnDemandSubreportObjectInstance Class 12.0
// Default Interface: ISCROnDemandSubreportObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TOnDemandSubreportObjectInstanceProperties= class;
{$ENDIF}
  TOnDemandSubreportObjectInstance = class(TOleServer)
  private
    FIntf:        ISCROnDemandSubreportObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TOnDemandSubreportObjectInstanceProperties;
    function      GetServerProperties: TOnDemandSubreportObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCROnDemandSubreportObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_SubreportName: WideString;
    procedure Set_SubreportName(const pVal: WideString);
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_TabText: WideString;
    procedure Set_TabText(const pVal: WideString);
    function  Get_OnDemandSubreportIndex: Integer;
    procedure Set_OnDemandSubreportIndex(pVal: Integer);
    function  Get_OnDemandSubreportDisplayString: WideString;
    procedure Set_OnDemandSubreportDisplayString(const pVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCROnDemandSubreportObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCROnDemandSubreportObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property SubreportName: WideString read Get_SubreportName write Set_SubreportName;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property TabText: WideString read Get_TabText write Set_TabText;
    property OnDemandSubreportIndex: Integer read Get_OnDemandSubreportIndex write Set_OnDemandSubreportIndex;
    property OnDemandSubreportDisplayString: WideString read Get_OnDemandSubreportDisplayString write Set_OnDemandSubreportDisplayString;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TOnDemandSubreportObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TOnDemandSubreportObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TOnDemandSubreportObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TOnDemandSubreportObjectInstance;
    function    GetDefaultInterface: ISCROnDemandSubreportObjectInstance;
    constructor Create(AServer: TOnDemandSubreportObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_SubreportName: WideString;
    procedure Set_SubreportName(const pVal: WideString);
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_TabText: WideString;
    procedure Set_TabText(const pVal: WideString);
    function  Get_OnDemandSubreportIndex: Integer;
    procedure Set_OnDemandSubreportIndex(pVal: Integer);
    function  Get_OnDemandSubreportDisplayString: WideString;
    procedure Set_OnDemandSubreportDisplayString(const pVal: WideString);
  public
    property DefaultInterface: ISCROnDemandSubreportObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property SubreportName: WideString read Get_SubreportName write Set_SubreportName;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property TabText: WideString read Get_TabText write Set_TabText;
    property OnDemandSubreportIndex: Integer read Get_OnDemandSubreportIndex write Set_OnDemandSubreportIndex;
    property OnDemandSubreportDisplayString: WideString read Get_OnDemandSubreportDisplayString write Set_OnDemandSubreportDisplayString;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSectionInstances provides a Create and CreateRemote method to          
// create instances of the default interface ISCRSectionInstances exposed by              
// the CoClass SectionInstances. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSectionInstances = class
    class function Create: ISCRSectionInstances;
    class function CreateRemote(const MachineName: string): ISCRSectionInstances;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSectionInstances
// Help String      : SectionInstances Class 12.0
// Default Interface: ISCRSectionInstances
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSectionInstancesProperties= class;
{$ENDIF}
  TSectionInstances = class(TOleServer)
  private
    FIntf:        ISCRSectionInstances;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSectionInstancesProperties;
    function      GetServerProperties: TSectionInstancesProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRSectionInstances;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRSectionInstance;
    procedure Set_Item(Index: Integer; const ppVal: ISCRSectionInstance);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRSectionInstances);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRSectionInstances;
    procedure CopyTo(const SectionInstances: ISCRSectionInstances; DeepCopy: WordBool);
    function  Equals(const SectionInstances: ISCRSectionInstances): WordBool;
    procedure Add(const SectionInstance: ISCRSectionInstance);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const SectionInstance: ISCRSectionInstance);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const SectionInstance: ISCRSectionInstance): Integer;
    property  DefaultInterface: ISCRSectionInstances read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRSectionInstance read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSectionInstancesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSectionInstances
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSectionInstancesProperties = class(TPersistent)
  private
    FServer:    TSectionInstances;
    function    GetDefaultInterface: ISCRSectionInstances;
    constructor Create(AServer: TSectionInstances);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRSectionInstance;
    procedure Set_Item(Index: Integer; const ppVal: ISCRSectionInstance);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRSectionInstances read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoPageObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRPageObjectInstance exposed by              
// the CoClass PageObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPageObjectInstance = class
    class function Create: ISCRPageObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRPageObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPageObjectInstance
// Help String      : PageObjectInstance Class 12.0
// Default Interface: ISCRPageObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TPageObjectInstanceProperties= class;
{$ENDIF}
  TPageObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRPageObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TPageObjectInstanceProperties;
    function      GetServerProperties: TPageObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRPageObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_PageWidth: Integer;
    procedure Set_PageWidth(pVal: Integer);
    function  Get_PageHeight: Integer;
    procedure Set_PageHeight(pVal: Integer);
    function  Get_LeftMargin: Integer;
    procedure Set_LeftMargin(pVal: Integer);
    function  Get_TopMargin: Integer;
    procedure Set_TopMargin(pVal: Integer);
    function  Get_RightMargin: Integer;
    procedure Set_RightMargin(pVal: Integer);
    function  Get_BottomMargin: Integer;
    procedure Set_BottomMargin(pVal: Integer);
    function  Get_PageNumber: Integer;
    procedure Set_PageNumber(pVal: Integer);
    function  Get_LastPageNumber: Integer;
    procedure Set_LastPageNumber(pVal: Integer);
    function  Get_IsPageComplete: WordBool;
    procedure Set_IsPageComplete(pVal: WordBool);
    function  Get_SectionInstances: ISCRSectionInstances;
    procedure Set_SectionInstances(const pVal: ISCRSectionInstances);
    function  Get_LineObjectInstances: ISCRLineObjectInstances;
    procedure Set_LineObjectInstances(const pVal: ISCRLineObjectInstances);
    function  Get_BoxObjectInstances: ISCRBoxObjectInstances;
    procedure Set_BoxObjectInstances(const pVal: ISCRBoxObjectInstances);
    function  Get_ReportName: WideString;
    procedure Set_ReportName(const pVal: WideString);
    function  Get_DrillDownContext: ISCRGroupTreeNodeID;
    procedure Set_DrillDownContext(const pVal: ISCRGroupTreeNodeID);
    function  Get_SubreportContext: ISCRSubreportContext;
    procedure Set_SubreportContext(const pVal: ISCRSubreportContext);
    function  Get_IsLastPage: WordBool;
    procedure Set_IsLastPage(pVal: WordBool);
    function  Get_ReportTitle: WideString;
    procedure Set_ReportTitle(const pVal: WideString);
    function  Get_IsLastPageKnown: WordBool;
    procedure Set_IsLastPageKnown(pVal: WordBool);
    function  Get_IsShowGroupTree: WordBool;
    procedure Set_IsShowGroupTree(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRPageObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRPageObjectInstance;
    procedure CopyTo(const PageObjectInstance: ISCRPageObjectInstance; DeepCopy: WordBool);
    function  Equals(const PageObjectInstance: ISCRPageObjectInstance): WordBool;
    procedure getPrinterInfo(out bstrDriverName: PWord1; 
                             out paperOrientation: CrPaperOrientationEnum; 
                             out paperSize: CrPaperSizeEnum; out pPaperWidth: LongWord; 
                             out pPaperLength: LongWord; out pUseDefaultPrinter: WordBool; 
                             out pUseDefaultPrinterSettings: WordBool);
    procedure setPrinterInfo(var bstrDriverName: Word; paperOrientation: CrPaperOrientationEnum; 
                             paperSize: CrPaperSizeEnum; paperWidth: LongWord; 
                             paperLength: LongWord; vbUseDefaultPrinter: WordBool; 
                             vbUseDefaultPrinterSettings: WordBool);
    property  DefaultInterface: ISCRPageObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property PageWidth: Integer read Get_PageWidth write Set_PageWidth;
    property PageHeight: Integer read Get_PageHeight write Set_PageHeight;
    property LeftMargin: Integer read Get_LeftMargin write Set_LeftMargin;
    property TopMargin: Integer read Get_TopMargin write Set_TopMargin;
    property RightMargin: Integer read Get_RightMargin write Set_RightMargin;
    property BottomMargin: Integer read Get_BottomMargin write Set_BottomMargin;
    property PageNumber: Integer read Get_PageNumber write Set_PageNumber;
    property LastPageNumber: Integer read Get_LastPageNumber write Set_LastPageNumber;
    property IsPageComplete: WordBool read Get_IsPageComplete write Set_IsPageComplete;
    property SectionInstances: ISCRSectionInstances read Get_SectionInstances write Set_SectionInstances;
    property LineObjectInstances: ISCRLineObjectInstances read Get_LineObjectInstances write Set_LineObjectInstances;
    property BoxObjectInstances: ISCRBoxObjectInstances read Get_BoxObjectInstances write Set_BoxObjectInstances;
    property ReportName: WideString read Get_ReportName write Set_ReportName;
    property DrillDownContext: ISCRGroupTreeNodeID read Get_DrillDownContext write Set_DrillDownContext;
    property SubreportContext: ISCRSubreportContext read Get_SubreportContext write Set_SubreportContext;
    property IsLastPage: WordBool read Get_IsLastPage write Set_IsLastPage;
    property ReportTitle: WideString read Get_ReportTitle write Set_ReportTitle;
    property IsLastPageKnown: WordBool read Get_IsLastPageKnown write Set_IsLastPageKnown;
    property IsShowGroupTree: WordBool read Get_IsShowGroupTree write Set_IsShowGroupTree;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TPageObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TPageObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TPageObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TPageObjectInstance;
    function    GetDefaultInterface: ISCRPageObjectInstance;
    constructor Create(AServer: TPageObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_PageWidth: Integer;
    procedure Set_PageWidth(pVal: Integer);
    function  Get_PageHeight: Integer;
    procedure Set_PageHeight(pVal: Integer);
    function  Get_LeftMargin: Integer;
    procedure Set_LeftMargin(pVal: Integer);
    function  Get_TopMargin: Integer;
    procedure Set_TopMargin(pVal: Integer);
    function  Get_RightMargin: Integer;
    procedure Set_RightMargin(pVal: Integer);
    function  Get_BottomMargin: Integer;
    procedure Set_BottomMargin(pVal: Integer);
    function  Get_PageNumber: Integer;
    procedure Set_PageNumber(pVal: Integer);
    function  Get_LastPageNumber: Integer;
    procedure Set_LastPageNumber(pVal: Integer);
    function  Get_IsPageComplete: WordBool;
    procedure Set_IsPageComplete(pVal: WordBool);
    function  Get_SectionInstances: ISCRSectionInstances;
    procedure Set_SectionInstances(const pVal: ISCRSectionInstances);
    function  Get_LineObjectInstances: ISCRLineObjectInstances;
    procedure Set_LineObjectInstances(const pVal: ISCRLineObjectInstances);
    function  Get_BoxObjectInstances: ISCRBoxObjectInstances;
    procedure Set_BoxObjectInstances(const pVal: ISCRBoxObjectInstances);
    function  Get_ReportName: WideString;
    procedure Set_ReportName(const pVal: WideString);
    function  Get_DrillDownContext: ISCRGroupTreeNodeID;
    procedure Set_DrillDownContext(const pVal: ISCRGroupTreeNodeID);
    function  Get_SubreportContext: ISCRSubreportContext;
    procedure Set_SubreportContext(const pVal: ISCRSubreportContext);
    function  Get_IsLastPage: WordBool;
    procedure Set_IsLastPage(pVal: WordBool);
    function  Get_ReportTitle: WideString;
    procedure Set_ReportTitle(const pVal: WideString);
    function  Get_IsLastPageKnown: WordBool;
    procedure Set_IsLastPageKnown(pVal: WordBool);
    function  Get_IsShowGroupTree: WordBool;
    procedure Set_IsShowGroupTree(pVal: WordBool);
  public
    property DefaultInterface: ISCRPageObjectInstance read GetDefaultInterface;
  published
    property PageWidth: Integer read Get_PageWidth write Set_PageWidth;
    property PageHeight: Integer read Get_PageHeight write Set_PageHeight;
    property LeftMargin: Integer read Get_LeftMargin write Set_LeftMargin;
    property TopMargin: Integer read Get_TopMargin write Set_TopMargin;
    property RightMargin: Integer read Get_RightMargin write Set_RightMargin;
    property BottomMargin: Integer read Get_BottomMargin write Set_BottomMargin;
    property PageNumber: Integer read Get_PageNumber write Set_PageNumber;
    property LastPageNumber: Integer read Get_LastPageNumber write Set_LastPageNumber;
    property IsPageComplete: WordBool read Get_IsPageComplete write Set_IsPageComplete;
    property SectionInstances: ISCRSectionInstances read Get_SectionInstances write Set_SectionInstances;
    property LineObjectInstances: ISCRLineObjectInstances read Get_LineObjectInstances write Set_LineObjectInstances;
    property BoxObjectInstances: ISCRBoxObjectInstances read Get_BoxObjectInstances write Set_BoxObjectInstances;
    property ReportName: WideString read Get_ReportName write Set_ReportName;
    property DrillDownContext: ISCRGroupTreeNodeID read Get_DrillDownContext write Set_DrillDownContext;
    property SubreportContext: ISCRSubreportContext read Get_SubreportContext write Set_SubreportContext;
    property IsLastPage: WordBool read Get_IsLastPage write Set_IsLastPage;
    property ReportTitle: WideString read Get_ReportTitle write Set_ReportTitle;
    property IsLastPageKnown: WordBool read Get_IsLastPageKnown write Set_IsLastPageKnown;
    property IsShowGroupTree: WordBool read Get_IsShowGroupTree write Set_IsShowGroupTree;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoStringFieldObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRStringFieldObjectInstance exposed by              
// the CoClass StringFieldObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStringFieldObjectInstance = class
    class function Create: ISCRStringFieldObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRStringFieldObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStringFieldObjectInstance
// Help String      : StringFieldObjectInstance Class 12.0
// Default Interface: ISCRStringFieldObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TStringFieldObjectInstanceProperties= class;
{$ENDIF}
  TStringFieldObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRStringFieldObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TStringFieldObjectInstanceProperties;
    function      GetServerProperties: TStringFieldObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRStringFieldObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_StartLineNumber: Integer;
    procedure Set_StartLineNumber(pVal: Integer);
    function  Get_EndLineNumber: Integer;
    procedure Set_EndLineNumber(pVal: Integer);
    function  Get_VerticalStartOffset: Integer;
    procedure Set_VerticalStartOffset(pVal: Integer);
    function  Get_Paragraphs: ISCRRuntimeParagraphs;
    procedure Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
    function  Get_FieldType: CrRuntimeFieldKindEnum;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum);
    function  Get_FieldValueType: CrFieldValueTypeEnum;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum);
    function  Get_IsConstantField: WordBool;
    procedure Set_IsConstantField(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRStringFieldObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    procedure SetUpDefaultObject(const bstrText: WideString);
    property  DefaultInterface: ISCRStringFieldObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property StartLineNumber: Integer read Get_StartLineNumber write Set_StartLineNumber;
    property EndLineNumber: Integer read Get_EndLineNumber write Set_EndLineNumber;
    property VerticalStartOffset: Integer read Get_VerticalStartOffset write Set_VerticalStartOffset;
    property Paragraphs: ISCRRuntimeParagraphs read Get_Paragraphs write Set_Paragraphs;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TStringFieldObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TStringFieldObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TStringFieldObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TStringFieldObjectInstance;
    function    GetDefaultInterface: ISCRStringFieldObjectInstance;
    constructor Create(AServer: TStringFieldObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_StartLineNumber: Integer;
    procedure Set_StartLineNumber(pVal: Integer);
    function  Get_EndLineNumber: Integer;
    procedure Set_EndLineNumber(pVal: Integer);
    function  Get_VerticalStartOffset: Integer;
    procedure Set_VerticalStartOffset(pVal: Integer);
    function  Get_Paragraphs: ISCRRuntimeParagraphs;
    procedure Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
    function  Get_FieldType: CrRuntimeFieldKindEnum;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum);
    function  Get_FieldValueType: CrFieldValueTypeEnum;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum);
    function  Get_IsConstantField: WordBool;
    procedure Set_IsConstantField(pVal: WordBool);
  public
    property DefaultInterface: ISCRStringFieldObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property StartLineNumber: Integer read Get_StartLineNumber write Set_StartLineNumber;
    property EndLineNumber: Integer read Get_EndLineNumber write Set_EndLineNumber;
    property VerticalStartOffset: Integer read Get_VerticalStartOffset write Set_VerticalStartOffset;
    property Paragraphs: ISCRRuntimeParagraphs read Get_Paragraphs write Set_Paragraphs;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoStringFieldObjectInstanceInGrid provides a Create and CreateRemote method to          
// create instances of the default interface ISCRStringFieldObjectInstanceInGrid exposed by              
// the CoClass StringFieldObjectInstanceInGrid. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStringFieldObjectInstanceInGrid = class
    class function Create: ISCRStringFieldObjectInstanceInGrid;
    class function CreateRemote(const MachineName: string): ISCRStringFieldObjectInstanceInGrid;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStringFieldObjectInstanceInGrid
// Help String      : StringFieldObjectInstanceInGrid Class 12.0
// Default Interface: ISCRStringFieldObjectInstanceInGrid
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TStringFieldObjectInstanceInGridProperties= class;
{$ENDIF}
  TStringFieldObjectInstanceInGrid = class(TOleServer)
  private
    FIntf:        ISCRStringFieldObjectInstanceInGrid;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TStringFieldObjectInstanceInGridProperties;
    function      GetServerProperties: TStringFieldObjectInstanceInGridProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRStringFieldObjectInstanceInGrid;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_StartLineNumber: Integer;
    procedure Set_StartLineNumber(pVal: Integer);
    function  Get_EndLineNumber: Integer;
    procedure Set_EndLineNumber(pVal: Integer);
    function  Get_VerticalStartOffset: Integer;
    procedure Set_VerticalStartOffset(pVal: Integer);
    function  Get_Paragraphs: ISCRRuntimeParagraphs;
    procedure Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
    function  Get_FieldType: CrRuntimeFieldKindEnum;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum);
    function  Get_FieldValueType: CrFieldValueTypeEnum;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum);
    function  Get_IsConstantField: WordBool;
    procedure Set_IsConstantField(pVal: WordBool);
    function  Get_RowNumber: Integer;
    procedure Set_RowNumber(pVal: Integer);
    function  Get_ColumnNumber: Integer;
    procedure Set_ColumnNumber(pVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRStringFieldObjectInstanceInGrid);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    procedure SetUpDefaultObject(const bstrText: WideString);
    property  DefaultInterface: ISCRStringFieldObjectInstanceInGrid read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property StartLineNumber: Integer read Get_StartLineNumber write Set_StartLineNumber;
    property EndLineNumber: Integer read Get_EndLineNumber write Set_EndLineNumber;
    property VerticalStartOffset: Integer read Get_VerticalStartOffset write Set_VerticalStartOffset;
    property Paragraphs: ISCRRuntimeParagraphs read Get_Paragraphs write Set_Paragraphs;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TStringFieldObjectInstanceInGridProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TStringFieldObjectInstanceInGrid
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TStringFieldObjectInstanceInGridProperties = class(TPersistent)
  private
    FServer:    TStringFieldObjectInstanceInGrid;
    function    GetDefaultInterface: ISCRStringFieldObjectInstanceInGrid;
    constructor Create(AServer: TStringFieldObjectInstanceInGrid);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_StartLineNumber: Integer;
    procedure Set_StartLineNumber(pVal: Integer);
    function  Get_EndLineNumber: Integer;
    procedure Set_EndLineNumber(pVal: Integer);
    function  Get_VerticalStartOffset: Integer;
    procedure Set_VerticalStartOffset(pVal: Integer);
    function  Get_Paragraphs: ISCRRuntimeParagraphs;
    procedure Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
    function  Get_FieldType: CrRuntimeFieldKindEnum;
    procedure Set_FieldType(pVal: CrRuntimeFieldKindEnum);
    function  Get_FieldValueType: CrFieldValueTypeEnum;
    procedure Set_FieldValueType(pVal: CrFieldValueTypeEnum);
    function  Get_IsConstantField: WordBool;
    procedure Set_IsConstantField(pVal: WordBool);
    function  Get_RowNumber: Integer;
    procedure Set_RowNumber(pVal: Integer);
    function  Get_ColumnNumber: Integer;
    procedure Set_ColumnNumber(pVal: Integer);
  public
    property DefaultInterface: ISCRStringFieldObjectInstanceInGrid read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property StartLineNumber: Integer read Get_StartLineNumber write Set_StartLineNumber;
    property EndLineNumber: Integer read Get_EndLineNumber write Set_EndLineNumber;
    property VerticalStartOffset: Integer read Get_VerticalStartOffset write Set_VerticalStartOffset;
    property Paragraphs: ISCRRuntimeParagraphs read Get_Paragraphs write Set_Paragraphs;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
    property FieldType: CrRuntimeFieldKindEnum read Get_FieldType write Set_FieldType;
    property FieldValueType: CrFieldValueTypeEnum read Get_FieldValueType write Set_FieldValueType;
    property IsConstantField: WordBool read Get_IsConstantField write Set_IsConstantField;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSubreportContext provides a Create and CreateRemote method to          
// create instances of the default interface ISCRSubreportContext exposed by              
// the CoClass SubreportContext. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSubreportContext = class
    class function Create: ISCRSubreportContext;
    class function CreateRemote(const MachineName: string): ISCRSubreportContext;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSubreportContext
// Help String      : SubreportContext Class 12.0
// Default Interface: ISCRSubreportContext
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSubreportContextProperties= class;
{$ENDIF}
  TSubreportContext = class(TOleServer)
  private
    FIntf:        ISCRSubreportContext;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSubreportContextProperties;
    function      GetServerProperties: TSubreportContextProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRSubreportContext;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_SubreportName: WideString;
    procedure Set_SubreportName(const pVal: WideString);
    function  Get_SubreportIndex: Integer;
    procedure Set_SubreportIndex(pVal: Integer);
    function  Get_PageNumber: Integer;
    procedure Set_PageNumber(pVal: Integer);
    function  Get_ContainingGroupInfo: ISCRGroupTreeNodeID;
    procedure Set_ContainingGroupInfo(const pVal: ISCRGroupTreeNodeID);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRSubreportContext);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRSubreportContext;
    procedure CopyTo(const SubreportContext: ISCRSubreportContext; DeepCopy: WordBool);
    function  Equals(const SubreportContext: ISCRSubreportContext): WordBool;
    procedure MatchSubreport(const context: ISCRSubreportContext; out pMatched: WordBool);
    property  DefaultInterface: ISCRSubreportContext read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property SubreportName: WideString read Get_SubreportName write Set_SubreportName;
    property SubreportIndex: Integer read Get_SubreportIndex write Set_SubreportIndex;
    property PageNumber: Integer read Get_PageNumber write Set_PageNumber;
    property ContainingGroupInfo: ISCRGroupTreeNodeID read Get_ContainingGroupInfo write Set_ContainingGroupInfo;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSubreportContextProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSubreportContext
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSubreportContextProperties = class(TPersistent)
  private
    FServer:    TSubreportContext;
    function    GetDefaultInterface: ISCRSubreportContext;
    constructor Create(AServer: TSubreportContext);
  protected
    function  Get_ClassName: WideString;
    function  Get_SubreportName: WideString;
    procedure Set_SubreportName(const pVal: WideString);
    function  Get_SubreportIndex: Integer;
    procedure Set_SubreportIndex(pVal: Integer);
    function  Get_PageNumber: Integer;
    procedure Set_PageNumber(pVal: Integer);
    function  Get_ContainingGroupInfo: ISCRGroupTreeNodeID;
    procedure Set_ContainingGroupInfo(const pVal: ISCRGroupTreeNodeID);
  public
    property DefaultInterface: ISCRSubreportContext read GetDefaultInterface;
  published
    property SubreportName: WideString read Get_SubreportName write Set_SubreportName;
    property SubreportIndex: Integer read Get_SubreportIndex write Set_SubreportIndex;
    property PageNumber: Integer read Get_PageNumber write Set_PageNumber;
    property ContainingGroupInfo: ISCRGroupTreeNodeID read Get_ContainingGroupInfo write Set_ContainingGroupInfo;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoLineObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRDrawingObjectInstance exposed by              
// the CoClass LineObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLineObjectInstance = class
    class function Create: ISCRDrawingObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRDrawingObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLineObjectInstance
// Help String      : LineObjectInstance Class 12.0
// Default Interface: ISCRDrawingObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TLineObjectInstanceProperties= class;
{$ENDIF}
  TLineObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRDrawingObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TLineObjectInstanceProperties;
    function      GetServerProperties: TLineObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRDrawingObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_StartX: Integer;
    procedure Set_StartX(pVal: Integer);
    function  Get_StartY: Integer;
    procedure Set_StartY(pVal: Integer);
    function  Get_EndX: Integer;
    procedure Set_EndX(pVal: Integer);
    function  Get_EndY: Integer;
    procedure Set_EndY(pVal: Integer);
    function  Get_LineColor: OLE_COLOR;
    procedure Set_LineColor(pVal: OLE_COLOR);
    function  Get_LineStyle: CrLineStyleEnum;
    procedure Set_LineStyle(pVal: CrLineStyleEnum);
    function  Get_LineThickness: Integer;
    procedure Set_LineThickness(pVal: Integer);
    function  Get_ObjectName: WideString;
    procedure Set_ObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRDrawingObjectInstance);
    procedure Disconnect; override;
    property  DefaultInterface: ISCRDrawingObjectInstance read GetDefaultInterface;
    property StartX: Integer read Get_StartX write Set_StartX;
    property StartY: Integer read Get_StartY write Set_StartY;
    property EndX: Integer read Get_EndX write Set_EndX;
    property EndY: Integer read Get_EndY write Set_EndY;
    property LineColor: OLE_COLOR read Get_LineColor write Set_LineColor;
    property LineStyle: CrLineStyleEnum read Get_LineStyle write Set_LineStyle;
    property LineThickness: Integer read Get_LineThickness write Set_LineThickness;
    property ObjectName: WideString read Get_ObjectName write Set_ObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TLineObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TLineObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TLineObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TLineObjectInstance;
    function    GetDefaultInterface: ISCRDrawingObjectInstance;
    constructor Create(AServer: TLineObjectInstance);
  protected
    function  Get_StartX: Integer;
    procedure Set_StartX(pVal: Integer);
    function  Get_StartY: Integer;
    procedure Set_StartY(pVal: Integer);
    function  Get_EndX: Integer;
    procedure Set_EndX(pVal: Integer);
    function  Get_EndY: Integer;
    procedure Set_EndY(pVal: Integer);
    function  Get_LineColor: OLE_COLOR;
    procedure Set_LineColor(pVal: OLE_COLOR);
    function  Get_LineStyle: CrLineStyleEnum;
    procedure Set_LineStyle(pVal: CrLineStyleEnum);
    function  Get_LineThickness: Integer;
    procedure Set_LineThickness(pVal: Integer);
    function  Get_ObjectName: WideString;
    procedure Set_ObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
  public
    property DefaultInterface: ISCRDrawingObjectInstance read GetDefaultInterface;
  published
    property StartX: Integer read Get_StartX write Set_StartX;
    property StartY: Integer read Get_StartY write Set_StartY;
    property EndX: Integer read Get_EndX write Set_EndX;
    property EndY: Integer read Get_EndY write Set_EndY;
    property LineColor: OLE_COLOR read Get_LineColor write Set_LineColor;
    property LineStyle: CrLineStyleEnum read Get_LineStyle write Set_LineStyle;
    property LineThickness: Integer read Get_LineThickness write Set_LineThickness;
    property ObjectName: WideString read Get_ObjectName write Set_ObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBoxObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRBoxObjectInstance exposed by              
// the CoClass BoxObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBoxObjectInstance = class
    class function Create: ISCRBoxObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRBoxObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBoxObjectInstance
// Help String      : BoxObjectInstance Class 12.0
// Default Interface: ISCRBoxObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBoxObjectInstanceProperties= class;
{$ENDIF}
  TBoxObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRBoxObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBoxObjectInstanceProperties;
    function      GetServerProperties: TBoxObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRBoxObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_StartX: Integer;
    procedure Set_StartX(pVal: Integer);
    function  Get_StartY: Integer;
    procedure Set_StartY(pVal: Integer);
    function  Get_EndX: Integer;
    procedure Set_EndX(pVal: Integer);
    function  Get_EndY: Integer;
    procedure Set_EndY(pVal: Integer);
    function  Get_LineColor: OLE_COLOR;
    procedure Set_LineColor(pVal: OLE_COLOR);
    function  Get_LineStyle: CrLineStyleEnum;
    procedure Set_LineStyle(pVal: CrLineStyleEnum);
    function  Get_LineThickness: Integer;
    procedure Set_LineThickness(pVal: Integer);
    function  Get_ObjectName: WideString;
    procedure Set_ObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_ClassName: WideString;
    function  Get_FillColor: OLE_COLOR;
    procedure Set_FillColor(pVal: OLE_COLOR);
    function  Get_CornerEllipseWidth: Integer;
    procedure Set_CornerEllipseWidth(pVal: Integer);
    function  Get_CornerEllipseHeight: Integer;
    procedure Set_CornerEllipseHeight(pVal: Integer);
    function  Get_TopClosed: WordBool;
    procedure Set_TopClosed(pVal: WordBool);
    function  Get_BottomClosed: WordBool;
    procedure Set_BottomClosed(pVal: WordBool);
    function  Get_HasDropShadow: WordBool;
    procedure Set_HasDropShadow(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRBoxObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRBoxObjectInstance;
    procedure CopyTo(const BoxObjectInstance: ISCRBoxObjectInstance; DeepCopy: WordBool);
    function  Equals(const BoxObjectInstance: ISCRBoxObjectInstance): WordBool;
    property  DefaultInterface: ISCRBoxObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property StartX: Integer read Get_StartX write Set_StartX;
    property StartY: Integer read Get_StartY write Set_StartY;
    property EndX: Integer read Get_EndX write Set_EndX;
    property EndY: Integer read Get_EndY write Set_EndY;
    property LineColor: OLE_COLOR read Get_LineColor write Set_LineColor;
    property LineStyle: CrLineStyleEnum read Get_LineStyle write Set_LineStyle;
    property LineThickness: Integer read Get_LineThickness write Set_LineThickness;
    property ObjectName: WideString read Get_ObjectName write Set_ObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property FillColor: OLE_COLOR read Get_FillColor write Set_FillColor;
    property CornerEllipseWidth: Integer read Get_CornerEllipseWidth write Set_CornerEllipseWidth;
    property CornerEllipseHeight: Integer read Get_CornerEllipseHeight write Set_CornerEllipseHeight;
    property TopClosed: WordBool read Get_TopClosed write Set_TopClosed;
    property BottomClosed: WordBool read Get_BottomClosed write Set_BottomClosed;
    property HasDropShadow: WordBool read Get_HasDropShadow write Set_HasDropShadow;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBoxObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBoxObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBoxObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TBoxObjectInstance;
    function    GetDefaultInterface: ISCRBoxObjectInstance;
    constructor Create(AServer: TBoxObjectInstance);
  protected
    function  Get_StartX: Integer;
    procedure Set_StartX(pVal: Integer);
    function  Get_StartY: Integer;
    procedure Set_StartY(pVal: Integer);
    function  Get_EndX: Integer;
    procedure Set_EndX(pVal: Integer);
    function  Get_EndY: Integer;
    procedure Set_EndY(pVal: Integer);
    function  Get_LineColor: OLE_COLOR;
    procedure Set_LineColor(pVal: OLE_COLOR);
    function  Get_LineStyle: CrLineStyleEnum;
    procedure Set_LineStyle(pVal: CrLineStyleEnum);
    function  Get_LineThickness: Integer;
    procedure Set_LineThickness(pVal: Integer);
    function  Get_ObjectName: WideString;
    procedure Set_ObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_ClassName: WideString;
    function  Get_FillColor: OLE_COLOR;
    procedure Set_FillColor(pVal: OLE_COLOR);
    function  Get_CornerEllipseWidth: Integer;
    procedure Set_CornerEllipseWidth(pVal: Integer);
    function  Get_CornerEllipseHeight: Integer;
    procedure Set_CornerEllipseHeight(pVal: Integer);
    function  Get_TopClosed: WordBool;
    procedure Set_TopClosed(pVal: WordBool);
    function  Get_BottomClosed: WordBool;
    procedure Set_BottomClosed(pVal: WordBool);
    function  Get_HasDropShadow: WordBool;
    procedure Set_HasDropShadow(pVal: WordBool);
  public
    property DefaultInterface: ISCRBoxObjectInstance read GetDefaultInterface;
  published
    property StartX: Integer read Get_StartX write Set_StartX;
    property StartY: Integer read Get_StartY write Set_StartY;
    property EndX: Integer read Get_EndX write Set_EndX;
    property EndY: Integer read Get_EndY write Set_EndY;
    property LineColor: OLE_COLOR read Get_LineColor write Set_LineColor;
    property LineStyle: CrLineStyleEnum read Get_LineStyle write Set_LineStyle;
    property LineThickness: Integer read Get_LineThickness write Set_LineThickness;
    property ObjectName: WideString read Get_ObjectName write Set_ObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property FillColor: OLE_COLOR read Get_FillColor write Set_FillColor;
    property CornerEllipseWidth: Integer read Get_CornerEllipseWidth write Set_CornerEllipseWidth;
    property CornerEllipseHeight: Integer read Get_CornerEllipseHeight write Set_CornerEllipseHeight;
    property TopClosed: WordBool read Get_TopClosed write Set_TopClosed;
    property BottomClosed: WordBool read Get_BottomClosed write Set_BottomClosed;
    property HasDropShadow: WordBool read Get_HasDropShadow write Set_HasDropShadow;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMapObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRMapObjectInstance exposed by              
// the CoClass MapObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMapObjectInstance = class
    class function Create: ISCRMapObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRMapObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMapObjectInstance
// Help String      : MapObjectInstance Class 12.0
// Default Interface: ISCRMapObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMapObjectInstanceProperties= class;
{$ENDIF}
  TMapObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRMapObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMapObjectInstanceProperties;
    function      GetServerProperties: TMapObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRMapObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_ImageFormat: CrImageFormatEnum;
    procedure Set_ImageFormat(pVal: CrImageFormatEnum);
    function  Get_ImageData: ISequentialStream;
    procedure Set_ImageData(const pVal: ISequentialStream);
    function  Get_ImageByteArray: ISCRByteArray;
    procedure Set_ImageByteArray(const pVal: ISCRByteArray);
    function  Get_AnalysisGridType: CrAnalysisGridEnum;
    procedure Set_AnalysisGridType(pVal: CrAnalysisGridEnum);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRMapObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCRMapObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property ImageFormat: CrImageFormatEnum read Get_ImageFormat write Set_ImageFormat;
    property ImageData: ISequentialStream read Get_ImageData write Set_ImageData;
    property ImageByteArray: ISCRByteArray read Get_ImageByteArray write Set_ImageByteArray;
    property AnalysisGridType: CrAnalysisGridEnum read Get_AnalysisGridType write Set_AnalysisGridType;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMapObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMapObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMapObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TMapObjectInstance;
    function    GetDefaultInterface: ISCRMapObjectInstance;
    constructor Create(AServer: TMapObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_ImageFormat: CrImageFormatEnum;
    procedure Set_ImageFormat(pVal: CrImageFormatEnum);
    function  Get_ImageData: ISequentialStream;
    procedure Set_ImageData(const pVal: ISequentialStream);
    function  Get_ImageByteArray: ISCRByteArray;
    procedure Set_ImageByteArray(const pVal: ISCRByteArray);
    function  Get_AnalysisGridType: CrAnalysisGridEnum;
    procedure Set_AnalysisGridType(pVal: CrAnalysisGridEnum);
  public
    property DefaultInterface: ISCRMapObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property ImageFormat: CrImageFormatEnum read Get_ImageFormat write Set_ImageFormat;
    property ImageData: ISequentialStream read Get_ImageData write Set_ImageData;
    property ImageByteArray: ISCRByteArray read Get_ImageByteArray write Set_ImageByteArray;
    property AnalysisGridType: CrAnalysisGridEnum read Get_AnalysisGridType write Set_AnalysisGridType;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoOleObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCROleObjectInstance exposed by              
// the CoClass OleObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOleObjectInstance = class
    class function Create: ISCROleObjectInstance;
    class function CreateRemote(const MachineName: string): ISCROleObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TOleObjectInstance
// Help String      : OleObjectInstance Class 12.0
// Default Interface: ISCROleObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TOleObjectInstanceProperties= class;
{$ENDIF}
  TOleObjectInstance = class(TOleServer)
  private
    FIntf:        ISCROleObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TOleObjectInstanceProperties;
    function      GetServerProperties: TOleObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCROleObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_ImageFormat: CrImageFormatEnum;
    procedure Set_ImageFormat(pVal: CrImageFormatEnum);
    function  Get_ImageData: ISequentialStream;
    procedure Set_ImageData(const pVal: ISequentialStream);
    function  Get_ImageByteArray: ISCRByteArray;
    procedure Set_ImageByteArray(const pVal: ISCRByteArray);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCROleObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCROleObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property ImageFormat: CrImageFormatEnum read Get_ImageFormat write Set_ImageFormat;
    property ImageData: ISequentialStream read Get_ImageData write Set_ImageData;
    property ImageByteArray: ISCRByteArray read Get_ImageByteArray write Set_ImageByteArray;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TOleObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TOleObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TOleObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TOleObjectInstance;
    function    GetDefaultInterface: ISCROleObjectInstance;
    constructor Create(AServer: TOleObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_ImageFormat: CrImageFormatEnum;
    procedure Set_ImageFormat(pVal: CrImageFormatEnum);
    function  Get_ImageData: ISequentialStream;
    procedure Set_ImageData(const pVal: ISequentialStream);
    function  Get_ImageByteArray: ISCRByteArray;
    procedure Set_ImageByteArray(const pVal: ISCRByteArray);
  public
    property DefaultInterface: ISCROleObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property ImageFormat: CrImageFormatEnum read Get_ImageFormat write Set_ImageFormat;
    property ImageData: ISequentialStream read Get_ImageData write Set_ImageData;
    property ImageByteArray: ISCRByteArray read Get_ImageByteArray write Set_ImageByteArray;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFlashObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRFlashObjectInstance exposed by              
// the CoClass FlashObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFlashObjectInstance = class
    class function Create: ISCRFlashObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRFlashObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFlashObjectInstance
// Help String      : FlashObjectInstance Class 12.0
// Default Interface: ISCRFlashObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFlashObjectInstanceProperties= class;
{$ENDIF}
  TFlashObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRFlashObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFlashObjectInstanceProperties;
    function      GetServerProperties: TFlashObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRFlashObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_ImageFormat: CrImageFormatEnum;
    procedure Set_ImageFormat(pVal: CrImageFormatEnum);
    function  Get_ImageData: ISequentialStream;
    procedure Set_ImageData(const pVal: ISequentialStream);
    function  Get_ImageByteArray: ISCRByteArray;
    procedure Set_ImageByteArray(const pVal: ISCRByteArray);
    function  Get_SWFLocation: WideString;
    procedure Set_SWFLocation(const pVal: WideString);
    function  Get_ParamNames: ISCRStrings;
    procedure Set_ParamNames(const pVal: ISCRStrings);
    function  Get_ParamValues: ISCRStrings;
    procedure Set_ParamValues(const pVal: ISCRStrings);
    function  Get_IsEmbedded: WordBool;
    procedure Set_IsEmbedded(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRFlashObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCRFlashObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property ImageFormat: CrImageFormatEnum read Get_ImageFormat write Set_ImageFormat;
    property ImageData: ISequentialStream read Get_ImageData write Set_ImageData;
    property ImageByteArray: ISCRByteArray read Get_ImageByteArray write Set_ImageByteArray;
    property SWFLocation: WideString read Get_SWFLocation write Set_SWFLocation;
    property ParamNames: ISCRStrings read Get_ParamNames write Set_ParamNames;
    property ParamValues: ISCRStrings read Get_ParamValues write Set_ParamValues;
    property IsEmbedded: WordBool read Get_IsEmbedded write Set_IsEmbedded;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFlashObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFlashObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFlashObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TFlashObjectInstance;
    function    GetDefaultInterface: ISCRFlashObjectInstance;
    constructor Create(AServer: TFlashObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_ImageFormat: CrImageFormatEnum;
    procedure Set_ImageFormat(pVal: CrImageFormatEnum);
    function  Get_ImageData: ISequentialStream;
    procedure Set_ImageData(const pVal: ISequentialStream);
    function  Get_ImageByteArray: ISCRByteArray;
    procedure Set_ImageByteArray(const pVal: ISCRByteArray);
    function  Get_SWFLocation: WideString;
    procedure Set_SWFLocation(const pVal: WideString);
    function  Get_ParamNames: ISCRStrings;
    procedure Set_ParamNames(const pVal: ISCRStrings);
    function  Get_ParamValues: ISCRStrings;
    procedure Set_ParamValues(const pVal: ISCRStrings);
    function  Get_IsEmbedded: WordBool;
    procedure Set_IsEmbedded(pVal: WordBool);
  public
    property DefaultInterface: ISCRFlashObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property ImageFormat: CrImageFormatEnum read Get_ImageFormat write Set_ImageFormat;
    property ImageData: ISequentialStream read Get_ImageData write Set_ImageData;
    property ImageByteArray: ISCRByteArray read Get_ImageByteArray write Set_ImageByteArray;
    property SWFLocation: WideString read Get_SWFLocation write Set_SWFLocation;
    property ParamNames: ISCRStrings read Get_ParamNames write Set_ParamNames;
    property ParamValues: ISCRStrings read Get_ParamValues write Set_ParamValues;
    property IsEmbedded: WordBool read Get_IsEmbedded write Set_IsEmbedded;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBlobFieldObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRBlobFieldObjectInstance exposed by              
// the CoClass BlobFieldObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBlobFieldObjectInstance = class
    class function Create: ISCRBlobFieldObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRBlobFieldObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBlobFieldObjectInstance
// Help String      : BlobFieldObjectInstance Class 12.0
// Default Interface: ISCRBlobFieldObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBlobFieldObjectInstanceProperties= class;
{$ENDIF}
  TBlobFieldObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRBlobFieldObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBlobFieldObjectInstanceProperties;
    function      GetServerProperties: TBlobFieldObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRBlobFieldObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_ImageFormat: CrImageFormatEnum;
    procedure Set_ImageFormat(pVal: CrImageFormatEnum);
    function  Get_ImageData: ISequentialStream;
    procedure Set_ImageData(const pVal: ISequentialStream);
    function  Get_ImageByteArray: ISCRByteArray;
    procedure Set_ImageByteArray(const pVal: ISCRByteArray);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRBlobFieldObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCRBlobFieldObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property ImageFormat: CrImageFormatEnum read Get_ImageFormat write Set_ImageFormat;
    property ImageData: ISequentialStream read Get_ImageData write Set_ImageData;
    property ImageByteArray: ISCRByteArray read Get_ImageByteArray write Set_ImageByteArray;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBlobFieldObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBlobFieldObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBlobFieldObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TBlobFieldObjectInstance;
    function    GetDefaultInterface: ISCRBlobFieldObjectInstance;
    constructor Create(AServer: TBlobFieldObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_ImageFormat: CrImageFormatEnum;
    procedure Set_ImageFormat(pVal: CrImageFormatEnum);
    function  Get_ImageData: ISequentialStream;
    procedure Set_ImageData(const pVal: ISequentialStream);
    function  Get_ImageByteArray: ISCRByteArray;
    procedure Set_ImageByteArray(const pVal: ISCRByteArray);
    function  Get_FieldName: WideString;
    procedure Set_FieldName(const pVal: WideString);
  public
    property DefaultInterface: ISCRBlobFieldObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property ImageFormat: CrImageFormatEnum read Get_ImageFormat write Set_ImageFormat;
    property ImageData: ISequentialStream read Get_ImageData write Set_ImageData;
    property ImageByteArray: ISCRByteArray read Get_ImageByteArray write Set_ImageByteArray;
    property FieldName: WideString read Get_FieldName write Set_FieldName;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGridRowInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRGridRowInstance exposed by              
// the CoClass GridRowInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGridRowInstance = class
    class function Create: ISCRGridRowInstance;
    class function CreateRemote(const MachineName: string): ISCRGridRowInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGridRowInstance
// Help String      : GridRowInstance Class 12.0
// Default Interface: ISCRGridRowInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGridRowInstanceProperties= class;
{$ENDIF}
  TGridRowInstance = class(TOleServer)
  private
    FIntf:        ISCRGridRowInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGridRowInstanceProperties;
    function      GetServerProperties: TGridRowInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRGridRowInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_BackgroundColor: OLE_COLOR;
    procedure Set_BackgroundColor(pVal: OLE_COLOR);
    function  Get_RowNumber: Integer;
    procedure Set_RowNumber(pVal: Integer);
    function  Get_IsGrandTotalRow: WordBool;
    procedure Set_IsGrandTotalRow(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRGridRowInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRGridAreaInstance;
    procedure CopyTo(const GridAreaInstance: ISCRGridAreaInstance; DeepCopy: WordBool);
    function  Equals(const GridAreaInstance: ISCRGridAreaInstance): WordBool;
    property  DefaultInterface: ISCRGridRowInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property IsGrandTotalRow: WordBool read Get_IsGrandTotalRow write Set_IsGrandTotalRow;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGridRowInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGridRowInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGridRowInstanceProperties = class(TPersistent)
  private
    FServer:    TGridRowInstance;
    function    GetDefaultInterface: ISCRGridRowInstance;
    constructor Create(AServer: TGridRowInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_BackgroundColor: OLE_COLOR;
    procedure Set_BackgroundColor(pVal: OLE_COLOR);
    function  Get_RowNumber: Integer;
    procedure Set_RowNumber(pVal: Integer);
    function  Get_IsGrandTotalRow: WordBool;
    procedure Set_IsGrandTotalRow(pVal: WordBool);
  public
    property DefaultInterface: ISCRGridRowInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
    property RowNumber: Integer read Get_RowNumber write Set_RowNumber;
    property IsGrandTotalRow: WordBool read Get_IsGrandTotalRow write Set_IsGrandTotalRow;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGridColumnInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRGridColumnInstance exposed by              
// the CoClass GridColumnInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGridColumnInstance = class
    class function Create: ISCRGridColumnInstance;
    class function CreateRemote(const MachineName: string): ISCRGridColumnInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGridColumnInstance
// Help String      : GridColumnInstance Class 12.0
// Default Interface: ISCRGridColumnInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGridColumnInstanceProperties= class;
{$ENDIF}
  TGridColumnInstance = class(TOleServer)
  private
    FIntf:        ISCRGridColumnInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGridColumnInstanceProperties;
    function      GetServerProperties: TGridColumnInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRGridColumnInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_BackgroundColor: OLE_COLOR;
    procedure Set_BackgroundColor(pVal: OLE_COLOR);
    function  Get_ColumnNumber: Integer;
    procedure Set_ColumnNumber(pVal: Integer);
    function  Get_IsGrandTotalColumn: WordBool;
    procedure Set_IsGrandTotalColumn(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRGridColumnInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRGridAreaInstance;
    procedure CopyTo(const GridAreaInstance: ISCRGridAreaInstance; DeepCopy: WordBool);
    function  Equals(const GridAreaInstance: ISCRGridAreaInstance): WordBool;
    property  DefaultInterface: ISCRGridColumnInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
    property IsGrandTotalColumn: WordBool read Get_IsGrandTotalColumn write Set_IsGrandTotalColumn;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGridColumnInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGridColumnInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGridColumnInstanceProperties = class(TPersistent)
  private
    FServer:    TGridColumnInstance;
    function    GetDefaultInterface: ISCRGridColumnInstance;
    constructor Create(AServer: TGridColumnInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_BackgroundColor: OLE_COLOR;
    procedure Set_BackgroundColor(pVal: OLE_COLOR);
    function  Get_ColumnNumber: Integer;
    procedure Set_ColumnNumber(pVal: Integer);
    function  Get_IsGrandTotalColumn: WordBool;
    procedure Set_IsGrandTotalColumn(pVal: WordBool);
  public
    property DefaultInterface: ISCRGridColumnInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
    property ColumnNumber: Integer read Get_ColumnNumber write Set_ColumnNumber;
    property IsGrandTotalColumn: WordBool read Get_IsGrandTotalColumn write Set_IsGrandTotalColumn;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGridLabelInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRGridLabelInstance exposed by              
// the CoClass GridLabelInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGridLabelInstance = class
    class function Create: ISCRGridLabelInstance;
    class function CreateRemote(const MachineName: string): ISCRGridLabelInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGridLabelInstance
// Help String      : GridLabelInstance Class 12.0
// Default Interface: ISCRGridLabelInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGridLabelInstanceProperties= class;
{$ENDIF}
  TGridLabelInstance = class(TOleServer)
  private
    FIntf:        ISCRGridLabelInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGridLabelInstanceProperties;
    function      GetServerProperties: TGridLabelInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRGridLabelInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_BackgroundColor: OLE_COLOR;
    procedure Set_BackgroundColor(pVal: OLE_COLOR);
    function  Get_StartRowNumber: Integer;
    procedure Set_StartRowNumber(pVal: Integer);
    function  Get_EndRowNumber: Integer;
    procedure Set_EndRowNumber(pVal: Integer);
    function  Get_StartColumnNumber: Integer;
    procedure Set_StartColumnNumber(pVal: Integer);
    function  Get_EndColumnNumber: Integer;
    procedure Set_EndColumnNumber(pVal: Integer);
    function  Get_HasText: WordBool;
    procedure Set_HasText(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRGridLabelInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRGridAreaInstance;
    procedure CopyTo(const GridAreaInstance: ISCRGridAreaInstance; DeepCopy: WordBool);
    function  Equals(const GridAreaInstance: ISCRGridAreaInstance): WordBool;
    property  DefaultInterface: ISCRGridLabelInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
    property StartRowNumber: Integer read Get_StartRowNumber write Set_StartRowNumber;
    property EndRowNumber: Integer read Get_EndRowNumber write Set_EndRowNumber;
    property StartColumnNumber: Integer read Get_StartColumnNumber write Set_StartColumnNumber;
    property EndColumnNumber: Integer read Get_EndColumnNumber write Set_EndColumnNumber;
    property HasText: WordBool read Get_HasText write Set_HasText;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGridLabelInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGridLabelInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGridLabelInstanceProperties = class(TPersistent)
  private
    FServer:    TGridLabelInstance;
    function    GetDefaultInterface: ISCRGridLabelInstance;
    constructor Create(AServer: TGridLabelInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_BackgroundColor: OLE_COLOR;
    procedure Set_BackgroundColor(pVal: OLE_COLOR);
    function  Get_StartRowNumber: Integer;
    procedure Set_StartRowNumber(pVal: Integer);
    function  Get_EndRowNumber: Integer;
    procedure Set_EndRowNumber(pVal: Integer);
    function  Get_StartColumnNumber: Integer;
    procedure Set_StartColumnNumber(pVal: Integer);
    function  Get_EndColumnNumber: Integer;
    procedure Set_EndColumnNumber(pVal: Integer);
    function  Get_HasText: WordBool;
    procedure Set_HasText(pVal: WordBool);
  public
    property DefaultInterface: ISCRGridLabelInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
    property StartRowNumber: Integer read Get_StartRowNumber write Set_StartRowNumber;
    property EndRowNumber: Integer read Get_EndRowNumber write Set_EndRowNumber;
    property StartColumnNumber: Integer read Get_StartColumnNumber write Set_StartColumnNumber;
    property EndColumnNumber: Integer read Get_EndColumnNumber write Set_EndColumnNumber;
    property HasText: WordBool read Get_HasText write Set_HasText;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGridAreaInstances provides a Create and CreateRemote method to          
// create instances of the default interface ISCRGridAreaInstances exposed by              
// the CoClass GridAreaInstances. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGridAreaInstances = class
    class function Create: ISCRGridAreaInstances;
    class function CreateRemote(const MachineName: string): ISCRGridAreaInstances;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGridAreaInstances
// Help String      : GridAreaInstances Class 12.0
// Default Interface: ISCRGridAreaInstances
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGridAreaInstancesProperties= class;
{$ENDIF}
  TGridAreaInstances = class(TOleServer)
  private
    FIntf:        ISCRGridAreaInstances;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGridAreaInstancesProperties;
    function      GetServerProperties: TGridAreaInstancesProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRGridAreaInstances;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRGridAreaInstance;
    procedure Set_Item(Index: Integer; const ppVal: ISCRGridAreaInstance);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRGridAreaInstances);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRGridAreaInstances;
    procedure CopyTo(const GridAreaInstances: ISCRGridAreaInstances; DeepCopy: WordBool);
    function  Equals(const GridAreaInstances: ISCRGridAreaInstances): WordBool;
    procedure Add(const GridAreaInstance: ISCRGridAreaInstance);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const GridAreaInstance: ISCRGridAreaInstance);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const GridAreaInstance: ISCRGridAreaInstance): Integer;
    property  DefaultInterface: ISCRGridAreaInstances read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRGridAreaInstance read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGridAreaInstancesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGridAreaInstances
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGridAreaInstancesProperties = class(TPersistent)
  private
    FServer:    TGridAreaInstances;
    function    GetDefaultInterface: ISCRGridAreaInstances;
    constructor Create(AServer: TGridAreaInstances);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRGridAreaInstance;
    procedure Set_Item(Index: Integer; const ppVal: ISCRGridAreaInstance);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRGridAreaInstances read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGridLineInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRGridLineInstance exposed by              
// the CoClass GridLineInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGridLineInstance = class
    class function Create: ISCRGridLineInstance;
    class function CreateRemote(const MachineName: string): ISCRGridLineInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGridLineInstance
// Help String      : GridLineInstance Class 12.0
// Default Interface: ISCRGridLineInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGridLineInstanceProperties= class;
{$ENDIF}
  TGridLineInstance = class(TOleServer)
  private
    FIntf:        ISCRGridLineInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGridLineInstanceProperties;
    function      GetServerProperties: TGridLineInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRGridLineInstance;
  protected
    procedure InitServerData; override;
    function  Get_StartX: Integer;
    procedure Set_StartX(pVal: Integer);
    function  Get_StartY: Integer;
    procedure Set_StartY(pVal: Integer);
    function  Get_EndX: Integer;
    procedure Set_EndX(pVal: Integer);
    function  Get_EndY: Integer;
    procedure Set_EndY(pVal: Integer);
    function  Get_LineColor: OLE_COLOR;
    procedure Set_LineColor(pVal: OLE_COLOR);
    function  Get_LineStyle: CrLineStyleEnum;
    procedure Set_LineStyle(pVal: CrLineStyleEnum);
    function  Get_LineThickness: Integer;
    procedure Set_LineThickness(pVal: Integer);
    function  Get_ObjectName: WideString;
    procedure Set_ObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_ClassName: WideString;
    function  Get_GridLineType: CrGridLineEnum;
    procedure Set_GridLineType(pVal: CrGridLineEnum);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRGridLineInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRGridLineInstance;
    procedure CopyTo(const GridLineInstance: ISCRGridLineInstance; DeepCopy: WordBool);
    function  Equals(const GridLineInstance: ISCRGridLineInstance): WordBool;
    property  DefaultInterface: ISCRGridLineInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property StartX: Integer read Get_StartX write Set_StartX;
    property StartY: Integer read Get_StartY write Set_StartY;
    property EndX: Integer read Get_EndX write Set_EndX;
    property EndY: Integer read Get_EndY write Set_EndY;
    property LineColor: OLE_COLOR read Get_LineColor write Set_LineColor;
    property LineStyle: CrLineStyleEnum read Get_LineStyle write Set_LineStyle;
    property LineThickness: Integer read Get_LineThickness write Set_LineThickness;
    property ObjectName: WideString read Get_ObjectName write Set_ObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property GridLineType: CrGridLineEnum read Get_GridLineType write Set_GridLineType;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGridLineInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGridLineInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGridLineInstanceProperties = class(TPersistent)
  private
    FServer:    TGridLineInstance;
    function    GetDefaultInterface: ISCRGridLineInstance;
    constructor Create(AServer: TGridLineInstance);
  protected
    function  Get_StartX: Integer;
    procedure Set_StartX(pVal: Integer);
    function  Get_StartY: Integer;
    procedure Set_StartY(pVal: Integer);
    function  Get_EndX: Integer;
    procedure Set_EndX(pVal: Integer);
    function  Get_EndY: Integer;
    procedure Set_EndY(pVal: Integer);
    function  Get_LineColor: OLE_COLOR;
    procedure Set_LineColor(pVal: OLE_COLOR);
    function  Get_LineStyle: CrLineStyleEnum;
    procedure Set_LineStyle(pVal: CrLineStyleEnum);
    function  Get_LineThickness: Integer;
    procedure Set_LineThickness(pVal: Integer);
    function  Get_ObjectName: WideString;
    procedure Set_ObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_ClassName: WideString;
    function  Get_GridLineType: CrGridLineEnum;
    procedure Set_GridLineType(pVal: CrGridLineEnum);
  public
    property DefaultInterface: ISCRGridLineInstance read GetDefaultInterface;
  published
    property StartX: Integer read Get_StartX write Set_StartX;
    property StartY: Integer read Get_StartY write Set_StartY;
    property EndX: Integer read Get_EndX write Set_EndX;
    property EndY: Integer read Get_EndY write Set_EndY;
    property LineColor: OLE_COLOR read Get_LineColor write Set_LineColor;
    property LineStyle: CrLineStyleEnum read Get_LineStyle write Set_LineStyle;
    property LineThickness: Integer read Get_LineThickness write Set_LineThickness;
    property ObjectName: WideString read Get_ObjectName write Set_ObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property GridLineType: CrGridLineEnum read Get_GridLineType write Set_GridLineType;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGridLineInstances provides a Create and CreateRemote method to          
// create instances of the default interface ISCRGridLineInstances exposed by              
// the CoClass GridLineInstances. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGridLineInstances = class
    class function Create: ISCRGridLineInstances;
    class function CreateRemote(const MachineName: string): ISCRGridLineInstances;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGridLineInstances
// Help String      : GridLineInstances Class 12.0
// Default Interface: ISCRGridLineInstances
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGridLineInstancesProperties= class;
{$ENDIF}
  TGridLineInstances = class(TOleServer)
  private
    FIntf:        ISCRGridLineInstances;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGridLineInstancesProperties;
    function      GetServerProperties: TGridLineInstancesProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRGridLineInstances;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRGridLineInstance;
    procedure Set_Item(Index: Integer; const ppVal: ISCRGridLineInstance);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRGridLineInstances);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRGridLineInstances;
    procedure CopyTo(const GridLineInstances: ISCRGridLineInstances; DeepCopy: WordBool);
    function  Equals(const GridLineInstances: ISCRGridLineInstances): WordBool;
    procedure Add(const GridLineInstance: ISCRGridLineInstance);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const GridLineInstance: ISCRGridLineInstance);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const GridLineInstance: ISCRGridLineInstance): Integer;
    property  DefaultInterface: ISCRGridLineInstances read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRGridLineInstance read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGridLineInstancesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGridLineInstances
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGridLineInstancesProperties = class(TPersistent)
  private
    FServer:    TGridLineInstances;
    function    GetDefaultInterface: ISCRGridLineInstances;
    constructor Create(AServer: TGridLineInstances);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRGridLineInstance;
    procedure Set_Item(Index: Integer; const ppVal: ISCRGridLineInstance);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRGridLineInstances read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCrossTabObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCRCrossTabObjectInstance exposed by              
// the CoClass CrossTabObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCrossTabObjectInstance = class
    class function Create: ISCRCrossTabObjectInstance;
    class function CreateRemote(const MachineName: string): ISCRCrossTabObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCrossTabObjectInstance
// Help String      : CrossTabObjectInstance Class 12.0
// Default Interface: ISCRCrossTabObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCrossTabObjectInstanceProperties= class;
{$ENDIF}
  TCrossTabObjectInstance = class(TOleServer)
  private
    FIntf:        ISCRCrossTabObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCrossTabObjectInstanceProperties;
    function      GetServerProperties: TCrossTabObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRCrossTabObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_GridAreas: ISCRGridAreaInstances;
    procedure Set_GridAreas(const pVal: ISCRGridAreaInstances);
    function  Get_GridLines: ISCRGridLineInstances;
    procedure Set_GridLines(const pVal: ISCRGridLineInstances);
    function  Get_InGridReportObjectInstances: ISCRReportObjectInstances;
    procedure Set_InGridReportObjectInstances(const pVal: ISCRReportObjectInstances);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRCrossTabObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCRCrossTabObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property GridAreas: ISCRGridAreaInstances read Get_GridAreas write Set_GridAreas;
    property GridLines: ISCRGridLineInstances read Get_GridLines write Set_GridLines;
    property InGridReportObjectInstances: ISCRReportObjectInstances read Get_InGridReportObjectInstances write Set_InGridReportObjectInstances;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCrossTabObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCrossTabObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCrossTabObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TCrossTabObjectInstance;
    function    GetDefaultInterface: ISCRCrossTabObjectInstance;
    constructor Create(AServer: TCrossTabObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_GridAreas: ISCRGridAreaInstances;
    procedure Set_GridAreas(const pVal: ISCRGridAreaInstances);
    function  Get_GridLines: ISCRGridLineInstances;
    procedure Set_GridLines(const pVal: ISCRGridLineInstances);
    function  Get_InGridReportObjectInstances: ISCRReportObjectInstances;
    procedure Set_InGridReportObjectInstances(const pVal: ISCRReportObjectInstances);
  public
    property DefaultInterface: ISCRCrossTabObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property GridAreas: ISCRGridAreaInstances read Get_GridAreas write Set_GridAreas;
    property GridLines: ISCRGridLineInstances read Get_GridLines write Set_GridLines;
    property InGridReportObjectInstances: ISCRReportObjectInstances read Get_InGridReportObjectInstances write Set_InGridReportObjectInstances;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoOlapObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCROlapObjectInstance exposed by              
// the CoClass OlapObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOlapObjectInstance = class
    class function Create: ISCROlapObjectInstance;
    class function CreateRemote(const MachineName: string): ISCROlapObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TOlapObjectInstance
// Help String      : OlapObjectInstance Class 12.0
// Default Interface: ISCROlapObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TOlapObjectInstanceProperties= class;
{$ENDIF}
  TOlapObjectInstance = class(TOleServer)
  private
    FIntf:        ISCROlapObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TOlapObjectInstanceProperties;
    function      GetServerProperties: TOlapObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCROlapObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_SectionHeadingInstance: ISCROlapSectHeadObjectInstance;
    procedure Set_SectionHeadingInstance(const pVal: ISCROlapSectHeadObjectInstance);
    function  Get_GridObjectInstance: ISCRCrossTabObjectInstance;
    procedure Set_GridObjectInstance(const pVal: ISCRCrossTabObjectInstance);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCROlapObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCROlapObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property SectionHeadingInstance: ISCROlapSectHeadObjectInstance read Get_SectionHeadingInstance write Set_SectionHeadingInstance;
    property GridObjectInstance: ISCRCrossTabObjectInstance read Get_GridObjectInstance write Set_GridObjectInstance;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TOlapObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TOlapObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TOlapObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TOlapObjectInstance;
    function    GetDefaultInterface: ISCROlapObjectInstance;
    constructor Create(AServer: TOlapObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_SectionHeadingInstance: ISCROlapSectHeadObjectInstance;
    procedure Set_SectionHeadingInstance(const pVal: ISCROlapSectHeadObjectInstance);
    function  Get_GridObjectInstance: ISCRCrossTabObjectInstance;
    procedure Set_GridObjectInstance(const pVal: ISCRCrossTabObjectInstance);
  public
    property DefaultInterface: ISCROlapObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property SectionHeadingInstance: ISCROlapSectHeadObjectInstance read Get_SectionHeadingInstance write Set_SectionHeadingInstance;
    property GridObjectInstance: ISCRCrossTabObjectInstance read Get_GridObjectInstance write Set_GridObjectInstance;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoOlapSectHeadObjectInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISCROlapSectHeadObjectInstance exposed by              
// the CoClass OlapSectHeadObjectInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOlapSectHeadObjectInstance = class
    class function Create: ISCROlapSectHeadObjectInstance;
    class function CreateRemote(const MachineName: string): ISCROlapSectHeadObjectInstance;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TOlapSectHeadObjectInstance
// Help String      : OlapSectHeadObjectInstance Class 12.0
// Default Interface: ISCROlapSectHeadObjectInstance
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TOlapSectHeadObjectInstanceProperties= class;
{$ENDIF}
  TOlapSectHeadObjectInstance = class(TOleServer)
  private
    FIntf:        ISCROlapSectHeadObjectInstance;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TOlapSectHeadObjectInstanceProperties;
    function      GetServerProperties: TOlapSectHeadObjectInstanceProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCROlapSectHeadObjectInstance;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_InSectHeadObjectInstances: ISCRReportObjectInstances;
    procedure Set_InSectHeadObjectInstances(const pVal: ISCRReportObjectInstances);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCROlapSectHeadObjectInstance);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRReportObjectInstance;
    procedure CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; DeepCopy: WordBool);
    function  Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
    procedure GetObjectText(out pObjectText: WideString);
    procedure CanBeDrillDown(out pCanDrillDown: WordBool);
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    procedure HasHyperLink(out pVal: WordBool);
    function  HasReportPartBookmark: WordBool;
    function  HasReportPartDrilldown: WordBool;
    property  DefaultInterface: ISCROlapSectHeadObjectInstance read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property HasBookmark: WordBool write Set_HasBookmark;
    property HasPartsDrilldown: WordBool write Set_HasPartsDrilldown;
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property InSectHeadObjectInstances: ISCRReportObjectInstances read Get_InSectHeadObjectInstances write Set_InSectHeadObjectInstances;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TOlapSectHeadObjectInstanceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TOlapSectHeadObjectInstance
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TOlapSectHeadObjectInstanceProperties = class(TPersistent)
  private
    FServer:    TOlapSectHeadObjectInstance;
    function    GetDefaultInterface: ISCROlapSectHeadObjectInstance;
    constructor Create(AServer: TOlapSectHeadObjectInstance);
  protected
    function  Get_ClassName: WideString;
    function  Get_OffsetX: Integer;
    procedure Set_OffsetX(pVal: Integer);
    function  Get_OffsetY: Integer;
    procedure Set_OffsetY(pVal: Integer);
    function  Get_Width: Integer;
    procedure Set_Width(pVal: Integer);
    function  Get_Height: Integer;
    procedure Set_Height(pVal: Integer);
    function  Get_Kind: CrObjectInstanceKindEnum;
    procedure Set_Kind(pVal: CrObjectInstanceKindEnum);
    function  Get_Visible: WordBool;
    procedure Set_Visible(pVal: WordBool);
    function  Get_ToolTipText: WideString;
    procedure Set_ToolTipText(const pVal: WideString);
    function  Get_HyperLink: WideString;
    procedure Set_HyperLink(const pVal: WideString);
    function  Get_Border: ISCRRuntimeBorder;
    procedure Set_Border(const pVal: ISCRRuntimeBorder);
    function  Get_SplitAtTop: WordBool;
    procedure Set_SplitAtTop(pVal: WordBool);
    function  Get_SplitAtBottom: WordBool;
    procedure Set_SplitAtBottom(pVal: WordBool);
    function  Get_ReportObjectName: WideString;
    procedure Set_ReportObjectName(const pVal: WideString);
    function  Get_StyleSheetName: WideString;
    procedure Set_StyleSheetName(const pVal: WideString);
    function  Get_Rotation: CrTextRotationAngleEnum;
    procedure Set_Rotation(pVal: CrTextRotationAngleEnum);
    function  Get_HorizontalAlignment: CrAlignmentEnum;
    procedure Set_HorizontalAlignment(pVal: CrAlignmentEnum);
    function  Get_DataContext: WideString;
    procedure Set_DataContext(const pVal: WideString);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
    function  Get_ReportPartBookmark: ISCRReportPartBookmark;
    procedure Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
    function  Get_Highlight: WordBool;
    procedure Set_Highlight(pVal: WordBool);
    function  Get_GroupNamePath: WideString;
    procedure Set_GroupNamePath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_HasObjectEnded: WordBool;
    procedure Set_HasObjectEnded(pVal: WordBool);
    procedure Set_HasBookmark(Param1: WordBool);
    procedure Set_HasPartsDrilldown(Param1: WordBool);
    function  Get_InSectHeadObjectInstances: ISCRReportObjectInstances;
    procedure Set_InSectHeadObjectInstances(const pVal: ISCRReportObjectInstances);
  public
    property DefaultInterface: ISCROlapSectHeadObjectInstance read GetDefaultInterface;
  published
    property OffsetX: Integer read Get_OffsetX write Set_OffsetX;
    property OffsetY: Integer read Get_OffsetY write Set_OffsetY;
    property Width: Integer read Get_Width write Set_Width;
    property Height: Integer read Get_Height write Set_Height;
    property Kind: CrObjectInstanceKindEnum read Get_Kind write Set_Kind;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property ToolTipText: WideString read Get_ToolTipText write Set_ToolTipText;
    property HyperLink: WideString read Get_HyperLink write Set_HyperLink;
    property Border: ISCRRuntimeBorder read Get_Border write Set_Border;
    property SplitAtTop: WordBool read Get_SplitAtTop write Set_SplitAtTop;
    property SplitAtBottom: WordBool read Get_SplitAtBottom write Set_SplitAtBottom;
    property ReportObjectName: WideString read Get_ReportObjectName write Set_ReportObjectName;
    property StyleSheetName: WideString read Get_StyleSheetName write Set_StyleSheetName;
    property Rotation: CrTextRotationAngleEnum read Get_Rotation write Set_Rotation;
    property HorizontalAlignment: CrAlignmentEnum read Get_HorizontalAlignment write Set_HorizontalAlignment;
    property DataContext: WideString read Get_DataContext write Set_DataContext;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
    property ReportPartBookmark: ISCRReportPartBookmark read Get_ReportPartBookmark write Set_ReportPartBookmark;
    property Highlight: WordBool read Get_Highlight write Set_Highlight;
    property GroupNamePath: WideString read Get_GroupNamePath write Set_GroupNamePath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HasObjectEnded: WordBool read Get_HasObjectEnded write Set_HasObjectEnded;
    property InSectHeadObjectInstances: ISCRReportObjectInstances read Get_InSectHeadObjectInstances write Set_InSectHeadObjectInstances;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoLineObjectInstances provides a Create and CreateRemote method to          
// create instances of the default interface ISCRLineObjectInstances exposed by              
// the CoClass LineObjectInstances. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLineObjectInstances = class
    class function Create: ISCRLineObjectInstances;
    class function CreateRemote(const MachineName: string): ISCRLineObjectInstances;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TLineObjectInstances
// Help String      : LineObjectInstances Class 12.0
// Default Interface: ISCRLineObjectInstances
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TLineObjectInstancesProperties= class;
{$ENDIF}
  TLineObjectInstances = class(TOleServer)
  private
    FIntf:        ISCRLineObjectInstances;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TLineObjectInstancesProperties;
    function      GetServerProperties: TLineObjectInstancesProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRLineObjectInstances;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRDrawingObjectInstance;
    procedure Set_Item(Index: Integer; const ppVal: ISCRDrawingObjectInstance);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRLineObjectInstances);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRLineObjectInstances;
    procedure CopyTo(const LineObjectInstances: ISCRLineObjectInstances; DeepCopy: WordBool);
    function  Equals(const LineObjectInstances: ISCRLineObjectInstances): WordBool;
    procedure Add(const LineObjectInstance: ISCRDrawingObjectInstance);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const LineObjectInstance: ISCRDrawingObjectInstance);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const LineObjectInstance: ISCRDrawingObjectInstance): Integer;
    property  DefaultInterface: ISCRLineObjectInstances read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRDrawingObjectInstance read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TLineObjectInstancesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TLineObjectInstances
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TLineObjectInstancesProperties = class(TPersistent)
  private
    FServer:    TLineObjectInstances;
    function    GetDefaultInterface: ISCRLineObjectInstances;
    constructor Create(AServer: TLineObjectInstances);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRDrawingObjectInstance;
    procedure Set_Item(Index: Integer; const ppVal: ISCRDrawingObjectInstance);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRLineObjectInstances read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBoxObjectInstances provides a Create and CreateRemote method to          
// create instances of the default interface ISCRBoxObjectInstances exposed by              
// the CoClass BoxObjectInstances. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBoxObjectInstances = class
    class function Create: ISCRBoxObjectInstances;
    class function CreateRemote(const MachineName: string): ISCRBoxObjectInstances;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBoxObjectInstances
// Help String      : BoxObjectInstances Class 12.0
// Default Interface: ISCRBoxObjectInstances
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBoxObjectInstancesProperties= class;
{$ENDIF}
  TBoxObjectInstances = class(TOleServer)
  private
    FIntf:        ISCRBoxObjectInstances;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBoxObjectInstancesProperties;
    function      GetServerProperties: TBoxObjectInstancesProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRBoxObjectInstances;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRBoxObjectInstance;
    procedure Set_Item(Index: Integer; const ppVal: ISCRBoxObjectInstance);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRBoxObjectInstances);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRBoxObjectInstances;
    procedure CopyTo(const BoxObjectInstances: ISCRBoxObjectInstances; DeepCopy: WordBool);
    function  Equals(const BoxObjectInstances: ISCRBoxObjectInstances): WordBool;
    procedure Add(const BoxObjectInstance: ISCRBoxObjectInstance);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const BoxObjectInstance: ISCRBoxObjectInstance);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const BoxObjectInstance: ISCRBoxObjectInstance): Integer;
    property  DefaultInterface: ISCRBoxObjectInstances read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRBoxObjectInstance read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBoxObjectInstancesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBoxObjectInstances
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBoxObjectInstancesProperties = class(TPersistent)
  private
    FServer:    TBoxObjectInstances;
    function    GetDefaultInterface: ISCRBoxObjectInstances;
    constructor Create(AServer: TBoxObjectInstances);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRBoxObjectInstance;
    procedure Set_Item(Index: Integer; const ppVal: ISCRBoxObjectInstance);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRBoxObjectInstances read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRuntimeBorder provides a Create and CreateRemote method to          
// create instances of the default interface ISCRRuntimeBorder exposed by              
// the CoClass RuntimeBorder. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuntimeBorder = class
    class function Create: ISCRRuntimeBorder;
    class function CreateRemote(const MachineName: string): ISCRRuntimeBorder;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRuntimeBorder
// Help String      : RuntimeBorder Class 12.0
// Default Interface: ISCRRuntimeBorder
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuntimeBorderProperties= class;
{$ENDIF}
  TRuntimeBorder = class(TOleServer)
  private
    FIntf:        ISCRRuntimeBorder;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuntimeBorderProperties;
    function      GetServerProperties: TRuntimeBorderProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRRuntimeBorder;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_LeftLineStyle: CrLineStyleEnum;
    procedure Set_LeftLineStyle(pVal: CrLineStyleEnum);
    function  Get_RightLineStyle: CrLineStyleEnum;
    procedure Set_RightLineStyle(pVal: CrLineStyleEnum);
    function  Get_TopLineStyle: CrLineStyleEnum;
    procedure Set_TopLineStyle(pVal: CrLineStyleEnum);
    function  Get_BottomLineStyle: CrLineStyleEnum;
    procedure Set_BottomLineStyle(pVal: CrLineStyleEnum);
    function  Get_HasDropShadow: WordBool;
    procedure Set_HasDropShadow(pVal: WordBool);
    function  Get_BackgroundColor: OLE_COLOR;
    procedure Set_BackgroundColor(pVal: OLE_COLOR);
    function  Get_BorderColor: OLE_COLOR;
    procedure Set_BorderColor(pVal: OLE_COLOR);
    function  Get_EnableTightHorizontal: WordBool;
    procedure Set_EnableTightHorizontal(pVal: WordBool);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRRuntimeBorder);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRRuntimeBorder;
    procedure CopyTo(const RuntimeBorder: ISCRRuntimeBorder; DeepCopy: WordBool);
    function  Equals(const RuntimeBorder: ISCRRuntimeBorder): WordBool;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    property  DefaultInterface: ISCRRuntimeBorder read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property LeftLineStyle: CrLineStyleEnum read Get_LeftLineStyle write Set_LeftLineStyle;
    property RightLineStyle: CrLineStyleEnum read Get_RightLineStyle write Set_RightLineStyle;
    property TopLineStyle: CrLineStyleEnum read Get_TopLineStyle write Set_TopLineStyle;
    property BottomLineStyle: CrLineStyleEnum read Get_BottomLineStyle write Set_BottomLineStyle;
    property HasDropShadow: WordBool read Get_HasDropShadow write Set_HasDropShadow;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
    property BorderColor: OLE_COLOR read Get_BorderColor write Set_BorderColor;
    property EnableTightHorizontal: WordBool read Get_EnableTightHorizontal write Set_EnableTightHorizontal;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuntimeBorderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRuntimeBorder
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuntimeBorderProperties = class(TPersistent)
  private
    FServer:    TRuntimeBorder;
    function    GetDefaultInterface: ISCRRuntimeBorder;
    constructor Create(AServer: TRuntimeBorder);
  protected
    function  Get_ClassName: WideString;
    function  Get_LeftLineStyle: CrLineStyleEnum;
    procedure Set_LeftLineStyle(pVal: CrLineStyleEnum);
    function  Get_RightLineStyle: CrLineStyleEnum;
    procedure Set_RightLineStyle(pVal: CrLineStyleEnum);
    function  Get_TopLineStyle: CrLineStyleEnum;
    procedure Set_TopLineStyle(pVal: CrLineStyleEnum);
    function  Get_BottomLineStyle: CrLineStyleEnum;
    procedure Set_BottomLineStyle(pVal: CrLineStyleEnum);
    function  Get_HasDropShadow: WordBool;
    procedure Set_HasDropShadow(pVal: WordBool);
    function  Get_BackgroundColor: OLE_COLOR;
    procedure Set_BackgroundColor(pVal: OLE_COLOR);
    function  Get_BorderColor: OLE_COLOR;
    procedure Set_BorderColor(pVal: OLE_COLOR);
    function  Get_EnableTightHorizontal: WordBool;
    procedure Set_EnableTightHorizontal(pVal: WordBool);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
  public
    property DefaultInterface: ISCRRuntimeBorder read GetDefaultInterface;
  published
    property LeftLineStyle: CrLineStyleEnum read Get_LeftLineStyle write Set_LeftLineStyle;
    property RightLineStyle: CrLineStyleEnum read Get_RightLineStyle write Set_RightLineStyle;
    property TopLineStyle: CrLineStyleEnum read Get_TopLineStyle write Set_TopLineStyle;
    property BottomLineStyle: CrLineStyleEnum read Get_BottomLineStyle write Set_BottomLineStyle;
    property HasDropShadow: WordBool read Get_HasDropShadow write Set_HasDropShadow;
    property BackgroundColor: OLE_COLOR read Get_BackgroundColor write Set_BackgroundColor;
    property BorderColor: OLE_COLOR read Get_BorderColor write Set_BorderColor;
    property EnableTightHorizontal: WordBool read Get_EnableTightHorizontal write Set_EnableTightHorizontal;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRuntimeFontColor provides a Create and CreateRemote method to          
// create instances of the default interface ISCRRuntimeFontColor exposed by              
// the CoClass RuntimeFontColor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuntimeFontColor = class
    class function Create: ISCRRuntimeFontColor;
    class function CreateRemote(const MachineName: string): ISCRRuntimeFontColor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRuntimeFontColor
// Help String      : RuntimeFontColor Class 12.0
// Default Interface: ISCRRuntimeFontColor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuntimeFontColorProperties= class;
{$ENDIF}
  TRuntimeFontColor = class(TOleServer)
  private
    FIntf:        ISCRRuntimeFontColor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuntimeFontColorProperties;
    function      GetServerProperties: TRuntimeFontColorProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRRuntimeFontColor;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_Font: ISCRFont;
    procedure Set_Font(const pVal: ISCRFont);
    function  Get_Color: OLE_COLOR;
    procedure Set_Color(pVal: OLE_COLOR);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRRuntimeFontColor);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRRuntimeFontColor;
    procedure CopyTo(const RuntimeFontColor: ISCRRuntimeFontColor; DeepCopy: WordBool);
    function  Equals(const RuntimeFontColor: ISCRRuntimeFontColor): WordBool;
    procedure IsPropertyOverridden(property_: CrOverriddenPropertyEnum; out pOverridden: WordBool);
    property  DefaultInterface: ISCRRuntimeFontColor read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property Font: ISCRFont read Get_Font write Set_Font;
    property Color: OLE_COLOR read Get_Color write Set_Color;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuntimeFontColorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRuntimeFontColor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuntimeFontColorProperties = class(TPersistent)
  private
    FServer:    TRuntimeFontColor;
    function    GetDefaultInterface: ISCRRuntimeFontColor;
    constructor Create(AServer: TRuntimeFontColor);
  protected
    function  Get_ClassName: WideString;
    function  Get_Font: ISCRFont;
    procedure Set_Font(const pVal: ISCRFont);
    function  Get_Color: OLE_COLOR;
    procedure Set_Color(pVal: OLE_COLOR);
    function  Get_OverriddenInfo: Integer;
    procedure Set_OverriddenInfo(pVal: Integer);
  public
    property DefaultInterface: ISCRRuntimeFontColor read GetDefaultInterface;
  published
    property Font: ISCRFont read Get_Font write Set_Font;
    property Color: OLE_COLOR read Get_Color write Set_Color;
    property OverriddenInfo: Integer read Get_OverriddenInfo write Set_OverriddenInfo;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRuntimeParagraphElements provides a Create and CreateRemote method to          
// create instances of the default interface ISCRRuntimeParagraphElements exposed by              
// the CoClass RuntimeParagraphElements. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuntimeParagraphElements = class
    class function Create: ISCRRuntimeParagraphElements;
    class function CreateRemote(const MachineName: string): ISCRRuntimeParagraphElements;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRuntimeParagraphElements
// Help String      : RuntimeParagraphElements Class 12.0
// Default Interface: ISCRRuntimeParagraphElements
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuntimeParagraphElementsProperties= class;
{$ENDIF}
  TRuntimeParagraphElements = class(TOleServer)
  private
    FIntf:        ISCRRuntimeParagraphElements;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuntimeParagraphElementsProperties;
    function      GetServerProperties: TRuntimeParagraphElementsProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRRuntimeParagraphElements;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRRuntimeParagraphElement;
    procedure Set_Item(Index: Integer; const ppVal: ISCRRuntimeParagraphElement);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRRuntimeParagraphElements);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraphElements;
    procedure CopyTo(const RuntimeParagraphElements: ISCRRuntimeParagraphElements; 
                     DeepCopy: WordBool);
    function  Equals(const RuntimeParagraphElements: ISCRRuntimeParagraphElements): WordBool;
    procedure Add(const RuntimeParagraphElement: ISCRRuntimeParagraphElement);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const RuntimeParagraphElement: ISCRRuntimeParagraphElement);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const RuntimeParagraphElement: ISCRRuntimeParagraphElement): Integer;
    property  DefaultInterface: ISCRRuntimeParagraphElements read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRRuntimeParagraphElement read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuntimeParagraphElementsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRuntimeParagraphElements
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuntimeParagraphElementsProperties = class(TPersistent)
  private
    FServer:    TRuntimeParagraphElements;
    function    GetDefaultInterface: ISCRRuntimeParagraphElements;
    constructor Create(AServer: TRuntimeParagraphElements);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRRuntimeParagraphElement;
    procedure Set_Item(Index: Integer; const ppVal: ISCRRuntimeParagraphElement);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRRuntimeParagraphElements read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRuntimeParagraphTextElement provides a Create and CreateRemote method to          
// create instances of the default interface ISCRRuntimeParagraphTextElement exposed by              
// the CoClass RuntimeParagraphTextElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuntimeParagraphTextElement = class
    class function Create: ISCRRuntimeParagraphTextElement;
    class function CreateRemote(const MachineName: string): ISCRRuntimeParagraphTextElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRuntimeParagraphTextElement
// Help String      : RuntimeParagraphTextElement Class 12.0
// Default Interface: ISCRRuntimeParagraphTextElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuntimeParagraphTextElementProperties= class;
{$ENDIF}
  TRuntimeParagraphTextElement = class(TOleServer)
  private
    FIntf:        ISCRRuntimeParagraphTextElement;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuntimeParagraphTextElementProperties;
    function      GetServerProperties: TRuntimeParagraphTextElementProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRRuntimeParagraphTextElement;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_Kind: CrRuntimeParagraphElementKindEnum;
    procedure Set_Kind(pVal: CrRuntimeParagraphElementKindEnum);
    function  Get_Text: WideString;
    procedure Set_Text(const pVal: WideString);
    function  Get_CharacterSpacing: Integer;
    procedure Set_CharacterSpacing(pVal: Integer);
    function  Get_RightToLeftReading: WordBool;
    procedure Set_RightToLeftReading(pVal: WordBool);
    function  Get_NeedsToJoinTheNext: OleVariant;
    procedure Set_NeedsToJoinTheNext(pVal: OleVariant);
    function  Get_IsWhiteSpace: OleVariant;
    procedure Set_IsWhiteSpace(pVal: OleVariant);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRRuntimeParagraphTextElement);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraphElement;
    procedure CopyTo(const RuntimeParagraphElement: ISCRRuntimeParagraphElement; DeepCopy: WordBool);
    function  Equals(const RuntimeParagraphElement: ISCRRuntimeParagraphElement): WordBool;
    property  DefaultInterface: ISCRRuntimeParagraphTextElement read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property NeedsToJoinTheNext: OleVariant read Get_NeedsToJoinTheNext write Set_NeedsToJoinTheNext;
    property IsWhiteSpace: OleVariant read Get_IsWhiteSpace write Set_IsWhiteSpace;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property Kind: CrRuntimeParagraphElementKindEnum read Get_Kind write Set_Kind;
    property Text: WideString read Get_Text write Set_Text;
    property CharacterSpacing: Integer read Get_CharacterSpacing write Set_CharacterSpacing;
    property RightToLeftReading: WordBool read Get_RightToLeftReading write Set_RightToLeftReading;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuntimeParagraphTextElementProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRuntimeParagraphTextElement
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuntimeParagraphTextElementProperties = class(TPersistent)
  private
    FServer:    TRuntimeParagraphTextElement;
    function    GetDefaultInterface: ISCRRuntimeParagraphTextElement;
    constructor Create(AServer: TRuntimeParagraphTextElement);
  protected
    function  Get_ClassName: WideString;
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_Kind: CrRuntimeParagraphElementKindEnum;
    procedure Set_Kind(pVal: CrRuntimeParagraphElementKindEnum);
    function  Get_Text: WideString;
    procedure Set_Text(const pVal: WideString);
    function  Get_CharacterSpacing: Integer;
    procedure Set_CharacterSpacing(pVal: Integer);
    function  Get_RightToLeftReading: WordBool;
    procedure Set_RightToLeftReading(pVal: WordBool);
    function  Get_NeedsToJoinTheNext: OleVariant;
    procedure Set_NeedsToJoinTheNext(pVal: OleVariant);
    function  Get_IsWhiteSpace: OleVariant;
    procedure Set_IsWhiteSpace(pVal: OleVariant);
  public
    property DefaultInterface: ISCRRuntimeParagraphTextElement read GetDefaultInterface;
  published
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property Kind: CrRuntimeParagraphElementKindEnum read Get_Kind write Set_Kind;
    property Text: WideString read Get_Text write Set_Text;
    property CharacterSpacing: Integer read Get_CharacterSpacing write Set_CharacterSpacing;
    property RightToLeftReading: WordBool read Get_RightToLeftReading write Set_RightToLeftReading;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRuntimeParagraphTabElement provides a Create and CreateRemote method to          
// create instances of the default interface ISCRRuntimeParagraphTabElement exposed by              
// the CoClass RuntimeParagraphTabElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuntimeParagraphTabElement = class
    class function Create: ISCRRuntimeParagraphTabElement;
    class function CreateRemote(const MachineName: string): ISCRRuntimeParagraphTabElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRuntimeParagraphTabElement
// Help String      : RuntimeParagraphTabElement Class 12.0
// Default Interface: ISCRRuntimeParagraphTabElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuntimeParagraphTabElementProperties= class;
{$ENDIF}
  TRuntimeParagraphTabElement = class(TOleServer)
  private
    FIntf:        ISCRRuntimeParagraphTabElement;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuntimeParagraphTabElementProperties;
    function      GetServerProperties: TRuntimeParagraphTabElementProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRRuntimeParagraphTabElement;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_Kind: CrRuntimeParagraphElementKindEnum;
    procedure Set_Kind(pVal: CrRuntimeParagraphElementKindEnum);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRRuntimeParagraphTabElement);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRRuntimeParagraphElement;
    procedure CopyTo(const RuntimeParagraphElement: ISCRRuntimeParagraphElement; DeepCopy: WordBool);
    function  Equals(const RuntimeParagraphElement: ISCRRuntimeParagraphElement): WordBool;
    property  DefaultInterface: ISCRRuntimeParagraphTabElement read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property Kind: CrRuntimeParagraphElementKindEnum read Get_Kind write Set_Kind;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuntimeParagraphTabElementProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRuntimeParagraphTabElement
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuntimeParagraphTabElementProperties = class(TPersistent)
  private
    FServer:    TRuntimeParagraphTabElement;
    function    GetDefaultInterface: ISCRRuntimeParagraphTabElement;
    constructor Create(AServer: TRuntimeParagraphTabElement);
  protected
    function  Get_ClassName: WideString;
    function  Get_FontColor: ISCRRuntimeFontColor;
    procedure Set_FontColor(const pVal: ISCRRuntimeFontColor);
    function  Get_Kind: CrRuntimeParagraphElementKindEnum;
    procedure Set_Kind(pVal: CrRuntimeParagraphElementKindEnum);
  public
    property DefaultInterface: ISCRRuntimeParagraphTabElement read GetDefaultInterface;
  published
    property FontColor: ISCRRuntimeFontColor read Get_FontColor write Set_FontColor;
    property Kind: CrRuntimeParagraphElementKindEnum read Get_Kind write Set_Kind;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTabUnit provides a Create and CreateRemote method to          
// create instances of the default interface ISCRTabUnit exposed by              
// the CoClass TabUnit. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTabUnit = class
    class function Create: ISCRTabUnit;
    class function CreateRemote(const MachineName: string): ISCRTabUnit;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTabUnit
// Help String      : TabUnit Class 12.0
// Default Interface: ISCRTabUnit
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTabUnitProperties= class;
{$ENDIF}
  TTabUnit = class(TOleServer)
  private
    FIntf:        ISCRTabUnit;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTabUnitProperties;
    function      GetServerProperties: TTabUnitProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRTabUnit;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_Alignment: CrAlignmentEnum;
    procedure Set_Alignment(pVal: CrAlignmentEnum);
    function  Get_Position: Integer;
    procedure Set_Position(pVal: Integer);
    function  Get_AlignRunIndex: Integer;
    procedure Set_AlignRunIndex(pVal: Integer);
    function  Get_AlignCharIndex: Integer;
    procedure Set_AlignCharIndex(pVal: Integer);
    function  Get_RunCount: Integer;
    procedure Set_RunCount(pVal: Integer);
    function  Get_VisualToLogical: OleVariant;
    procedure Set_VisualToLogical(pVal: OleVariant);
    function  Get_ParagraphElements: ISCRRuntimeParagraphElements;
    procedure Set_ParagraphElements(const pVal: ISCRRuntimeParagraphElements);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRTabUnit);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRTabUnit;
    procedure CopyTo(const TabUnit: ISCRTabUnit; DeepCopy: WordBool);
    function  Equals(const TabUnit: ISCRTabUnit): WordBool;
    property  DefaultInterface: ISCRTabUnit read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property VisualToLogical: OleVariant read Get_VisualToLogical write Set_VisualToLogical;
    property Alignment: CrAlignmentEnum read Get_Alignment write Set_Alignment;
    property Position: Integer read Get_Position write Set_Position;
    property AlignRunIndex: Integer read Get_AlignRunIndex write Set_AlignRunIndex;
    property AlignCharIndex: Integer read Get_AlignCharIndex write Set_AlignCharIndex;
    property RunCount: Integer read Get_RunCount write Set_RunCount;
    property ParagraphElements: ISCRRuntimeParagraphElements read Get_ParagraphElements write Set_ParagraphElements;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTabUnitProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTabUnit
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTabUnitProperties = class(TPersistent)
  private
    FServer:    TTabUnit;
    function    GetDefaultInterface: ISCRTabUnit;
    constructor Create(AServer: TTabUnit);
  protected
    function  Get_ClassName: WideString;
    function  Get_Alignment: CrAlignmentEnum;
    procedure Set_Alignment(pVal: CrAlignmentEnum);
    function  Get_Position: Integer;
    procedure Set_Position(pVal: Integer);
    function  Get_AlignRunIndex: Integer;
    procedure Set_AlignRunIndex(pVal: Integer);
    function  Get_AlignCharIndex: Integer;
    procedure Set_AlignCharIndex(pVal: Integer);
    function  Get_RunCount: Integer;
    procedure Set_RunCount(pVal: Integer);
    function  Get_VisualToLogical: OleVariant;
    procedure Set_VisualToLogical(pVal: OleVariant);
    function  Get_ParagraphElements: ISCRRuntimeParagraphElements;
    procedure Set_ParagraphElements(const pVal: ISCRRuntimeParagraphElements);
  public
    property DefaultInterface: ISCRTabUnit read GetDefaultInterface;
  published
    property Alignment: CrAlignmentEnum read Get_Alignment write Set_Alignment;
    property Position: Integer read Get_Position write Set_Position;
    property AlignRunIndex: Integer read Get_AlignRunIndex write Set_AlignRunIndex;
    property AlignCharIndex: Integer read Get_AlignCharIndex write Set_AlignCharIndex;
    property RunCount: Integer read Get_RunCount write Set_RunCount;
    property ParagraphElements: ISCRRuntimeParagraphElements read Get_ParagraphElements write Set_ParagraphElements;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTabUnits provides a Create and CreateRemote method to          
// create instances of the default interface ISCRTabUnits exposed by              
// the CoClass TabUnits. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTabUnits = class
    class function Create: ISCRTabUnits;
    class function CreateRemote(const MachineName: string): ISCRTabUnits;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTabUnits
// Help String      : TabUnits Class 12.0
// Default Interface: ISCRTabUnits
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTabUnitsProperties= class;
{$ENDIF}
  TTabUnits = class(TOleServer)
  private
    FIntf:        ISCRTabUnits;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTabUnitsProperties;
    function      GetServerProperties: TTabUnitsProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRTabUnits;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRTabUnit;
    procedure Set_Item(Index: Integer; const ppVal: ISCRTabUnit);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRTabUnits);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRTabUnits;
    procedure CopyTo(const TabUnits: ISCRTabUnits; DeepCopy: WordBool);
    function  Equals(const TabUnits: ISCRTabUnits): WordBool;
    procedure Add(const TabUnit: ISCRTabUnit);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const TabUnit: ISCRTabUnit);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const TabUnit: ISCRTabUnit): Integer;
    property  DefaultInterface: ISCRTabUnits read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRTabUnit read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTabUnitsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTabUnits
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTabUnitsProperties = class(TPersistent)
  private
    FServer:    TTabUnits;
    function    GetDefaultInterface: ISCRTabUnits;
    constructor Create(AServer: TTabUnits);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRTabUnit;
    procedure Set_Item(Index: Integer; const ppVal: ISCRTabUnit);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRTabUnits read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGroupTree provides a Create and CreateRemote method to          
// create instances of the default interface ISCRGroupTree exposed by              
// the CoClass GroupTree. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGroupTree = class
    class function Create: ISCRGroupTree;
    class function CreateRemote(const MachineName: string): ISCRGroupTree;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGroupTree
// Help String      : GroupTree Class 12.0
// Default Interface: ISCRGroupTree
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGroupTreeProperties= class;
{$ENDIF}
  TGroupTree = class(TOleServer)
  private
    FIntf:        ISCRGroupTree;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGroupTreeProperties;
    function      GetServerProperties: TGroupTreeProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRGroupTree;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_TreeRoot: ISCRGroupTreeNode;
    procedure Set_TreeRoot(const pVal: ISCRGroupTreeNode);
    function  Get_IsHierarchicalTree: WordBool;
    procedure Set_IsHierarchicalTree(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRGroupTree);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRGroupTree;
    procedure CopyTo(const GroupTree: ISCRGroupTree; DeepCopy: WordBool);
    function  Equals(const GroupTree: ISCRGroupTree): WordBool;
    procedure FindSubtreeByNodeID(const pNodeID: ISCRGroupTreeNodeID; out ppSubTree: ISCRGroupTree);
    procedure FindSubtreeByArrayPath(GroupPath: OleVariant; out ppSubTree: ISCRGroupTree);
    procedure FindSubtreeByArrayPathEx(GroupPath: OleVariant; out ppSubTree: ISCRGroupTree; 
                                       out ppParentNode: ISCRGroupTreeNode);
    procedure FindSubtreeByBSTRPath(const GroupPath: WideString; out ppSubTree: ISCRGroupTree);
    property  DefaultInterface: ISCRGroupTree read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property TreeRoot: ISCRGroupTreeNode read Get_TreeRoot write Set_TreeRoot;
    property IsHierarchicalTree: WordBool read Get_IsHierarchicalTree write Set_IsHierarchicalTree;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGroupTreeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGroupTree
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGroupTreeProperties = class(TPersistent)
  private
    FServer:    TGroupTree;
    function    GetDefaultInterface: ISCRGroupTree;
    constructor Create(AServer: TGroupTree);
  protected
    function  Get_ClassName: WideString;
    function  Get_TreeRoot: ISCRGroupTreeNode;
    procedure Set_TreeRoot(const pVal: ISCRGroupTreeNode);
    function  Get_IsHierarchicalTree: WordBool;
    procedure Set_IsHierarchicalTree(pVal: WordBool);
  public
    property DefaultInterface: ISCRGroupTree read GetDefaultInterface;
  published
    property TreeRoot: ISCRGroupTreeNode read Get_TreeRoot write Set_TreeRoot;
    property IsHierarchicalTree: WordBool read Get_IsHierarchicalTree write Set_IsHierarchicalTree;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGroupTreeNode provides a Create and CreateRemote method to          
// create instances of the default interface ISCRGroupTreeNode exposed by              
// the CoClass GroupTreeNode. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGroupTreeNode = class
    class function Create: ISCRGroupTreeNode;
    class function CreateRemote(const MachineName: string): ISCRGroupTreeNode;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGroupTreeNode
// Help String      : GroupTreeNode Class 12.0
// Default Interface: ISCRGroupTreeNode
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGroupTreeNodeProperties= class;
{$ENDIF}
  TGroupTreeNode = class(TOleServer)
  private
    FIntf:        ISCRGroupTreeNode;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGroupTreeNodeProperties;
    function      GetServerProperties: TGroupTreeNodeProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRGroupTreeNode;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_GroupLevel: LongWord;
    procedure Set_GroupLevel(pVal: LongWord);
    function  Get_GroupPath: OleVariant;
    procedure Set_GroupPath(pVal: OleVariant);
    function  Get_IsVisible: WordBool;
    procedure Set_IsVisible(pVal: WordBool);
    function  Get_SubGroupNodes: ISCRGroupTreeNodes;
    procedure Set_SubGroupNodes(const pVal: ISCRGroupTreeNodes);
    function  Get_IsHierarchicalGroup: WordBool;
    procedure Set_IsHierarchicalGroup(pVal: WordBool);
    function  Get_IsNewQueryNeededForChildren: WordBool;
    procedure Set_IsNewQueryNeededForChildren(pVal: WordBool);
    function  Get_IsNodeExpanded: WordBool;
    procedure Set_IsNodeExpanded(pVal: WordBool);
    function  Get_IsDrillDownNode: WordBool;
    procedure Set_IsDrillDownNode(pVal: WordBool);
    function  Get_NumberOfChildren: Integer;
    procedure Set_NumberOfChildren(pVal: Integer);
    function  Get_LevelInHierarchy: Integer;
    procedure Set_LevelInHierarchy(pVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRGroupTreeNode);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRGroupTreeNode;
    procedure CopyTo(const GroupTreeNode: ISCRGroupTreeNode; DeepCopy: WordBool);
    function  Equals(const GroupTreeNode: ISCRGroupTreeNode): WordBool;
    procedure GetGroupInfo(out ppGroupTreeNodeID: ISCRGroupTreeNodeID);
    procedure IsEqualByPath(path: OleVariant; out pEqual: WordBool);
    procedure IsEqualByName(const GroupName: WideString; out pEqual: WordBool);
    procedure GetNumberOfLoadedSubgroups(out pSubgroupNo: Integer);
    procedure GetNthSubgroup(Index: Integer; out ppSubgroupNode: ISCRGroupTreeNode);
    procedure GetLastSubgroup(out ppSubgroupNode: ISCRGroupTreeNode);
    procedure AddSubgroup(const pSubgroupNode: ISCRGroupTreeNode);
    property  DefaultInterface: ISCRGroupTreeNode read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property GroupPath: OleVariant read Get_GroupPath write Set_GroupPath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property GroupLevel: LongWord read Get_GroupLevel write Set_GroupLevel;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property SubGroupNodes: ISCRGroupTreeNodes read Get_SubGroupNodes write Set_SubGroupNodes;
    property IsHierarchicalGroup: WordBool read Get_IsHierarchicalGroup write Set_IsHierarchicalGroup;
    property IsNewQueryNeededForChildren: WordBool read Get_IsNewQueryNeededForChildren write Set_IsNewQueryNeededForChildren;
    property IsNodeExpanded: WordBool read Get_IsNodeExpanded write Set_IsNodeExpanded;
    property IsDrillDownNode: WordBool read Get_IsDrillDownNode write Set_IsDrillDownNode;
    property NumberOfChildren: Integer read Get_NumberOfChildren write Set_NumberOfChildren;
    property LevelInHierarchy: Integer read Get_LevelInHierarchy write Set_LevelInHierarchy;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGroupTreeNodeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGroupTreeNode
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGroupTreeNodeProperties = class(TPersistent)
  private
    FServer:    TGroupTreeNode;
    function    GetDefaultInterface: ISCRGroupTreeNode;
    constructor Create(AServer: TGroupTreeNode);
  protected
    function  Get_ClassName: WideString;
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_GroupLevel: LongWord;
    procedure Set_GroupLevel(pVal: LongWord);
    function  Get_GroupPath: OleVariant;
    procedure Set_GroupPath(pVal: OleVariant);
    function  Get_IsVisible: WordBool;
    procedure Set_IsVisible(pVal: WordBool);
    function  Get_SubGroupNodes: ISCRGroupTreeNodes;
    procedure Set_SubGroupNodes(const pVal: ISCRGroupTreeNodes);
    function  Get_IsHierarchicalGroup: WordBool;
    procedure Set_IsHierarchicalGroup(pVal: WordBool);
    function  Get_IsNewQueryNeededForChildren: WordBool;
    procedure Set_IsNewQueryNeededForChildren(pVal: WordBool);
    function  Get_IsNodeExpanded: WordBool;
    procedure Set_IsNodeExpanded(pVal: WordBool);
    function  Get_IsDrillDownNode: WordBool;
    procedure Set_IsDrillDownNode(pVal: WordBool);
    function  Get_NumberOfChildren: Integer;
    procedure Set_NumberOfChildren(pVal: Integer);
    function  Get_LevelInHierarchy: Integer;
    procedure Set_LevelInHierarchy(pVal: Integer);
  public
    property DefaultInterface: ISCRGroupTreeNode read GetDefaultInterface;
  published
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property GroupLevel: LongWord read Get_GroupLevel write Set_GroupLevel;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property SubGroupNodes: ISCRGroupTreeNodes read Get_SubGroupNodes write Set_SubGroupNodes;
    property IsHierarchicalGroup: WordBool read Get_IsHierarchicalGroup write Set_IsHierarchicalGroup;
    property IsNewQueryNeededForChildren: WordBool read Get_IsNewQueryNeededForChildren write Set_IsNewQueryNeededForChildren;
    property IsNodeExpanded: WordBool read Get_IsNodeExpanded write Set_IsNodeExpanded;
    property IsDrillDownNode: WordBool read Get_IsDrillDownNode write Set_IsDrillDownNode;
    property NumberOfChildren: Integer read Get_NumberOfChildren write Set_NumberOfChildren;
    property LevelInHierarchy: Integer read Get_LevelInHierarchy write Set_LevelInHierarchy;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoGroupTreeNodes provides a Create and CreateRemote method to          
// create instances of the default interface ISCRGroupTreeNodes exposed by              
// the CoClass GroupTreeNodes. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGroupTreeNodes = class
    class function Create: ISCRGroupTreeNodes;
    class function CreateRemote(const MachineName: string): ISCRGroupTreeNodes;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TGroupTreeNodes
// Help String      : GroupTreeNodes Class 12.0
// Default Interface: ISCRGroupTreeNodes
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TGroupTreeNodesProperties= class;
{$ENDIF}
  TGroupTreeNodes = class(TOleServer)
  private
    FIntf:        ISCRGroupTreeNodes;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TGroupTreeNodesProperties;
    function      GetServerProperties: TGroupTreeNodesProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRGroupTreeNodes;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRGroupTreeNode;
    procedure Set_Item(Index: Integer; const ppVal: ISCRGroupTreeNode);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRGroupTreeNodes);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRGroupTreeNodes;
    procedure CopyTo(const GroupTreeNodes: ISCRGroupTreeNodes; DeepCopy: WordBool);
    function  Equals(const GroupTreeNodes: ISCRGroupTreeNodes): WordBool;
    procedure Add(const GroupTreeNode: ISCRGroupTreeNode);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const GroupTreeNode: ISCRGroupTreeNode);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const GroupTreeNode: ISCRGroupTreeNode): Integer;
    property  DefaultInterface: ISCRGroupTreeNodes read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRGroupTreeNode read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TGroupTreeNodesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TGroupTreeNodes
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TGroupTreeNodesProperties = class(TPersistent)
  private
    FServer:    TGroupTreeNodes;
    function    GetDefaultInterface: ISCRGroupTreeNodes;
    constructor Create(AServer: TGroupTreeNodes);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRGroupTreeNode;
    procedure Set_Item(Index: Integer; const ppVal: ISCRGroupTreeNode);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRGroupTreeNodes read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCRGridContent provides a Create and CreateRemote method to          
// create instances of the default interface ICRGridContent exposed by              
// the CoClass CRGridContent. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCRGridContent = class
    class function Create: ICRGridContent;
    class function CreateRemote(const MachineName: string): ICRGridContent;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCRGridContent
// Help String      : CRGridContent Class 12.0
// Default Interface: ICRGridContent
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCRGridContentProperties= class;
{$ENDIF}
  TCRGridContent = class(TOleServer)
  private
    FIntf:        ICRGridContent;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCRGridContentProperties;
    function      GetServerProperties: TCRGridContentProperties;
{$ENDIF}
    function      GetDefaultInterface: ICRGridContent;
  protected
    procedure InitServerData; override;
    function  Get_Cursor: ISCRCursor;
    procedure Set_Cursor(const pVal: ISCRCursor);
    function  Get_Captions: ISCRStrings;
    procedure Set_Captions(const pVal: ISCRStrings);
    function  Get_PageSize: Integer;
    procedure Set_PageSize(pVal: Integer);
    function  Get_StartRecordNumber: Integer;
    procedure Set_StartRecordNumber(pVal: Integer);
    function  Get_CaptionStyle: WideString;
    procedure Set_CaptionStyle(const pVal: WideString);
    function  Get_ContentStyle: WideString;
    procedure Set_ContentStyle(const pVal: WideString);
    function  Get_Title: WideString;
    procedure Set_Title(const pVal: WideString);
    function  Get_TitleStyle: WideString;
    procedure Set_TitleStyle(const pVal: WideString);
    function  Get_TopToolbar: ISCRToolbar;
    procedure Set_TopToolbar(const pVal: ISCRToolbar);
    function  Get_BottomToolbar: ISCRToolbar;
    procedure Set_BottomToolbar(const pVal: ISCRToolbar);
    function  Get_GridColumnCollection: IGridColumnCollection;
    procedure Set_GridColumnCollection(const pVal: IGridColumnCollection);
    function  Get_Groups: ISCRGroups;
    procedure Set_Groups(const pVal: ISCRGroups);
    function  Get_TableStyle: WideString;
    procedure Set_TableStyle(const pVal: WideString);
    function  Get_DisplayRecordNumber: WordBool;
    procedure Set_DisplayRecordNumber(pVal: WordBool);
    function  Get_IsGridAlignedWithToolbar: WordBool;
    procedure Set_IsGridAlignedWithToolbar(pVal: WordBool);
    function  Get_RecordNumberStyle: WideString;
    procedure Set_RecordNumberStyle(const pVal: WideString);
    function  Get_DisplayHyperlink: WordBool;
    procedure Set_DisplayHyperlink(pVal: WordBool);
    function  Get_AlternateContentStyle: WideString;
    procedure Set_AlternateContentStyle(const pVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICRGridContent);
    procedure Disconnect; override;
    property  DefaultInterface: ICRGridContent read GetDefaultInterface;
    property Cursor: ISCRCursor read Get_Cursor write Set_Cursor;
    property Captions: ISCRStrings read Get_Captions write Set_Captions;
    property PageSize: Integer read Get_PageSize write Set_PageSize;
    property StartRecordNumber: Integer read Get_StartRecordNumber write Set_StartRecordNumber;
    property CaptionStyle: WideString read Get_CaptionStyle write Set_CaptionStyle;
    property ContentStyle: WideString read Get_ContentStyle write Set_ContentStyle;
    property Title: WideString read Get_Title write Set_Title;
    property TitleStyle: WideString read Get_TitleStyle write Set_TitleStyle;
    property TopToolbar: ISCRToolbar read Get_TopToolbar write Set_TopToolbar;
    property BottomToolbar: ISCRToolbar read Get_BottomToolbar write Set_BottomToolbar;
    property GridColumnCollection: IGridColumnCollection read Get_GridColumnCollection write Set_GridColumnCollection;
    property Groups: ISCRGroups read Get_Groups write Set_Groups;
    property TableStyle: WideString read Get_TableStyle write Set_TableStyle;
    property DisplayRecordNumber: WordBool read Get_DisplayRecordNumber write Set_DisplayRecordNumber;
    property IsGridAlignedWithToolbar: WordBool read Get_IsGridAlignedWithToolbar write Set_IsGridAlignedWithToolbar;
    property RecordNumberStyle: WideString read Get_RecordNumberStyle write Set_RecordNumberStyle;
    property DisplayHyperlink: WordBool read Get_DisplayHyperlink write Set_DisplayHyperlink;
    property AlternateContentStyle: WideString read Get_AlternateContentStyle write Set_AlternateContentStyle;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCRGridContentProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCRGridContent
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCRGridContentProperties = class(TPersistent)
  private
    FServer:    TCRGridContent;
    function    GetDefaultInterface: ICRGridContent;
    constructor Create(AServer: TCRGridContent);
  protected
    function  Get_Cursor: ISCRCursor;
    procedure Set_Cursor(const pVal: ISCRCursor);
    function  Get_Captions: ISCRStrings;
    procedure Set_Captions(const pVal: ISCRStrings);
    function  Get_PageSize: Integer;
    procedure Set_PageSize(pVal: Integer);
    function  Get_StartRecordNumber: Integer;
    procedure Set_StartRecordNumber(pVal: Integer);
    function  Get_CaptionStyle: WideString;
    procedure Set_CaptionStyle(const pVal: WideString);
    function  Get_ContentStyle: WideString;
    procedure Set_ContentStyle(const pVal: WideString);
    function  Get_Title: WideString;
    procedure Set_Title(const pVal: WideString);
    function  Get_TitleStyle: WideString;
    procedure Set_TitleStyle(const pVal: WideString);
    function  Get_TopToolbar: ISCRToolbar;
    procedure Set_TopToolbar(const pVal: ISCRToolbar);
    function  Get_BottomToolbar: ISCRToolbar;
    procedure Set_BottomToolbar(const pVal: ISCRToolbar);
    function  Get_GridColumnCollection: IGridColumnCollection;
    procedure Set_GridColumnCollection(const pVal: IGridColumnCollection);
    function  Get_Groups: ISCRGroups;
    procedure Set_Groups(const pVal: ISCRGroups);
    function  Get_TableStyle: WideString;
    procedure Set_TableStyle(const pVal: WideString);
    function  Get_DisplayRecordNumber: WordBool;
    procedure Set_DisplayRecordNumber(pVal: WordBool);
    function  Get_IsGridAlignedWithToolbar: WordBool;
    procedure Set_IsGridAlignedWithToolbar(pVal: WordBool);
    function  Get_RecordNumberStyle: WideString;
    procedure Set_RecordNumberStyle(const pVal: WideString);
    function  Get_DisplayHyperlink: WordBool;
    procedure Set_DisplayHyperlink(pVal: WordBool);
    function  Get_AlternateContentStyle: WideString;
    procedure Set_AlternateContentStyle(const pVal: WideString);
  public
    property DefaultInterface: ICRGridContent read GetDefaultInterface;
  published
    property Cursor: ISCRCursor read Get_Cursor write Set_Cursor;
    property Captions: ISCRStrings read Get_Captions write Set_Captions;
    property PageSize: Integer read Get_PageSize write Set_PageSize;
    property StartRecordNumber: Integer read Get_StartRecordNumber write Set_StartRecordNumber;
    property CaptionStyle: WideString read Get_CaptionStyle write Set_CaptionStyle;
    property ContentStyle: WideString read Get_ContentStyle write Set_ContentStyle;
    property Title: WideString read Get_Title write Set_Title;
    property TitleStyle: WideString read Get_TitleStyle write Set_TitleStyle;
    property TopToolbar: ISCRToolbar read Get_TopToolbar write Set_TopToolbar;
    property BottomToolbar: ISCRToolbar read Get_BottomToolbar write Set_BottomToolbar;
    property GridColumnCollection: IGridColumnCollection read Get_GridColumnCollection write Set_GridColumnCollection;
    property Groups: ISCRGroups read Get_Groups write Set_Groups;
    property TableStyle: WideString read Get_TableStyle write Set_TableStyle;
    property DisplayRecordNumber: WordBool read Get_DisplayRecordNumber write Set_DisplayRecordNumber;
    property IsGridAlignedWithToolbar: WordBool read Get_IsGridAlignedWithToolbar write Set_IsGridAlignedWithToolbar;
    property RecordNumberStyle: WideString read Get_RecordNumberStyle write Set_RecordNumberStyle;
    property DisplayHyperlink: WordBool read Get_DisplayHyperlink write Set_DisplayHyperlink;
    property AlternateContentStyle: WideString read Get_AlternateContentStyle write Set_AlternateContentStyle;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoEPFFactory provides a Create and CreateRemote method to          
// create instances of the default interface ISCREPFFactory exposed by              
// the CoClass EPFFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEPFFactory = class
    class function Create: ISCREPFFactory;
    class function CreateRemote(const MachineName: string): ISCREPFFactory;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEPFFactory
// Help String      : EPFFactory Class 12.0
// Default Interface: ISCREPFFactory
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TEPFFactoryProperties= class;
{$ENDIF}
  TEPFFactory = class(TOleServer)
  private
    FIntf:        ISCREPFFactory;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TEPFFactoryProperties;
    function      GetServerProperties: TEPFFactoryProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCREPFFactory;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCREPFFactory);
    procedure Disconnect; override;
    function  GetPageObject(epfData: OleVariant): ISCRPageObjectInstance;
    function  GetLocaleSpecificPageObject(epfData: OleVariant; locale: LongWord): ISCRPageObjectInstance;
    property  DefaultInterface: ISCREPFFactory read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TEPFFactoryProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TEPFFactory
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TEPFFactoryProperties = class(TPersistent)
  private
    FServer:    TEPFFactory;
    function    GetDefaultInterface: ISCREPFFactory;
    constructor Create(AServer: TEPFFactory);
  protected
  public
    property DefaultInterface: ISCREPFFactory read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoETFFactory provides a Create and CreateRemote method to          
// create instances of the default interface ISCRETFFactory exposed by              
// the CoClass ETFFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoETFFactory = class
    class function Create: ISCRETFFactory;
    class function CreateRemote(const MachineName: string): ISCRETFFactory;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TETFFactory
// Help String      : ETFFactory Class 12.0
// Default Interface: ISCRETFFactory
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TETFFactoryProperties= class;
{$ENDIF}
  TETFFactory = class(TOleServer)
  private
    FIntf:        ISCRETFFactory;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TETFFactoryProperties;
    function      GetServerProperties: TETFFactoryProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRETFFactory;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRETFFactory);
    procedure Disconnect; override;
    function  GetGroupTree(etfData: OleVariant): ISCRGroupTree;
    property  DefaultInterface: ISCRETFFactory read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TETFFactoryProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TETFFactory
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TETFFactoryProperties = class(TPersistent)
  private
    FServer:    TETFFactory;
    function    GetDefaultInterface: ISCRETFFactory;
    constructor Create(AServer: TETFFactory);
  protected
  public
    property DefaultInterface: ISCRETFFactory read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoToolbar provides a Create and CreateRemote method to          
// create instances of the default interface ISCRToolbar exposed by              
// the CoClass Toolbar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoToolbar = class
    class function Create: ISCRToolbar;
    class function CreateRemote(const MachineName: string): ISCRToolbar;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TToolbar
// Help String      : Toolbar Class 12.0
// Default Interface: ISCRToolbar
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TToolbarProperties= class;
{$ENDIF}
  TToolbar = class(TOleServer)
  private
    FIntf:        ISCRToolbar;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TToolbarProperties;
    function      GetServerProperties: TToolbarProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRToolbar;
  protected
    procedure InitServerData; override;
    function  Get_Left: Double;
    procedure Set_Left(pVal: Double);
    function  Get_Top: Double;
    procedure Set_Top(pVal: Double);
    function  Get_Width: Double;
    procedure Set_Width(pVal: Double);
    function  Get_Height: Double;
    procedure Set_Height(pVal: Double);
    function  Get_LeftUnit: WideString;
    procedure Set_LeftUnit(pVal: PWideChar);
    function  Get_TopUnit: WideString;
    procedure Set_TopUnit(pVal: PWideChar);
    function  Get_WidthUnit: WideString;
    procedure Set_WidthUnit(pVal: PWideChar);
    function  Get_HeightUnit: WideString;
    procedure Set_HeightUnit(pVal: PWideChar);
    function  Get_Controls: ISCRToolbarControls;
    procedure Set_Controls(const pVal: ISCRToolbarControls);
    function  Get_StyleClassName: WideString;
    procedure Set_StyleClassName(const pVal: WideString);
    function  Get_VerticalAlignment: WideString;
    procedure Set_VerticalAlignment(const pVal: WideString);
    function  Get_Name: WideString;
    procedure Set_Name(const pVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRToolbar);
    procedure Disconnect; override;
    function  GetLeftAndUnit: WideString;
    function  GetTopAndUnit: WideString;
    function  GetWidthAndUnit: WideString;
    function  GetHeightAndUnit: WideString;
    procedure InsertToolbarAt(nIndex: Integer; const pToolbarControls: ISCRToolbarControls);
    function  FindElementWithName(const bstrNameToFind: WideString): Integer;
    property  DefaultInterface: ISCRToolbar read GetDefaultInterface;
    property Left: Double read Get_Left write Set_Left;
    property Top: Double read Get_Top write Set_Top;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Controls: ISCRToolbarControls read Get_Controls write Set_Controls;
    property StyleClassName: WideString read Get_StyleClassName write Set_StyleClassName;
    property VerticalAlignment: WideString read Get_VerticalAlignment write Set_VerticalAlignment;
    property Name: WideString read Get_Name write Set_Name;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TToolbarProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TToolbar
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TToolbarProperties = class(TPersistent)
  private
    FServer:    TToolbar;
    function    GetDefaultInterface: ISCRToolbar;
    constructor Create(AServer: TToolbar);
  protected
    function  Get_Left: Double;
    procedure Set_Left(pVal: Double);
    function  Get_Top: Double;
    procedure Set_Top(pVal: Double);
    function  Get_Width: Double;
    procedure Set_Width(pVal: Double);
    function  Get_Height: Double;
    procedure Set_Height(pVal: Double);
    function  Get_LeftUnit: WideString;
    procedure Set_LeftUnit(pVal: PWideChar);
    function  Get_TopUnit: WideString;
    procedure Set_TopUnit(pVal: PWideChar);
    function  Get_WidthUnit: WideString;
    procedure Set_WidthUnit(pVal: PWideChar);
    function  Get_HeightUnit: WideString;
    procedure Set_HeightUnit(pVal: PWideChar);
    function  Get_Controls: ISCRToolbarControls;
    procedure Set_Controls(const pVal: ISCRToolbarControls);
    function  Get_StyleClassName: WideString;
    procedure Set_StyleClassName(const pVal: WideString);
    function  Get_VerticalAlignment: WideString;
    procedure Set_VerticalAlignment(const pVal: WideString);
    function  Get_Name: WideString;
    procedure Set_Name(const pVal: WideString);
  public
    property DefaultInterface: ISCRToolbar read GetDefaultInterface;
  published
    property Left: Double read Get_Left write Set_Left;
    property Top: Double read Get_Top write Set_Top;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Controls: ISCRToolbarControls read Get_Controls write Set_Controls;
    property StyleClassName: WideString read Get_StyleClassName write Set_StyleClassName;
    property VerticalAlignment: WideString read Get_VerticalAlignment write Set_VerticalAlignment;
    property Name: WideString read Get_Name write Set_Name;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoToolbarControls provides a Create and CreateRemote method to          
// create instances of the default interface ISCRToolbarControls exposed by              
// the CoClass ToolbarControls. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoToolbarControls = class
    class function Create: ISCRToolbarControls;
    class function CreateRemote(const MachineName: string): ISCRToolbarControls;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TToolbarControls
// Help String      : ToolbarControls Class 12.0
// Default Interface: ISCRToolbarControls
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TToolbarControlsProperties= class;
{$ENDIF}
  TToolbarControls = class(TOleServer)
  private
    FIntf:        ISCRToolbarControls;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TToolbarControlsProperties;
    function      GetServerProperties: TToolbarControlsProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRToolbarControls;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRToolbarControlBase;
    procedure Set_Item(Index: Integer; const ppVal: ISCRToolbarControlBase);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRToolbarControls);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRToolbarControls;
    procedure CopyTo(const ToolbarControls: ISCRToolbarControls; DeepCopy: WordBool);
    function  Equals(const ToolbarControls: ISCRToolbarControls): WordBool;
    procedure Add(const ToolbarControlBase: ISCRToolbarControlBase);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const ToolbarControlBase: ISCRToolbarControlBase);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const ToolbarControlBase: ISCRToolbarControlBase): Integer;
    property  DefaultInterface: ISCRToolbarControls read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRToolbarControlBase read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TToolbarControlsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TToolbarControls
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TToolbarControlsProperties = class(TPersistent)
  private
    FServer:    TToolbarControls;
    function    GetDefaultInterface: ISCRToolbarControls;
    constructor Create(AServer: TToolbarControls);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRToolbarControlBase;
    procedure Set_Item(Index: Integer; const ppVal: ISCRToolbarControlBase);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRToolbarControls read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoToolbarButtonControl provides a Create and CreateRemote method to          
// create instances of the default interface ISCRToolbarButtonControl exposed by              
// the CoClass ToolbarButtonControl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoToolbarButtonControl = class
    class function Create: ISCRToolbarButtonControl;
    class function CreateRemote(const MachineName: string): ISCRToolbarButtonControl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TToolbarButtonControl
// Help String      : ToolbarButtonControl Class 12.0
// Default Interface: ISCRToolbarButtonControl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TToolbarButtonControlProperties= class;
{$ENDIF}
  TToolbarButtonControl = class(TOleServer)
  private
    FIntf:        ISCRToolbarButtonControl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TToolbarButtonControlProperties;
    function      GetServerProperties: TToolbarButtonControlProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRToolbarButtonControl;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_Name: WideString;
    procedure Set_Name(pVal: PWideChar);
    function  Get_Width: Double;
    procedure Set_Width(pVal: Double);
    function  Get_Height: Double;
    procedure Set_Height(pVal: Double);
    function  Get_WidthUnit: WideString;
    procedure Set_WidthUnit(pVal: PWideChar);
    function  Get_HeightUnit: WideString;
    procedure Set_HeightUnit(pVal: PWideChar);
    function  Get_Kind: CrToolbarControlKindEnum;
    procedure Set_Kind(pVal: CrToolbarControlKindEnum);
    function  Get_Enabled: WordBool;
    procedure Set_Enabled(pVal: WordBool);
    function  Get_Action: WideString;
    procedure Set_Action(pVal: PWideChar);
    function  Get_DisplayName: WideString;
    procedure Set_DisplayName(pVal: PWideChar);
    function  Get_ImageName: WideString;
    procedure Set_ImageName(pVal: PWideChar);
    function  Get_IsClientSide: WordBool;
    procedure Set_IsClientSide(pVal: WordBool);
    function  Get_StyleClassName: WideString;
    procedure Set_StyleClassName(pVal: PWideChar);
    function  Get_PartnerControl: ISCRToolbarControlBase;
    procedure Set_PartnerControl(const pVal: ISCRToolbarControlBase);
    function  Get_FlyOverImage: WideString;
    procedure Set_FlyOverImage(pVal: PWideChar);
    function  Get_Target: WideString;
    procedure Set_Target(pVal: PWideChar);
    function  Get_TextValue: WideString;
    procedure Set_TextValue(pVal: PWideChar);
    function  Get_Tooltip: WideString;
    procedure Set_Tooltip(pVal: PWideChar);
    function  Get_UseButton: WordBool;
    procedure Set_UseButton(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRToolbarButtonControl);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRToolbarControlBase;
    procedure CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; DeepCopy: WordBool);
    function  Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool;
    procedure GetWidthAndUnit(out pVal: WideString);
    procedure GetHeightAndUnit(out pVal: WideString);
    property  DefaultInterface: ISCRToolbarButtonControl read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Kind: CrToolbarControlKindEnum read Get_Kind write Set_Kind;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property IsClientSide: WordBool read Get_IsClientSide write Set_IsClientSide;
    property PartnerControl: ISCRToolbarControlBase read Get_PartnerControl write Set_PartnerControl;
    property UseButton: WordBool read Get_UseButton write Set_UseButton;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TToolbarButtonControlProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TToolbarButtonControl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TToolbarButtonControlProperties = class(TPersistent)
  private
    FServer:    TToolbarButtonControl;
    function    GetDefaultInterface: ISCRToolbarButtonControl;
    constructor Create(AServer: TToolbarButtonControl);
  protected
    function  Get_ClassName: WideString;
    function  Get_Name: WideString;
    procedure Set_Name(pVal: PWideChar);
    function  Get_Width: Double;
    procedure Set_Width(pVal: Double);
    function  Get_Height: Double;
    procedure Set_Height(pVal: Double);
    function  Get_WidthUnit: WideString;
    procedure Set_WidthUnit(pVal: PWideChar);
    function  Get_HeightUnit: WideString;
    procedure Set_HeightUnit(pVal: PWideChar);
    function  Get_Kind: CrToolbarControlKindEnum;
    procedure Set_Kind(pVal: CrToolbarControlKindEnum);
    function  Get_Enabled: WordBool;
    procedure Set_Enabled(pVal: WordBool);
    function  Get_Action: WideString;
    procedure Set_Action(pVal: PWideChar);
    function  Get_DisplayName: WideString;
    procedure Set_DisplayName(pVal: PWideChar);
    function  Get_ImageName: WideString;
    procedure Set_ImageName(pVal: PWideChar);
    function  Get_IsClientSide: WordBool;
    procedure Set_IsClientSide(pVal: WordBool);
    function  Get_StyleClassName: WideString;
    procedure Set_StyleClassName(pVal: PWideChar);
    function  Get_PartnerControl: ISCRToolbarControlBase;
    procedure Set_PartnerControl(const pVal: ISCRToolbarControlBase);
    function  Get_FlyOverImage: WideString;
    procedure Set_FlyOverImage(pVal: PWideChar);
    function  Get_Target: WideString;
    procedure Set_Target(pVal: PWideChar);
    function  Get_TextValue: WideString;
    procedure Set_TextValue(pVal: PWideChar);
    function  Get_Tooltip: WideString;
    procedure Set_Tooltip(pVal: PWideChar);
    function  Get_UseButton: WordBool;
    procedure Set_UseButton(pVal: WordBool);
  public
    property DefaultInterface: ISCRToolbarButtonControl read GetDefaultInterface;
  published
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Kind: CrToolbarControlKindEnum read Get_Kind write Set_Kind;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property IsClientSide: WordBool read Get_IsClientSide write Set_IsClientSide;
    property PartnerControl: ISCRToolbarControlBase read Get_PartnerControl write Set_PartnerControl;
    property UseButton: WordBool read Get_UseButton write Set_UseButton;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoToolbarLabelControl provides a Create and CreateRemote method to          
// create instances of the default interface ISCRToolbarLabelControl exposed by              
// the CoClass ToolbarLabelControl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoToolbarLabelControl = class
    class function Create: ISCRToolbarLabelControl;
    class function CreateRemote(const MachineName: string): ISCRToolbarLabelControl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TToolbarLabelControl
// Help String      : ToolbarLabelControl Class 12.0
// Default Interface: ISCRToolbarLabelControl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TToolbarLabelControlProperties= class;
{$ENDIF}
  TToolbarLabelControl = class(TOleServer)
  private
    FIntf:        ISCRToolbarLabelControl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TToolbarLabelControlProperties;
    function      GetServerProperties: TToolbarLabelControlProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRToolbarLabelControl;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_Name: WideString;
    procedure Set_Name(pVal: PWideChar);
    function  Get_Width: Double;
    procedure Set_Width(pVal: Double);
    function  Get_Height: Double;
    procedure Set_Height(pVal: Double);
    function  Get_WidthUnit: WideString;
    procedure Set_WidthUnit(pVal: PWideChar);
    function  Get_HeightUnit: WideString;
    procedure Set_HeightUnit(pVal: PWideChar);
    function  Get_Kind: CrToolbarControlKindEnum;
    procedure Set_Kind(pVal: CrToolbarControlKindEnum);
    function  Get_Enabled: WordBool;
    procedure Set_Enabled(pVal: WordBool);
    function  Get_Action: WideString;
    procedure Set_Action(pVal: PWideChar);
    function  Get_DisplayName: WideString;
    procedure Set_DisplayName(pVal: PWideChar);
    function  Get_ImageName: WideString;
    procedure Set_ImageName(pVal: PWideChar);
    function  Get_IsClientSide: WordBool;
    procedure Set_IsClientSide(pVal: WordBool);
    function  Get_StyleClassName: WideString;
    procedure Set_StyleClassName(pVal: PWideChar);
    function  Get_LabelText: WideString;
    procedure Set_LabelText(pVal: PWideChar);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRToolbarLabelControl);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRToolbarControlBase;
    procedure CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; DeepCopy: WordBool);
    function  Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool;
    procedure GetWidthAndUnit(out pVal: WideString);
    procedure GetHeightAndUnit(out pVal: WideString);
    property  DefaultInterface: ISCRToolbarLabelControl read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Kind: CrToolbarControlKindEnum read Get_Kind write Set_Kind;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property IsClientSide: WordBool read Get_IsClientSide write Set_IsClientSide;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TToolbarLabelControlProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TToolbarLabelControl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TToolbarLabelControlProperties = class(TPersistent)
  private
    FServer:    TToolbarLabelControl;
    function    GetDefaultInterface: ISCRToolbarLabelControl;
    constructor Create(AServer: TToolbarLabelControl);
  protected
    function  Get_ClassName: WideString;
    function  Get_Name: WideString;
    procedure Set_Name(pVal: PWideChar);
    function  Get_Width: Double;
    procedure Set_Width(pVal: Double);
    function  Get_Height: Double;
    procedure Set_Height(pVal: Double);
    function  Get_WidthUnit: WideString;
    procedure Set_WidthUnit(pVal: PWideChar);
    function  Get_HeightUnit: WideString;
    procedure Set_HeightUnit(pVal: PWideChar);
    function  Get_Kind: CrToolbarControlKindEnum;
    procedure Set_Kind(pVal: CrToolbarControlKindEnum);
    function  Get_Enabled: WordBool;
    procedure Set_Enabled(pVal: WordBool);
    function  Get_Action: WideString;
    procedure Set_Action(pVal: PWideChar);
    function  Get_DisplayName: WideString;
    procedure Set_DisplayName(pVal: PWideChar);
    function  Get_ImageName: WideString;
    procedure Set_ImageName(pVal: PWideChar);
    function  Get_IsClientSide: WordBool;
    procedure Set_IsClientSide(pVal: WordBool);
    function  Get_StyleClassName: WideString;
    procedure Set_StyleClassName(pVal: PWideChar);
    function  Get_LabelText: WideString;
    procedure Set_LabelText(pVal: PWideChar);
  public
    property DefaultInterface: ISCRToolbarLabelControl read GetDefaultInterface;
  published
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Kind: CrToolbarControlKindEnum read Get_Kind write Set_Kind;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property IsClientSide: WordBool read Get_IsClientSide write Set_IsClientSide;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoToolbarTextBoxControl provides a Create and CreateRemote method to          
// create instances of the default interface ISCRToolbarTextBoxControl exposed by              
// the CoClass ToolbarTextBoxControl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoToolbarTextBoxControl = class
    class function Create: ISCRToolbarTextBoxControl;
    class function CreateRemote(const MachineName: string): ISCRToolbarTextBoxControl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TToolbarTextBoxControl
// Help String      : ToolbarTextBoxControl Class 12.0
// Default Interface: ISCRToolbarTextBoxControl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TToolbarTextBoxControlProperties= class;
{$ENDIF}
  TToolbarTextBoxControl = class(TOleServer)
  private
    FIntf:        ISCRToolbarTextBoxControl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TToolbarTextBoxControlProperties;
    function      GetServerProperties: TToolbarTextBoxControlProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRToolbarTextBoxControl;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_Name: WideString;
    procedure Set_Name(pVal: PWideChar);
    function  Get_Width: Double;
    procedure Set_Width(pVal: Double);
    function  Get_Height: Double;
    procedure Set_Height(pVal: Double);
    function  Get_WidthUnit: WideString;
    procedure Set_WidthUnit(pVal: PWideChar);
    function  Get_HeightUnit: WideString;
    procedure Set_HeightUnit(pVal: PWideChar);
    function  Get_Kind: CrToolbarControlKindEnum;
    procedure Set_Kind(pVal: CrToolbarControlKindEnum);
    function  Get_Enabled: WordBool;
    procedure Set_Enabled(pVal: WordBool);
    function  Get_Action: WideString;
    procedure Set_Action(pVal: PWideChar);
    function  Get_DisplayName: WideString;
    procedure Set_DisplayName(pVal: PWideChar);
    function  Get_ImageName: WideString;
    procedure Set_ImageName(pVal: PWideChar);
    function  Get_IsClientSide: WordBool;
    procedure Set_IsClientSide(pVal: WordBool);
    function  Get_StyleClassName: WideString;
    procedure Set_StyleClassName(pVal: PWideChar);
    function  Get_DefaultText: WideString;
    procedure Set_DefaultText(pVal: PWideChar);
    function  Get_IsMultiLine: WordBool;
    procedure Set_IsMultiLine(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRToolbarTextBoxControl);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRToolbarControlBase;
    procedure CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; DeepCopy: WordBool);
    function  Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool;
    procedure GetWidthAndUnit(out pVal: WideString);
    procedure GetHeightAndUnit(out pVal: WideString);
    property  DefaultInterface: ISCRToolbarTextBoxControl read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Kind: CrToolbarControlKindEnum read Get_Kind write Set_Kind;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property IsClientSide: WordBool read Get_IsClientSide write Set_IsClientSide;
    property IsMultiLine: WordBool read Get_IsMultiLine write Set_IsMultiLine;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TToolbarTextBoxControlProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TToolbarTextBoxControl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TToolbarTextBoxControlProperties = class(TPersistent)
  private
    FServer:    TToolbarTextBoxControl;
    function    GetDefaultInterface: ISCRToolbarTextBoxControl;
    constructor Create(AServer: TToolbarTextBoxControl);
  protected
    function  Get_ClassName: WideString;
    function  Get_Name: WideString;
    procedure Set_Name(pVal: PWideChar);
    function  Get_Width: Double;
    procedure Set_Width(pVal: Double);
    function  Get_Height: Double;
    procedure Set_Height(pVal: Double);
    function  Get_WidthUnit: WideString;
    procedure Set_WidthUnit(pVal: PWideChar);
    function  Get_HeightUnit: WideString;
    procedure Set_HeightUnit(pVal: PWideChar);
    function  Get_Kind: CrToolbarControlKindEnum;
    procedure Set_Kind(pVal: CrToolbarControlKindEnum);
    function  Get_Enabled: WordBool;
    procedure Set_Enabled(pVal: WordBool);
    function  Get_Action: WideString;
    procedure Set_Action(pVal: PWideChar);
    function  Get_DisplayName: WideString;
    procedure Set_DisplayName(pVal: PWideChar);
    function  Get_ImageName: WideString;
    procedure Set_ImageName(pVal: PWideChar);
    function  Get_IsClientSide: WordBool;
    procedure Set_IsClientSide(pVal: WordBool);
    function  Get_StyleClassName: WideString;
    procedure Set_StyleClassName(pVal: PWideChar);
    function  Get_DefaultText: WideString;
    procedure Set_DefaultText(pVal: PWideChar);
    function  Get_IsMultiLine: WordBool;
    procedure Set_IsMultiLine(pVal: WordBool);
  public
    property DefaultInterface: ISCRToolbarTextBoxControl read GetDefaultInterface;
  published
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Kind: CrToolbarControlKindEnum read Get_Kind write Set_Kind;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property IsClientSide: WordBool read Get_IsClientSide write Set_IsClientSide;
    property IsMultiLine: WordBool read Get_IsMultiLine write Set_IsMultiLine;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoToolbarListItem provides a Create and CreateRemote method to          
// create instances of the default interface ISCRToolbarListItem exposed by              
// the CoClass ToolbarListItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoToolbarListItem = class
    class function Create: ISCRToolbarListItem;
    class function CreateRemote(const MachineName: string): ISCRToolbarListItem;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TToolbarListItem
// Help String      : ToolbarListItem Class 12.0
// Default Interface: ISCRToolbarListItem
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TToolbarListItemProperties= class;
{$ENDIF}
  TToolbarListItem = class(TOleServer)
  private
    FIntf:        ISCRToolbarListItem;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TToolbarListItemProperties;
    function      GetServerProperties: TToolbarListItemProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRToolbarListItem;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_DisplayName: WideString;
    procedure Set_DisplayName(pVal: PWideChar);
    function  Get_Value: WideString;
    procedure Set_Value(pVal: PWideChar);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRToolbarListItem);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRToolbarListItem;
    procedure CopyTo(const ToolbarListItem: ISCRToolbarListItem; DeepCopy: WordBool);
    function  Equals(const ToolbarListItem: ISCRToolbarListItem): WordBool;
    property  DefaultInterface: ISCRToolbarListItem read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TToolbarListItemProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TToolbarListItem
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TToolbarListItemProperties = class(TPersistent)
  private
    FServer:    TToolbarListItem;
    function    GetDefaultInterface: ISCRToolbarListItem;
    constructor Create(AServer: TToolbarListItem);
  protected
    function  Get_ClassName: WideString;
    function  Get_DisplayName: WideString;
    procedure Set_DisplayName(pVal: PWideChar);
    function  Get_Value: WideString;
    procedure Set_Value(pVal: PWideChar);
  public
    property DefaultInterface: ISCRToolbarListItem read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoToolbarListItemCollection provides a Create and CreateRemote method to          
// create instances of the default interface ISCRToolbarListItemCollection exposed by              
// the CoClass ToolbarListItemCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoToolbarListItemCollection = class
    class function Create: ISCRToolbarListItemCollection;
    class function CreateRemote(const MachineName: string): ISCRToolbarListItemCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TToolbarListItemCollection
// Help String      : ToolbarListItemCollection Class 12.0
// Default Interface: ISCRToolbarListItemCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TToolbarListItemCollectionProperties= class;
{$ENDIF}
  TToolbarListItemCollection = class(TOleServer)
  private
    FIntf:        ISCRToolbarListItemCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TToolbarListItemCollectionProperties;
    function      GetServerProperties: TToolbarListItemCollectionProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRToolbarListItemCollection;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRToolbarListItem;
    procedure Set_Item(Index: Integer; const ppVal: ISCRToolbarListItem);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRToolbarListItemCollection);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRToolbarListItemCollection;
    procedure CopyTo(const ToolbarListItemCollection: ISCRToolbarListItemCollection; 
                     DeepCopy: WordBool);
    function  Equals(const ToolbarListItemCollection: ISCRToolbarListItemCollection): WordBool;
    procedure Add(const ToolbarListItem: ISCRToolbarListItem);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const ToolbarListItem: ISCRToolbarListItem);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const ToolbarListItem: ISCRToolbarListItem): Integer;
    property  DefaultInterface: ISCRToolbarListItemCollection read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRToolbarListItem read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TToolbarListItemCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TToolbarListItemCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TToolbarListItemCollectionProperties = class(TPersistent)
  private
    FServer:    TToolbarListItemCollection;
    function    GetDefaultInterface: ISCRToolbarListItemCollection;
    constructor Create(AServer: TToolbarListItemCollection);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRToolbarListItem;
    procedure Set_Item(Index: Integer; const ppVal: ISCRToolbarListItem);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRToolbarListItemCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoToolbarComboBoxControl provides a Create and CreateRemote method to          
// create instances of the default interface ISCRToolbarComboBoxControl exposed by              
// the CoClass ToolbarComboBoxControl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoToolbarComboBoxControl = class
    class function Create: ISCRToolbarComboBoxControl;
    class function CreateRemote(const MachineName: string): ISCRToolbarComboBoxControl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TToolbarComboBoxControl
// Help String      : ToolbarComboBoxControl Class 12.0
// Default Interface: ISCRToolbarComboBoxControl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TToolbarComboBoxControlProperties= class;
{$ENDIF}
  TToolbarComboBoxControl = class(TOleServer)
  private
    FIntf:        ISCRToolbarComboBoxControl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TToolbarComboBoxControlProperties;
    function      GetServerProperties: TToolbarComboBoxControlProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRToolbarComboBoxControl;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_Name: WideString;
    procedure Set_Name(pVal: PWideChar);
    function  Get_Width: Double;
    procedure Set_Width(pVal: Double);
    function  Get_Height: Double;
    procedure Set_Height(pVal: Double);
    function  Get_WidthUnit: WideString;
    procedure Set_WidthUnit(pVal: PWideChar);
    function  Get_HeightUnit: WideString;
    procedure Set_HeightUnit(pVal: PWideChar);
    function  Get_Kind: CrToolbarControlKindEnum;
    procedure Set_Kind(pVal: CrToolbarControlKindEnum);
    function  Get_Enabled: WordBool;
    procedure Set_Enabled(pVal: WordBool);
    function  Get_Action: WideString;
    procedure Set_Action(pVal: PWideChar);
    function  Get_DisplayName: WideString;
    procedure Set_DisplayName(pVal: PWideChar);
    function  Get_ImageName: WideString;
    procedure Set_ImageName(pVal: PWideChar);
    function  Get_IsClientSide: WordBool;
    procedure Set_IsClientSide(pVal: WordBool);
    function  Get_StyleClassName: WideString;
    procedure Set_StyleClassName(pVal: PWideChar);
    function  Get_ListItems: ISCRToolbarListItemCollection;
    procedure Set_ListItems(const pVal: ISCRToolbarListItemCollection);
    function  Get_SelectedIndex: Integer;
    procedure Set_SelectedIndex(pVal: Integer);
    function  Get_ClientSidePrefix: WideString;
    procedure Set_ClientSidePrefix(pVal: PWideChar);
    function  Get_ClientSideSuffix: WideString;
    procedure Set_ClientSideSuffix(pVal: PWideChar);
    function  Get_MaxItemsPerMenu: Integer;
    procedure Set_MaxItemsPerMenu(pVal: Integer);
    function  Get_MenuNumber: Integer;
    procedure Set_MenuNumber(pVal: Integer);
    function  Get_Left: Double;
    procedure Set_Left(pVal: Double);
    function  Get_Top: Double;
    procedure Set_Top(pVal: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRToolbarComboBoxControl);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRToolbarControlBase;
    procedure CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; DeepCopy: WordBool);
    function  Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool;
    procedure GetWidthAndUnit(out pVal: WideString);
    procedure GetHeightAndUnit(out pVal: WideString);
    property  DefaultInterface: ISCRToolbarComboBoxControl read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Kind: CrToolbarControlKindEnum read Get_Kind write Set_Kind;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property IsClientSide: WordBool read Get_IsClientSide write Set_IsClientSide;
    property ListItems: ISCRToolbarListItemCollection read Get_ListItems write Set_ListItems;
    property SelectedIndex: Integer read Get_SelectedIndex write Set_SelectedIndex;
    property MaxItemsPerMenu: Integer read Get_MaxItemsPerMenu write Set_MaxItemsPerMenu;
    property MenuNumber: Integer read Get_MenuNumber write Set_MenuNumber;
    property Left: Double read Get_Left write Set_Left;
    property Top: Double read Get_Top write Set_Top;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TToolbarComboBoxControlProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TToolbarComboBoxControl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TToolbarComboBoxControlProperties = class(TPersistent)
  private
    FServer:    TToolbarComboBoxControl;
    function    GetDefaultInterface: ISCRToolbarComboBoxControl;
    constructor Create(AServer: TToolbarComboBoxControl);
  protected
    function  Get_ClassName: WideString;
    function  Get_Name: WideString;
    procedure Set_Name(pVal: PWideChar);
    function  Get_Width: Double;
    procedure Set_Width(pVal: Double);
    function  Get_Height: Double;
    procedure Set_Height(pVal: Double);
    function  Get_WidthUnit: WideString;
    procedure Set_WidthUnit(pVal: PWideChar);
    function  Get_HeightUnit: WideString;
    procedure Set_HeightUnit(pVal: PWideChar);
    function  Get_Kind: CrToolbarControlKindEnum;
    procedure Set_Kind(pVal: CrToolbarControlKindEnum);
    function  Get_Enabled: WordBool;
    procedure Set_Enabled(pVal: WordBool);
    function  Get_Action: WideString;
    procedure Set_Action(pVal: PWideChar);
    function  Get_DisplayName: WideString;
    procedure Set_DisplayName(pVal: PWideChar);
    function  Get_ImageName: WideString;
    procedure Set_ImageName(pVal: PWideChar);
    function  Get_IsClientSide: WordBool;
    procedure Set_IsClientSide(pVal: WordBool);
    function  Get_StyleClassName: WideString;
    procedure Set_StyleClassName(pVal: PWideChar);
    function  Get_ListItems: ISCRToolbarListItemCollection;
    procedure Set_ListItems(const pVal: ISCRToolbarListItemCollection);
    function  Get_SelectedIndex: Integer;
    procedure Set_SelectedIndex(pVal: Integer);
    function  Get_ClientSidePrefix: WideString;
    procedure Set_ClientSidePrefix(pVal: PWideChar);
    function  Get_ClientSideSuffix: WideString;
    procedure Set_ClientSideSuffix(pVal: PWideChar);
    function  Get_MaxItemsPerMenu: Integer;
    procedure Set_MaxItemsPerMenu(pVal: Integer);
    function  Get_MenuNumber: Integer;
    procedure Set_MenuNumber(pVal: Integer);
    function  Get_Left: Double;
    procedure Set_Left(pVal: Double);
    function  Get_Top: Double;
    procedure Set_Top(pVal: Double);
  public
    property DefaultInterface: ISCRToolbarComboBoxControl read GetDefaultInterface;
  published
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Kind: CrToolbarControlKindEnum read Get_Kind write Set_Kind;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property IsClientSide: WordBool read Get_IsClientSide write Set_IsClientSide;
    property ListItems: ISCRToolbarListItemCollection read Get_ListItems write Set_ListItems;
    property SelectedIndex: Integer read Get_SelectedIndex write Set_SelectedIndex;
    property MaxItemsPerMenu: Integer read Get_MaxItemsPerMenu write Set_MaxItemsPerMenu;
    property MenuNumber: Integer read Get_MenuNumber write Set_MenuNumber;
    property Left: Double read Get_Left write Set_Left;
    property Top: Double read Get_Top write Set_Top;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoToolbarSeparatorControl provides a Create and CreateRemote method to          
// create instances of the default interface ISCRToolbarSeparatorControl exposed by              
// the CoClass ToolbarSeparatorControl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoToolbarSeparatorControl = class
    class function Create: ISCRToolbarSeparatorControl;
    class function CreateRemote(const MachineName: string): ISCRToolbarSeparatorControl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TToolbarSeparatorControl
// Help String      : ToolbarSeparatorControl Class 12.0
// Default Interface: ISCRToolbarSeparatorControl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TToolbarSeparatorControlProperties= class;
{$ENDIF}
  TToolbarSeparatorControl = class(TOleServer)
  private
    FIntf:        ISCRToolbarSeparatorControl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TToolbarSeparatorControlProperties;
    function      GetServerProperties: TToolbarSeparatorControlProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRToolbarSeparatorControl;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_Name: WideString;
    procedure Set_Name(pVal: PWideChar);
    function  Get_Width: Double;
    procedure Set_Width(pVal: Double);
    function  Get_Height: Double;
    procedure Set_Height(pVal: Double);
    function  Get_WidthUnit: WideString;
    procedure Set_WidthUnit(pVal: PWideChar);
    function  Get_HeightUnit: WideString;
    procedure Set_HeightUnit(pVal: PWideChar);
    function  Get_Kind: CrToolbarControlKindEnum;
    procedure Set_Kind(pVal: CrToolbarControlKindEnum);
    function  Get_Enabled: WordBool;
    procedure Set_Enabled(pVal: WordBool);
    function  Get_Action: WideString;
    procedure Set_Action(pVal: PWideChar);
    function  Get_DisplayName: WideString;
    procedure Set_DisplayName(pVal: PWideChar);
    function  Get_ImageName: WideString;
    procedure Set_ImageName(pVal: PWideChar);
    function  Get_IsClientSide: WordBool;
    procedure Set_IsClientSide(pVal: WordBool);
    function  Get_StyleClassName: WideString;
    procedure Set_StyleClassName(pVal: PWideChar);
    function  Get_IsLineSeparator: WordBool;
    procedure Set_IsLineSeparator(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRToolbarSeparatorControl);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRToolbarControlBase;
    procedure CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; DeepCopy: WordBool);
    function  Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool;
    procedure GetWidthAndUnit(out pVal: WideString);
    procedure GetHeightAndUnit(out pVal: WideString);
    property  DefaultInterface: ISCRToolbarSeparatorControl read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Kind: CrToolbarControlKindEnum read Get_Kind write Set_Kind;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property IsClientSide: WordBool read Get_IsClientSide write Set_IsClientSide;
    property IsLineSeparator: WordBool read Get_IsLineSeparator write Set_IsLineSeparator;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TToolbarSeparatorControlProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TToolbarSeparatorControl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TToolbarSeparatorControlProperties = class(TPersistent)
  private
    FServer:    TToolbarSeparatorControl;
    function    GetDefaultInterface: ISCRToolbarSeparatorControl;
    constructor Create(AServer: TToolbarSeparatorControl);
  protected
    function  Get_ClassName: WideString;
    function  Get_Name: WideString;
    procedure Set_Name(pVal: PWideChar);
    function  Get_Width: Double;
    procedure Set_Width(pVal: Double);
    function  Get_Height: Double;
    procedure Set_Height(pVal: Double);
    function  Get_WidthUnit: WideString;
    procedure Set_WidthUnit(pVal: PWideChar);
    function  Get_HeightUnit: WideString;
    procedure Set_HeightUnit(pVal: PWideChar);
    function  Get_Kind: CrToolbarControlKindEnum;
    procedure Set_Kind(pVal: CrToolbarControlKindEnum);
    function  Get_Enabled: WordBool;
    procedure Set_Enabled(pVal: WordBool);
    function  Get_Action: WideString;
    procedure Set_Action(pVal: PWideChar);
    function  Get_DisplayName: WideString;
    procedure Set_DisplayName(pVal: PWideChar);
    function  Get_ImageName: WideString;
    procedure Set_ImageName(pVal: PWideChar);
    function  Get_IsClientSide: WordBool;
    procedure Set_IsClientSide(pVal: WordBool);
    function  Get_StyleClassName: WideString;
    procedure Set_StyleClassName(pVal: PWideChar);
    function  Get_IsLineSeparator: WordBool;
    procedure Set_IsLineSeparator(pVal: WordBool);
  public
    property DefaultInterface: ISCRToolbarSeparatorControl read GetDefaultInterface;
  published
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Kind: CrToolbarControlKindEnum read Get_Kind write Set_Kind;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property IsClientSide: WordBool read Get_IsClientSide write Set_IsClientSide;
    property IsLineSeparator: WordBool read Get_IsLineSeparator write Set_IsLineSeparator;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRuntimeIndentAndSpacingFormat provides a Create and CreateRemote method to          
// create instances of the default interface ISCRIndentAndSpacingFormat exposed by              
// the CoClass RuntimeIndentAndSpacingFormat. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuntimeIndentAndSpacingFormat = class
    class function Create: ISCRIndentAndSpacingFormat;
    class function CreateRemote(const MachineName: string): ISCRIndentAndSpacingFormat;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRuntimeIndentAndSpacingFormat
// Help String      : RuntimeIndentAndSpacingFormat Class 12.0
// Default Interface: ISCRIndentAndSpacingFormat
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuntimeIndentAndSpacingFormatProperties= class;
{$ENDIF}
  TRuntimeIndentAndSpacingFormat = class(TOleServer)
  private
    FIntf:        ISCRIndentAndSpacingFormat;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuntimeIndentAndSpacingFormatProperties;
    function      GetServerProperties: TRuntimeIndentAndSpacingFormatProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRIndentAndSpacingFormat;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_FirstLineIndent: Integer;
    procedure Set_FirstLineIndent(pVal: Integer);
    function  Get_LeftIndent: Integer;
    procedure Set_LeftIndent(pVal: Integer);
    function  Get_RightIndent: Integer;
    procedure Set_RightIndent(pVal: Integer);
    function  Get_LineSpacingType: CrLineSpacingTypeEnum;
    procedure Set_LineSpacingType(pVal: CrLineSpacingTypeEnum);
    function  Get_LineSpacing: Double;
    procedure Set_LineSpacing(pVal: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRIndentAndSpacingFormat);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRIndentAndSpacingFormat;
    procedure CopyTo(const IndentAndSpacingFormat: ISCRIndentAndSpacingFormat; DeepCopy: WordBool);
    function  Equals(const IndentAndSpacingFormat: ISCRIndentAndSpacingFormat): WordBool;
    property  DefaultInterface: ISCRIndentAndSpacingFormat read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property FirstLineIndent: Integer read Get_FirstLineIndent write Set_FirstLineIndent;
    property LeftIndent: Integer read Get_LeftIndent write Set_LeftIndent;
    property RightIndent: Integer read Get_RightIndent write Set_RightIndent;
    property LineSpacingType: CrLineSpacingTypeEnum read Get_LineSpacingType write Set_LineSpacingType;
    property LineSpacing: Double read Get_LineSpacing write Set_LineSpacing;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuntimeIndentAndSpacingFormatProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRuntimeIndentAndSpacingFormat
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuntimeIndentAndSpacingFormatProperties = class(TPersistent)
  private
    FServer:    TRuntimeIndentAndSpacingFormat;
    function    GetDefaultInterface: ISCRIndentAndSpacingFormat;
    constructor Create(AServer: TRuntimeIndentAndSpacingFormat);
  protected
    function  Get_ClassName: WideString;
    function  Get_FirstLineIndent: Integer;
    procedure Set_FirstLineIndent(pVal: Integer);
    function  Get_LeftIndent: Integer;
    procedure Set_LeftIndent(pVal: Integer);
    function  Get_RightIndent: Integer;
    procedure Set_RightIndent(pVal: Integer);
    function  Get_LineSpacingType: CrLineSpacingTypeEnum;
    procedure Set_LineSpacingType(pVal: CrLineSpacingTypeEnum);
    function  Get_LineSpacing: Double;
    procedure Set_LineSpacing(pVal: Double);
  public
    property DefaultInterface: ISCRIndentAndSpacingFormat read GetDefaultInterface;
  published
    property FirstLineIndent: Integer read Get_FirstLineIndent write Set_FirstLineIndent;
    property LeftIndent: Integer read Get_LeftIndent write Set_LeftIndent;
    property RightIndent: Integer read Get_RightIndent write Set_RightIndent;
    property LineSpacingType: CrLineSpacingTypeEnum read Get_LineSpacingType write Set_LineSpacingType;
    property LineSpacing: Double read Get_LineSpacing write Set_LineSpacing;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRuntimeStringFieldFormat provides a Create and CreateRemote method to          
// create instances of the default interface ISCRStringFieldFormat exposed by              
// the CoClass RuntimeStringFieldFormat. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuntimeStringFieldFormat = class
    class function Create: ISCRStringFieldFormat;
    class function CreateRemote(const MachineName: string): ISCRStringFieldFormat;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRuntimeStringFieldFormat
// Help String      : RuntimeStringFieldFormat Class 12.0
// Default Interface: ISCRStringFieldFormat
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuntimeStringFieldFormatProperties= class;
{$ENDIF}
  TRuntimeStringFieldFormat = class(TOleServer)
  private
    FIntf:        ISCRStringFieldFormat;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuntimeStringFieldFormatProperties;
    function      GetServerProperties: TRuntimeStringFieldFormatProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRStringFieldFormat;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_IndentAndSpacingFormat: ISCRIndentAndSpacingFormat;
    procedure Set_IndentAndSpacingFormat(const pVal: ISCRIndentAndSpacingFormat);
    function  Get_CharacterSpacing: Integer;
    procedure Set_CharacterSpacing(pVal: Integer);
    function  Get_MaxNumberOfLines: Integer;
    procedure Set_MaxNumberOfLines(pVal: Integer);
    function  Get_TextFormat: CrTextFormatEnum;
    procedure Set_TextFormat(pVal: CrTextFormatEnum);
    function  Get_ReadingOrder: CrReadingOrderEnum;
    procedure Set_ReadingOrder(pVal: CrReadingOrderEnum);
    function  Get_EnableWordWrap: WordBool;
    procedure Set_EnableWordWrap(pVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRStringFieldFormat);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRStringFieldFormat;
    procedure CopyTo(const StringFieldFormat: ISCRStringFieldFormat; DeepCopy: WordBool);
    function  Equals(const StringFieldFormat: ISCRStringFieldFormat): WordBool;
    property  DefaultInterface: ISCRStringFieldFormat read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property IndentAndSpacingFormat: ISCRIndentAndSpacingFormat read Get_IndentAndSpacingFormat write Set_IndentAndSpacingFormat;
    property CharacterSpacing: Integer read Get_CharacterSpacing write Set_CharacterSpacing;
    property MaxNumberOfLines: Integer read Get_MaxNumberOfLines write Set_MaxNumberOfLines;
    property TextFormat: CrTextFormatEnum read Get_TextFormat write Set_TextFormat;
    property ReadingOrder: CrReadingOrderEnum read Get_ReadingOrder write Set_ReadingOrder;
    property EnableWordWrap: WordBool read Get_EnableWordWrap write Set_EnableWordWrap;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuntimeStringFieldFormatProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRuntimeStringFieldFormat
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuntimeStringFieldFormatProperties = class(TPersistent)
  private
    FServer:    TRuntimeStringFieldFormat;
    function    GetDefaultInterface: ISCRStringFieldFormat;
    constructor Create(AServer: TRuntimeStringFieldFormat);
  protected
    function  Get_ClassName: WideString;
    function  Get_IndentAndSpacingFormat: ISCRIndentAndSpacingFormat;
    procedure Set_IndentAndSpacingFormat(const pVal: ISCRIndentAndSpacingFormat);
    function  Get_CharacterSpacing: Integer;
    procedure Set_CharacterSpacing(pVal: Integer);
    function  Get_MaxNumberOfLines: Integer;
    procedure Set_MaxNumberOfLines(pVal: Integer);
    function  Get_TextFormat: CrTextFormatEnum;
    procedure Set_TextFormat(pVal: CrTextFormatEnum);
    function  Get_ReadingOrder: CrReadingOrderEnum;
    procedure Set_ReadingOrder(pVal: CrReadingOrderEnum);
    function  Get_EnableWordWrap: WordBool;
    procedure Set_EnableWordWrap(pVal: WordBool);
  public
    property DefaultInterface: ISCRStringFieldFormat read GetDefaultInterface;
  published
    property IndentAndSpacingFormat: ISCRIndentAndSpacingFormat read Get_IndentAndSpacingFormat write Set_IndentAndSpacingFormat;
    property CharacterSpacing: Integer read Get_CharacterSpacing write Set_CharacterSpacing;
    property MaxNumberOfLines: Integer read Get_MaxNumberOfLines write Set_MaxNumberOfLines;
    property TextFormat: CrTextFormatEnum read Get_TextFormat write Set_TextFormat;
    property ReadingOrder: CrReadingOrderEnum read Get_ReadingOrder write Set_ReadingOrder;
    property EnableWordWrap: WordBool read Get_EnableWordWrap write Set_EnableWordWrap;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRuntimeFont provides a Create and CreateRemote method to          
// create instances of the default interface ISCRFont exposed by              
// the CoClass RuntimeFont. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuntimeFont = class
    class function Create: ISCRFont;
    class function CreateRemote(const MachineName: string): ISCRFont;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRuntimeFont
// Help String      : RuntimeFont Class 12.0
// Default Interface: ISCRFont
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuntimeFontProperties= class;
{$ENDIF}
  TRuntimeFont = class(TOleServer)
  private
    FIntf:        ISCRFont;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuntimeFontProperties;
    function      GetServerProperties: TRuntimeFontProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRFont;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_Name: WideString;
    procedure Set_Name(const pVal: WideString);
    function  Get_Size: Currency;
    procedure Set_Size(pVal: Currency);
    function  Get_Bold: WordBool;
    procedure Set_Bold(pVal: WordBool);
    function  Get_Italic: WordBool;
    procedure Set_Italic(pVal: WordBool);
    function  Get_Underline: WordBool;
    procedure Set_Underline(pVal: WordBool);
    function  Get_Strikethrough: WordBool;
    procedure Set_Strikethrough(pVal: WordBool);
    function  Get_Weight: Smallint;
    procedure Set_Weight(pVal: Smallint);
    function  Get_Charset: Smallint;
    procedure Set_Charset(pVal: Smallint);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRFont);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRFont;
    procedure CopyTo(const Font: ISCRFont; DeepCopy: WordBool);
    function  Equals(const Font: ISCRFont): WordBool;
    property  DefaultInterface: ISCRFont read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property Name: WideString read Get_Name write Set_Name;
    property Size: Currency read Get_Size write Set_Size;
    property Bold: WordBool read Get_Bold write Set_Bold;
    property Italic: WordBool read Get_Italic write Set_Italic;
    property Underline: WordBool read Get_Underline write Set_Underline;
    property Strikethrough: WordBool read Get_Strikethrough write Set_Strikethrough;
    property Weight: Smallint read Get_Weight write Set_Weight;
    property Charset: Smallint read Get_Charset write Set_Charset;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuntimeFontProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRuntimeFont
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuntimeFontProperties = class(TPersistent)
  private
    FServer:    TRuntimeFont;
    function    GetDefaultInterface: ISCRFont;
    constructor Create(AServer: TRuntimeFont);
  protected
    function  Get_ClassName: WideString;
    function  Get_Name: WideString;
    procedure Set_Name(const pVal: WideString);
    function  Get_Size: Currency;
    procedure Set_Size(pVal: Currency);
    function  Get_Bold: WordBool;
    procedure Set_Bold(pVal: WordBool);
    function  Get_Italic: WordBool;
    procedure Set_Italic(pVal: WordBool);
    function  Get_Underline: WordBool;
    procedure Set_Underline(pVal: WordBool);
    function  Get_Strikethrough: WordBool;
    procedure Set_Strikethrough(pVal: WordBool);
    function  Get_Weight: Smallint;
    procedure Set_Weight(pVal: Smallint);
    function  Get_Charset: Smallint;
    procedure Set_Charset(pVal: Smallint);
  public
    property DefaultInterface: ISCRFont read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property Size: Currency read Get_Size write Set_Size;
    property Bold: WordBool read Get_Bold write Set_Bold;
    property Italic: WordBool read Get_Italic write Set_Italic;
    property Underline: WordBool read Get_Underline write Set_Underline;
    property Strikethrough: WordBool read Get_Strikethrough write Set_Strikethrough;
    property Weight: Smallint read Get_Weight write Set_Weight;
    property Charset: Smallint read Get_Charset write Set_Charset;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRuntimeTabStops provides a Create and CreateRemote method to          
// create instances of the default interface ISCRTabStops exposed by              
// the CoClass RuntimeTabStops. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuntimeTabStops = class
    class function Create: ISCRTabStops;
    class function CreateRemote(const MachineName: string): ISCRTabStops;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRuntimeTabStops
// Help String      : RuntimeTabStops Class 12.0
// Default Interface: ISCRTabStops
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuntimeTabStopsProperties= class;
{$ENDIF}
  TRuntimeTabStops = class(TOleServer)
  private
    FIntf:        ISCRTabStops;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuntimeTabStopsProperties;
    function      GetServerProperties: TRuntimeTabStopsProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRTabStops;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRTabStop;
    procedure Set_Item(Index: Integer; const ppVal: ISCRTabStop);
    function  Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRTabStops);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRTabStops;
    procedure CopyTo(const TabStops: ISCRTabStops; DeepCopy: WordBool);
    function  Equals(const TabStops: ISCRTabStops): WordBool;
    procedure Add(const TabStop: ISCRTabStop);
    procedure Remove(Index: Integer);
    procedure Insert(Index: Integer; const TabStop: ISCRTabStop);
    procedure RemoveAll;
    procedure EnsureCapacity(MaxCapacity: Integer);
    function  FindIndexOf(const TabStop: ISCRTabStop): Integer;
    property  DefaultInterface: ISCRTabStops read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[Index: Integer]: ISCRTabStop read Get_Item write Set_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuntimeTabStopsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRuntimeTabStops
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuntimeTabStopsProperties = class(TPersistent)
  private
    FServer:    TRuntimeTabStops;
    function    GetDefaultInterface: ISCRTabStops;
    constructor Create(AServer: TRuntimeTabStops);
  protected
    function  Get_ClassName: WideString;
    function  Get__NewEnum: IUnknown;
    function  Get_Item(Index: Integer): ISCRTabStop;
    procedure Set_Item(Index: Integer; const ppVal: ISCRTabStop);
    function  Get_Count: Integer;
  public
    property DefaultInterface: ISCRTabStops read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRuntimeTabStop provides a Create and CreateRemote method to          
// create instances of the default interface ISCRTabStop exposed by              
// the CoClass RuntimeTabStop. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuntimeTabStop = class
    class function Create: ISCRTabStop;
    class function CreateRemote(const MachineName: string): ISCRTabStop;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRuntimeTabStop
// Help String      : RuntimeTabStop Class 12.0
// Default Interface: ISCRTabStop
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TRuntimeTabStopProperties= class;
{$ENDIF}
  TRuntimeTabStop = class(TOleServer)
  private
    FIntf:        ISCRTabStop;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TRuntimeTabStopProperties;
    function      GetServerProperties: TRuntimeTabStopProperties;
{$ENDIF}
    function      GetDefaultInterface: ISCRTabStop;
  protected
    procedure InitServerData; override;
    function  Get_ClassName: WideString;
    function  Get_XOffset: Integer;
    procedure Set_XOffset(pVal: Integer);
    function  Get_Alignment: CrAlignmentEnum;
    procedure Set_Alignment(pVal: CrAlignmentEnum);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISCRTabStop);
    procedure Disconnect; override;
    function  Clone(DeepClone: WordBool): ISCRTabStop;
    procedure CopyTo(const TabStop: ISCRTabStop; DeepCopy: WordBool);
    function  Equals(const TabStop: ISCRTabStop): WordBool;
    property  DefaultInterface: ISCRTabStop read GetDefaultInterface;
    property ClassName: WideString read Get_ClassName;
    property XOffset: Integer read Get_XOffset write Set_XOffset;
    property Alignment: CrAlignmentEnum read Get_Alignment write Set_Alignment;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TRuntimeTabStopProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRuntimeTabStop
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TRuntimeTabStopProperties = class(TPersistent)
  private
    FServer:    TRuntimeTabStop;
    function    GetDefaultInterface: ISCRTabStop;
    constructor Create(AServer: TRuntimeTabStop);
  protected
    function  Get_ClassName: WideString;
    function  Get_XOffset: Integer;
    procedure Set_XOffset(pVal: Integer);
    function  Get_Alignment: CrAlignmentEnum;
    procedure Set_Alignment(pVal: CrAlignmentEnum);
  public
    property DefaultInterface: ISCRTabStop read GetDefaultInterface;
  published
    property XOffset: Integer read Get_XOffset write Set_XOffset;
    property Alignment: CrAlignmentEnum read Get_Alignment write Set_Alignment;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoViewContext provides a Create and CreateRemote method to          
// create instances of the default interface ICRViewContext exposed by              
// the CoClass ViewContext. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoViewContext = class
    class function Create: ICRViewContext;
    class function CreateRemote(const MachineName: string): ICRViewContext;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TViewContext
// Help String      : ViewContext Class 12.0
// Default Interface: ICRViewContext
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TViewContextProperties= class;
{$ENDIF}
  TViewContext = class(TOleServer)
  private
    FIntf:        ICRViewContext;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TViewContextProperties;
    function      GetServerProperties: TViewContextProperties;
{$ENDIF}
    function      GetDefaultInterface: ICRViewContext;
  protected
    procedure InitServerData; override;
    function  Get_GroupPath: WideString;
    procedure Set_GroupPath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_DrillDownLevel: Integer;
    procedure Set_DrillDownLevel(pVal: Integer);
    function  Get_ReportName: WideString;
    procedure Set_ReportName(const pVal: WideString);
    function  Get_ContainingPageNumber: Integer;
    procedure Set_ContainingPageNumber(pVal: Integer);
    function  Get_ContainingGroupPath: WideString;
    procedure Set_ContainingGroupPath(const pVal: WideString);
    function  Get_ContainingGroupName: WideString;
    procedure Set_ContainingGroupName(const pVal: WideString);
    function  Get_XOffset: Integer;
    procedure Set_XOffset(pVal: Integer);
    function  Get_YOffset: Integer;
    procedure Set_YOffset(pVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICRViewContext);
    procedure Disconnect; override;
    property  DefaultInterface: ICRViewContext read GetDefaultInterface;
    property GroupPath: WideString read Get_GroupPath write Set_GroupPath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property DrillDownLevel: Integer read Get_DrillDownLevel write Set_DrillDownLevel;
    property ReportName: WideString read Get_ReportName write Set_ReportName;
    property ContainingPageNumber: Integer read Get_ContainingPageNumber write Set_ContainingPageNumber;
    property ContainingGroupPath: WideString read Get_ContainingGroupPath write Set_ContainingGroupPath;
    property ContainingGroupName: WideString read Get_ContainingGroupName write Set_ContainingGroupName;
    property XOffset: Integer read Get_XOffset write Set_XOffset;
    property YOffset: Integer read Get_YOffset write Set_YOffset;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TViewContextProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TViewContext
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TViewContextProperties = class(TPersistent)
  private
    FServer:    TViewContext;
    function    GetDefaultInterface: ICRViewContext;
    constructor Create(AServer: TViewContext);
  protected
    function  Get_GroupPath: WideString;
    procedure Set_GroupPath(const pVal: WideString);
    function  Get_GroupName: WideString;
    procedure Set_GroupName(const pVal: WideString);
    function  Get_DrillDownLevel: Integer;
    procedure Set_DrillDownLevel(pVal: Integer);
    function  Get_ReportName: WideString;
    procedure Set_ReportName(const pVal: WideString);
    function  Get_ContainingPageNumber: Integer;
    procedure Set_ContainingPageNumber(pVal: Integer);
    function  Get_ContainingGroupPath: WideString;
    procedure Set_ContainingGroupPath(const pVal: WideString);
    function  Get_ContainingGroupName: WideString;
    procedure Set_ContainingGroupName(const pVal: WideString);
    function  Get_XOffset: Integer;
    procedure Set_XOffset(pVal: Integer);
    function  Get_YOffset: Integer;
    procedure Set_YOffset(pVal: Integer);
  public
    property DefaultInterface: ICRViewContext read GetDefaultInterface;
  published
    property GroupPath: WideString read Get_GroupPath write Set_GroupPath;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property DrillDownLevel: Integer read Get_DrillDownLevel write Set_DrillDownLevel;
    property ReportName: WideString read Get_ReportName write Set_ReportName;
    property ContainingPageNumber: Integer read Get_ContainingPageNumber write Set_ContainingPageNumber;
    property ContainingGroupPath: WideString read Get_ContainingGroupPath write Set_ContainingGroupPath;
    property ContainingGroupName: WideString read Get_ContainingGroupName write Set_ContainingGroupName;
    property XOffset: Integer read Get_XOffset write Set_XOffset;
    property YOffset: Integer read Get_YOffset write Set_YOffset;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDebugInformation provides a Create and CreateRemote method to          
// create instances of the default interface ICRDebugInformation exposed by              
// the CoClass DebugInformation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDebugInformation = class
    class function Create: ICRDebugInformation;
    class function CreateRemote(const MachineName: string): ICRDebugInformation;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDebugInformation
// Help String      : DebugInformation Class 12.0
// Default Interface: ICRDebugInformation
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDebugInformationProperties= class;
{$ENDIF}
  TDebugInformation = class(TOleServer)
  private
    FIntf:        ICRDebugInformation;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDebugInformationProperties;
    function      GetServerProperties: TDebugInformationProperties;
{$ENDIF}
    function      GetDefaultInterface: ICRDebugInformation;
  protected
    procedure InitServerData; override;
    function  Get_PrintJobID: Integer;
    procedure Set_PrintJobID(pVal: Integer);
    function  Get_ProcessID: Integer;
    procedure Set_ProcessID(pVal: Integer);
    function  Get_DebugRecordID: Integer;
    procedure Set_DebugRecordID(pVal: Integer);
    function  Get_DataDateTimeStamp: WideString;
    procedure Set_DataDateTimeStamp(const pVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICRDebugInformation);
    procedure Disconnect; override;
    property  DefaultInterface: ICRDebugInformation read GetDefaultInterface;
    property PrintJobID: Integer read Get_PrintJobID write Set_PrintJobID;
    property ProcessID: Integer read Get_ProcessID write Set_ProcessID;
    property DebugRecordID: Integer read Get_DebugRecordID write Set_DebugRecordID;
    property DataDateTimeStamp: WideString read Get_DataDateTimeStamp write Set_DataDateTimeStamp;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDebugInformationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDebugInformation
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDebugInformationProperties = class(TPersistent)
  private
    FServer:    TDebugInformation;
    function    GetDefaultInterface: ICRDebugInformation;
    constructor Create(AServer: TDebugInformation);
  protected
    function  Get_PrintJobID: Integer;
    procedure Set_PrintJobID(pVal: Integer);
    function  Get_ProcessID: Integer;
    procedure Set_ProcessID(pVal: Integer);
    function  Get_DebugRecordID: Integer;
    procedure Set_DebugRecordID(pVal: Integer);
    function  Get_DataDateTimeStamp: WideString;
    procedure Set_DataDateTimeStamp(const pVal: WideString);
  public
    property DefaultInterface: ICRDebugInformation read GetDefaultInterface;
  published
    property PrintJobID: Integer read Get_PrintJobID write Set_PrintJobID;
    property ProcessID: Integer read Get_ProcessID write Set_ProcessID;
    property DebugRecordID: Integer read Get_DebugRecordID write Set_DebugRecordID;
    property DataDateTimeStamp: WideString read Get_DataDateTimeStamp write Set_DataDateTimeStamp;
  end;
{$ENDIF}


procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

implementation

uses ComObj;

class function CoPageObjectFactory.Create: ISCRPageObjectFactory;
begin
  Result := CreateComObject(CLASS_PageObjectFactory) as ISCRPageObjectFactory;
end;

class function CoPageObjectFactory.CreateRemote(const MachineName: string): ISCRPageObjectFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PageObjectFactory) as ISCRPageObjectFactory;
end;

procedure TPageObjectFactory.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{98FC3C5C-E58E-4B88-B11C-BE3CED0AA8B3}';
    IntfIID:   '{1EC6DAF9-763E-461F-9534-F9E2C59DB4C5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPageObjectFactory.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRPageObjectFactory;
  end;
end;

procedure TPageObjectFactory.ConnectTo(svrIntf: ISCRPageObjectFactory);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPageObjectFactory.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPageObjectFactory.GetDefaultInterface: ISCRPageObjectFactory;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TPageObjectFactory.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TPageObjectFactoryProperties.Create(Self);
{$ENDIF}
end;

destructor TPageObjectFactory.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TPageObjectFactory.GetServerProperties: TPageObjectFactoryProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TPageObjectFactory.GetReportObject(objectType: CrObjectInstanceKindEnum; 
                                             out ppReportObject: ISCRReportObjectInstance);
begin
  DefaultInterface.GetReportObject(objectType, ppReportObject);
end;

procedure TPageObjectFactory.GetPage(out ppReportPage: ISCRPageObjectInstance);
begin
  DefaultInterface.GetPage(ppReportPage);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TPageObjectFactoryProperties.Create(AServer: TPageObjectFactory);
begin
  inherited Create;
  FServer := AServer;
end;

function TPageObjectFactoryProperties.GetDefaultInterface: ISCRPageObjectFactory;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoPlaceHolderObjectInstance.Create: ISCRPlaceHolderObjectInstance;
begin
  Result := CreateComObject(CLASS_PlaceHolderObjectInstance) as ISCRPlaceHolderObjectInstance;
end;

class function CoPlaceHolderObjectInstance.CreateRemote(const MachineName: string): ISCRPlaceHolderObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PlaceHolderObjectInstance) as ISCRPlaceHolderObjectInstance;
end;

procedure TPlaceHolderObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C0D2A2E6-C44D-4F9E-99E8-AB09E4230EEC}';
    IntfIID:   '{B4181B10-1711-11D5-80E4-00D0B73CA715}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPlaceHolderObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRPlaceHolderObjectInstance;
  end;
end;

procedure TPlaceHolderObjectInstance.ConnectTo(svrIntf: ISCRPlaceHolderObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPlaceHolderObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPlaceHolderObjectInstance.GetDefaultInterface: ISCRPlaceHolderObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TPlaceHolderObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TPlaceHolderObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TPlaceHolderObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TPlaceHolderObjectInstance.GetServerProperties: TPlaceHolderObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TPlaceHolderObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TPlaceHolderObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TPlaceHolderObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TPlaceHolderObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TPlaceHolderObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TPlaceHolderObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TPlaceHolderObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TPlaceHolderObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TPlaceHolderObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TPlaceHolderObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TPlaceHolderObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TPlaceHolderObjectInstance.Clone(DeepClone: WordBool): ISCRPlaceHolderObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TPlaceHolderObjectInstance.CopyTo(const PlaceHolderObjectInstance: ISCRPlaceHolderObjectInstance; 
                                            DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(PlaceHolderObjectInstance, DeepCopy);
end;

function  TPlaceHolderObjectInstance.Equals(const PlaceHolderObjectInstance: ISCRPlaceHolderObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(PlaceHolderObjectInstance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TPlaceHolderObjectInstanceProperties.Create(AServer: TPlaceHolderObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TPlaceHolderObjectInstanceProperties.GetDefaultInterface: ISCRPlaceHolderObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TPlaceHolderObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TPlaceHolderObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TPlaceHolderObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TPlaceHolderObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TPlaceHolderObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TPlaceHolderObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TPlaceHolderObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TPlaceHolderObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TPlaceHolderObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TPlaceHolderObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TPlaceHolderObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

{$ENDIF}

class function CoFieldObjectInstance.Create: ISCRFieldObjectInstance;
begin
  Result := CreateComObject(CLASS_FieldObjectInstance) as ISCRFieldObjectInstance;
end;

class function CoFieldObjectInstance.CreateRemote(const MachineName: string): ISCRFieldObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FieldObjectInstance) as ISCRFieldObjectInstance;
end;

procedure TFieldObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FD1178DB-5AB2-4785-B661-34F22B333721}';
    IntfIID:   '{44A3DE30-6B12-4859-B675-3F0EC3DD4C36}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFieldObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRFieldObjectInstance;
  end;
end;

procedure TFieldObjectInstance.ConnectTo(svrIntf: ISCRFieldObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFieldObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFieldObjectInstance.GetDefaultInterface: ISCRFieldObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFieldObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFieldObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TFieldObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFieldObjectInstance.GetServerProperties: TFieldObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TFieldObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TFieldObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TFieldObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TFieldObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TFieldObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TFieldObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TFieldObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TFieldObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TFieldObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TFieldObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TFieldObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TFieldObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TFieldObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TFieldObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TFieldObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TFieldObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TFieldObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TFieldObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TFieldObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TFieldObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TFieldObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TFieldObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TFieldObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TFieldObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TFieldObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TFieldObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TFieldObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TFieldObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TFieldObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TFieldObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TFieldObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TFieldObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TFieldObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TFieldObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TFieldObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TFieldObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TFieldObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TFieldObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TFieldObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TFieldObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TFieldObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TFieldObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TFieldObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TFieldObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TFieldObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TFieldObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TFieldObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TFieldObjectInstance.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TFieldObjectInstance.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TFieldObjectInstance.Get_FieldType: CrRuntimeFieldKindEnum;
begin
  Result := DefaultInterface.FieldType;
end;

procedure TFieldObjectInstance.Set_FieldType(pVal: CrRuntimeFieldKindEnum);
begin
  DefaultInterface.FieldType := pVal;
end;

function  TFieldObjectInstance.Get_FieldValueType: CrFieldValueTypeEnum;
begin
  Result := DefaultInterface.FieldValueType;
end;

procedure TFieldObjectInstance.Set_FieldValueType(pVal: CrFieldValueTypeEnum);
begin
  DefaultInterface.FieldValueType := pVal;
end;

function  TFieldObjectInstance.Get_IsConstantField: WordBool;
begin
  Result := DefaultInterface.IsConstantField;
end;

procedure TFieldObjectInstance.Set_IsConstantField(pVal: WordBool);
begin
  DefaultInterface.IsConstantField := pVal;
end;

function  TFieldObjectInstance.Get_IsPrintTimeField: WordBool;
begin
  Result := DefaultInterface.IsPrintTimeField;
end;

procedure TFieldObjectInstance.Set_IsPrintTimeField(pVal: WordBool);
begin
  DefaultInterface.IsPrintTimeField := pVal;
end;

function  TFieldObjectInstance.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TFieldObjectInstance.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TFieldObjectInstance.Get_FieldFormat: ISCRFieldFormat;
begin
  Result := DefaultInterface.FieldFormat;
end;

procedure TFieldObjectInstance.Set_FieldFormat(const pVal: ISCRFieldFormat);
begin
  DefaultInterface.FieldFormat := pVal;
end;

function  TFieldObjectInstance.Get_LeftAlignFixedLeft: WordBool;
begin
  Result := DefaultInterface.LeftAlignFixedLeft;
end;

procedure TFieldObjectInstance.Set_LeftAlignFixedLeft(pVal: WordBool);
begin
  DefaultInterface.LeftAlignFixedLeft := pVal;
end;

function  TFieldObjectInstance.Get_RightAlignFixedRight: WordBool;
begin
  Result := DefaultInterface.RightAlignFixedRight;
end;

procedure TFieldObjectInstance.Set_RightAlignFixedRight(pVal: WordBool);
begin
  DefaultInterface.RightAlignFixedRight := pVal;
end;

function  TFieldObjectInstance.Get_AllowClipping: WordBool;
begin
  Result := DefaultInterface.AllowClipping;
end;

procedure TFieldObjectInstance.Set_AllowClipping(pVal: WordBool);
begin
  DefaultInterface.AllowClipping := pVal;
end;

function  TFieldObjectInstance.Get_FieldStrings: ISCRStrings;
begin
  Result := DefaultInterface.FieldStrings;
end;

procedure TFieldObjectInstance.Set_FieldStrings(const pVal: ISCRStrings);
begin
  DefaultInterface.FieldStrings := pVal;
end;

function  TFieldObjectInstance.Get_FieldHasRawValue: WordBool;
begin
  Result := DefaultInterface.FieldHasRawValue;
end;

procedure TFieldObjectInstance.Set_FieldHasRawValue(pVal: WordBool);
begin
  DefaultInterface.FieldHasRawValue := pVal;
end;

function  TFieldObjectInstance.Get_RawData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.RawData;
end;

procedure TFieldObjectInstance.Set_RawData(pVal: OleVariant);
begin
  DefaultInterface.RawData := pVal;
end;

function  TFieldObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TFieldObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                      DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TFieldObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TFieldObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TFieldObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TFieldObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                    out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TFieldObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TFieldObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TFieldObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFieldObjectInstanceProperties.Create(AServer: TFieldObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TFieldObjectInstanceProperties.GetDefaultInterface: ISCRFieldObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TFieldObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TFieldObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TFieldObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TFieldObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TFieldObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TFieldObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TFieldObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TFieldObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TFieldObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TFieldObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TFieldObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TFieldObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TFieldObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TFieldObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TFieldObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TFieldObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TFieldObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TFieldObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TFieldObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TFieldObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TFieldObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TFieldObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TFieldObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TFieldObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TFieldObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TFieldObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TFieldObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TFieldObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TFieldObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TFieldObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TFieldObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TFieldObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TFieldObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TFieldObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TFieldObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TFieldObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TFieldObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TFieldObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TFieldObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TFieldObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TFieldObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TFieldObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TFieldObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TFieldObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TFieldObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TFieldObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TFieldObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TFieldObjectInstanceProperties.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TFieldObjectInstanceProperties.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TFieldObjectInstanceProperties.Get_FieldType: CrRuntimeFieldKindEnum;
begin
  Result := DefaultInterface.FieldType;
end;

procedure TFieldObjectInstanceProperties.Set_FieldType(pVal: CrRuntimeFieldKindEnum);
begin
  DefaultInterface.FieldType := pVal;
end;

function  TFieldObjectInstanceProperties.Get_FieldValueType: CrFieldValueTypeEnum;
begin
  Result := DefaultInterface.FieldValueType;
end;

procedure TFieldObjectInstanceProperties.Set_FieldValueType(pVal: CrFieldValueTypeEnum);
begin
  DefaultInterface.FieldValueType := pVal;
end;

function  TFieldObjectInstanceProperties.Get_IsConstantField: WordBool;
begin
  Result := DefaultInterface.IsConstantField;
end;

procedure TFieldObjectInstanceProperties.Set_IsConstantField(pVal: WordBool);
begin
  DefaultInterface.IsConstantField := pVal;
end;

function  TFieldObjectInstanceProperties.Get_IsPrintTimeField: WordBool;
begin
  Result := DefaultInterface.IsPrintTimeField;
end;

procedure TFieldObjectInstanceProperties.Set_IsPrintTimeField(pVal: WordBool);
begin
  DefaultInterface.IsPrintTimeField := pVal;
end;

function  TFieldObjectInstanceProperties.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TFieldObjectInstanceProperties.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TFieldObjectInstanceProperties.Get_FieldFormat: ISCRFieldFormat;
begin
  Result := DefaultInterface.FieldFormat;
end;

procedure TFieldObjectInstanceProperties.Set_FieldFormat(const pVal: ISCRFieldFormat);
begin
  DefaultInterface.FieldFormat := pVal;
end;

function  TFieldObjectInstanceProperties.Get_LeftAlignFixedLeft: WordBool;
begin
  Result := DefaultInterface.LeftAlignFixedLeft;
end;

procedure TFieldObjectInstanceProperties.Set_LeftAlignFixedLeft(pVal: WordBool);
begin
  DefaultInterface.LeftAlignFixedLeft := pVal;
end;

function  TFieldObjectInstanceProperties.Get_RightAlignFixedRight: WordBool;
begin
  Result := DefaultInterface.RightAlignFixedRight;
end;

procedure TFieldObjectInstanceProperties.Set_RightAlignFixedRight(pVal: WordBool);
begin
  DefaultInterface.RightAlignFixedRight := pVal;
end;

function  TFieldObjectInstanceProperties.Get_AllowClipping: WordBool;
begin
  Result := DefaultInterface.AllowClipping;
end;

procedure TFieldObjectInstanceProperties.Set_AllowClipping(pVal: WordBool);
begin
  DefaultInterface.AllowClipping := pVal;
end;

function  TFieldObjectInstanceProperties.Get_FieldStrings: ISCRStrings;
begin
  Result := DefaultInterface.FieldStrings;
end;

procedure TFieldObjectInstanceProperties.Set_FieldStrings(const pVal: ISCRStrings);
begin
  DefaultInterface.FieldStrings := pVal;
end;

function  TFieldObjectInstanceProperties.Get_FieldHasRawValue: WordBool;
begin
  Result := DefaultInterface.FieldHasRawValue;
end;

procedure TFieldObjectInstanceProperties.Set_FieldHasRawValue(pVal: WordBool);
begin
  DefaultInterface.FieldHasRawValue := pVal;
end;

function  TFieldObjectInstanceProperties.Get_RawData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.RawData;
end;

procedure TFieldObjectInstanceProperties.Set_RawData(pVal: OleVariant);
begin
  DefaultInterface.RawData := pVal;
end;

{$ENDIF}

class function CoTextObjectInstance.Create: ISCRTextObjectInstance;
begin
  Result := CreateComObject(CLASS_TextObjectInstance) as ISCRTextObjectInstance;
end;

class function CoTextObjectInstance.CreateRemote(const MachineName: string): ISCRTextObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TextObjectInstance) as ISCRTextObjectInstance;
end;

procedure TTextObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C441707A-954A-4787-A01C-F5F52E0192F0}';
    IntfIID:   '{83E6BD6F-76E0-4964-8902-18C45BBF4DE2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTextObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRTextObjectInstance;
  end;
end;

procedure TTextObjectInstance.ConnectTo(svrIntf: ISCRTextObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTextObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTextObjectInstance.GetDefaultInterface: ISCRTextObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTextObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTextObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TTextObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTextObjectInstance.GetServerProperties: TTextObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TTextObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TTextObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TTextObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TTextObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TTextObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TTextObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TTextObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TTextObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TTextObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TTextObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TTextObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TTextObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TTextObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TTextObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TTextObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TTextObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TTextObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TTextObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TTextObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TTextObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TTextObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TTextObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TTextObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TTextObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TTextObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TTextObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TTextObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TTextObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TTextObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TTextObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TTextObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TTextObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TTextObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TTextObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TTextObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TTextObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TTextObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TTextObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TTextObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TTextObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TTextObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TTextObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TTextObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TTextObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TTextObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TTextObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TTextObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TTextObjectInstance.Get_StartLineNumber: Integer;
begin
  Result := DefaultInterface.StartLineNumber;
end;

procedure TTextObjectInstance.Set_StartLineNumber(pVal: Integer);
begin
  DefaultInterface.StartLineNumber := pVal;
end;

function  TTextObjectInstance.Get_EndLineNumber: Integer;
begin
  Result := DefaultInterface.EndLineNumber;
end;

procedure TTextObjectInstance.Set_EndLineNumber(pVal: Integer);
begin
  DefaultInterface.EndLineNumber := pVal;
end;

function  TTextObjectInstance.Get_VerticalStartOffset: Integer;
begin
  Result := DefaultInterface.VerticalStartOffset;
end;

procedure TTextObjectInstance.Set_VerticalStartOffset(pVal: Integer);
begin
  DefaultInterface.VerticalStartOffset := pVal;
end;

function  TTextObjectInstance.Get_Paragraphs: ISCRRuntimeParagraphs;
begin
  Result := DefaultInterface.Paragraphs;
end;

procedure TTextObjectInstance.Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
begin
  DefaultInterface.Paragraphs := pVal;
end;

function  TTextObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TTextObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                     DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TTextObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TTextObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TTextObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TTextObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                   out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TTextObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TTextObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TTextObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

procedure TTextObjectInstance.SetUpDefaultObject(const bstrText: WideString);
begin
  DefaultInterface.SetUpDefaultObject(bstrText);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTextObjectInstanceProperties.Create(AServer: TTextObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TTextObjectInstanceProperties.GetDefaultInterface: ISCRTextObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TTextObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TTextObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TTextObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TTextObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TTextObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TTextObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TTextObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TTextObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TTextObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TTextObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TTextObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TTextObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TTextObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TTextObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TTextObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TTextObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TTextObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TTextObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TTextObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TTextObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TTextObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TTextObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TTextObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TTextObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TTextObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TTextObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TTextObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TTextObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TTextObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TTextObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TTextObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TTextObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TTextObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TTextObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TTextObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TTextObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TTextObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TTextObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TTextObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TTextObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TTextObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TTextObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TTextObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TTextObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TTextObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TTextObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TTextObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TTextObjectInstanceProperties.Get_StartLineNumber: Integer;
begin
  Result := DefaultInterface.StartLineNumber;
end;

procedure TTextObjectInstanceProperties.Set_StartLineNumber(pVal: Integer);
begin
  DefaultInterface.StartLineNumber := pVal;
end;

function  TTextObjectInstanceProperties.Get_EndLineNumber: Integer;
begin
  Result := DefaultInterface.EndLineNumber;
end;

procedure TTextObjectInstanceProperties.Set_EndLineNumber(pVal: Integer);
begin
  DefaultInterface.EndLineNumber := pVal;
end;

function  TTextObjectInstanceProperties.Get_VerticalStartOffset: Integer;
begin
  Result := DefaultInterface.VerticalStartOffset;
end;

procedure TTextObjectInstanceProperties.Set_VerticalStartOffset(pVal: Integer);
begin
  DefaultInterface.VerticalStartOffset := pVal;
end;

function  TTextObjectInstanceProperties.Get_Paragraphs: ISCRRuntimeParagraphs;
begin
  Result := DefaultInterface.Paragraphs;
end;

procedure TTextObjectInstanceProperties.Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
begin
  DefaultInterface.Paragraphs := pVal;
end;

{$ENDIF}

class function CoReportObjectInstances.Create: ISCRReportObjectInstances;
begin
  Result := CreateComObject(CLASS_ReportObjectInstances) as ISCRReportObjectInstances;
end;

class function CoReportObjectInstances.CreateRemote(const MachineName: string): ISCRReportObjectInstances;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReportObjectInstances) as ISCRReportObjectInstances;
end;

procedure TReportObjectInstances.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{371D53A9-27DA-4D51-B7ED-56FA8B61375D}';
    IntfIID:   '{F62D5420-A6F4-4513-A4D4-137A0BC0E2A6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TReportObjectInstances.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRReportObjectInstances;
  end;
end;

procedure TReportObjectInstances.ConnectTo(svrIntf: ISCRReportObjectInstances);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TReportObjectInstances.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TReportObjectInstances.GetDefaultInterface: ISCRReportObjectInstances;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TReportObjectInstances.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TReportObjectInstancesProperties.Create(Self);
{$ENDIF}
end;

destructor TReportObjectInstances.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TReportObjectInstances.GetServerProperties: TReportObjectInstancesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TReportObjectInstances.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TReportObjectInstances.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TReportObjectInstances.Get_Item(Index: Integer): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TReportObjectInstances.Set_Item(Index: Integer; const ppVal: ISCRReportObjectInstance);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TReportObjectInstances.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TReportObjectInstances.Clone(DeepClone: WordBool): ISCRReportObjectInstances;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TReportObjectInstances.CopyTo(const ReportObjectInstances: ISCRReportObjectInstances; 
                                        DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstances, DeepCopy);
end;

function  TReportObjectInstances.Equals(const ReportObjectInstances: ISCRReportObjectInstances): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstances);
end;

procedure TReportObjectInstances.Add(const ReportObjectInstance: ISCRReportObjectInstance);
begin
  DefaultInterface.Add(ReportObjectInstance);
end;

procedure TReportObjectInstances.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TReportObjectInstances.Insert(Index: Integer; 
                                        const ReportObjectInstance: ISCRReportObjectInstance);
begin
  DefaultInterface.Insert(Index, ReportObjectInstance);
end;

procedure TReportObjectInstances.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TReportObjectInstances.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TReportObjectInstances.FindIndexOf(const ReportObjectInstance: ISCRReportObjectInstance): Integer;
begin
  Result := DefaultInterface.FindIndexOf(ReportObjectInstance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TReportObjectInstancesProperties.Create(AServer: TReportObjectInstances);
begin
  inherited Create;
  FServer := AServer;
end;

function TReportObjectInstancesProperties.GetDefaultInterface: ISCRReportObjectInstances;
begin
  Result := FServer.DefaultInterface;
end;

function  TReportObjectInstancesProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TReportObjectInstancesProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TReportObjectInstancesProperties.Get_Item(Index: Integer): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TReportObjectInstancesProperties.Set_Item(Index: Integer; 
                                                    const ppVal: ISCRReportObjectInstance);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TReportObjectInstancesProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoChartObjectInstance.Create: ISCRChartObjectInstance;
begin
  Result := CreateComObject(CLASS_ChartObjectInstance) as ISCRChartObjectInstance;
end;

class function CoChartObjectInstance.CreateRemote(const MachineName: string): ISCRChartObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ChartObjectInstance) as ISCRChartObjectInstance;
end;

procedure TChartObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{689F493D-B038-4636-8B26-9C97276CF654}';
    IntfIID:   '{85E0F245-EABA-455E-B232-17D347D72DE7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TChartObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRChartObjectInstance;
  end;
end;

procedure TChartObjectInstance.ConnectTo(svrIntf: ISCRChartObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TChartObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TChartObjectInstance.GetDefaultInterface: ISCRChartObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TChartObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TChartObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TChartObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TChartObjectInstance.GetServerProperties: TChartObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TChartObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TChartObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TChartObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TChartObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TChartObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TChartObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TChartObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TChartObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TChartObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TChartObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TChartObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TChartObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TChartObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TChartObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TChartObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TChartObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TChartObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TChartObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TChartObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TChartObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TChartObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TChartObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TChartObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TChartObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TChartObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TChartObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TChartObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TChartObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TChartObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TChartObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TChartObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TChartObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TChartObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TChartObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TChartObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TChartObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TChartObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TChartObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TChartObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TChartObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TChartObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TChartObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TChartObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TChartObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TChartObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TChartObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TChartObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TChartObjectInstance.Get_ImageFormat: CrImageFormatEnum;
begin
  Result := DefaultInterface.ImageFormat;
end;

procedure TChartObjectInstance.Set_ImageFormat(pVal: CrImageFormatEnum);
begin
  DefaultInterface.ImageFormat := pVal;
end;

function  TChartObjectInstance.Get_ImageData: ISequentialStream;
begin
  Result := DefaultInterface.ImageData;
end;

procedure TChartObjectInstance.Set_ImageData(const pVal: ISequentialStream);
begin
  DefaultInterface.ImageData := pVal;
end;

function  TChartObjectInstance.Get_ImageByteArray: ISCRByteArray;
begin
  Result := DefaultInterface.ImageByteArray;
end;

procedure TChartObjectInstance.Set_ImageByteArray(const pVal: ISCRByteArray);
begin
  DefaultInterface.ImageByteArray := pVal;
end;

function  TChartObjectInstance.Get_AnalysisGridType: CrAnalysisGridEnum;
begin
  Result := DefaultInterface.AnalysisGridType;
end;

procedure TChartObjectInstance.Set_AnalysisGridType(pVal: CrAnalysisGridEnum);
begin
  DefaultInterface.AnalysisGridType := pVal;
end;

function  TChartObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TChartObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                      DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TChartObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TChartObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TChartObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TChartObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                    out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TChartObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TChartObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TChartObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TChartObjectInstanceProperties.Create(AServer: TChartObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TChartObjectInstanceProperties.GetDefaultInterface: ISCRChartObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TChartObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TChartObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TChartObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TChartObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TChartObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TChartObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TChartObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TChartObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TChartObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TChartObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TChartObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TChartObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TChartObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TChartObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TChartObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TChartObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TChartObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TChartObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TChartObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TChartObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TChartObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TChartObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TChartObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TChartObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TChartObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TChartObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TChartObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TChartObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TChartObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TChartObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TChartObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TChartObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TChartObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TChartObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TChartObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TChartObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TChartObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TChartObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TChartObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TChartObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TChartObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TChartObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TChartObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TChartObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TChartObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TChartObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TChartObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TChartObjectInstanceProperties.Get_ImageFormat: CrImageFormatEnum;
begin
  Result := DefaultInterface.ImageFormat;
end;

procedure TChartObjectInstanceProperties.Set_ImageFormat(pVal: CrImageFormatEnum);
begin
  DefaultInterface.ImageFormat := pVal;
end;

function  TChartObjectInstanceProperties.Get_ImageData: ISequentialStream;
begin
  Result := DefaultInterface.ImageData;
end;

procedure TChartObjectInstanceProperties.Set_ImageData(const pVal: ISequentialStream);
begin
  DefaultInterface.ImageData := pVal;
end;

function  TChartObjectInstanceProperties.Get_ImageByteArray: ISCRByteArray;
begin
  Result := DefaultInterface.ImageByteArray;
end;

procedure TChartObjectInstanceProperties.Set_ImageByteArray(const pVal: ISCRByteArray);
begin
  DefaultInterface.ImageByteArray := pVal;
end;

function  TChartObjectInstanceProperties.Get_AnalysisGridType: CrAnalysisGridEnum;
begin
  Result := DefaultInterface.AnalysisGridType;
end;

procedure TChartObjectInstanceProperties.Set_AnalysisGridType(pVal: CrAnalysisGridEnum);
begin
  DefaultInterface.AnalysisGridType := pVal;
end;

{$ENDIF}

class function CoNumericFieldObjectInstance.Create: ISCRNumericFieldObjectInstance;
begin
  Result := CreateComObject(CLASS_NumericFieldObjectInstance) as ISCRNumericFieldObjectInstance;
end;

class function CoNumericFieldObjectInstance.CreateRemote(const MachineName: string): ISCRNumericFieldObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NumericFieldObjectInstance) as ISCRNumericFieldObjectInstance;
end;

procedure TNumericFieldObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{16B96D8E-7BA5-47F4-A7BA-56E80A831954}';
    IntfIID:   '{7EF438A6-0185-45CB-8CF1-67A2CE93F9BC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNumericFieldObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRNumericFieldObjectInstance;
  end;
end;

procedure TNumericFieldObjectInstance.ConnectTo(svrIntf: ISCRNumericFieldObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNumericFieldObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNumericFieldObjectInstance.GetDefaultInterface: ISCRNumericFieldObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNumericFieldObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNumericFieldObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TNumericFieldObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNumericFieldObjectInstance.GetServerProperties: TNumericFieldObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TNumericFieldObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TNumericFieldObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TNumericFieldObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TNumericFieldObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TNumericFieldObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TNumericFieldObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TNumericFieldObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TNumericFieldObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TNumericFieldObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TNumericFieldObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TNumericFieldObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TNumericFieldObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TNumericFieldObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TNumericFieldObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TNumericFieldObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TNumericFieldObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TNumericFieldObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TNumericFieldObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TNumericFieldObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TNumericFieldObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TNumericFieldObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TNumericFieldObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TNumericFieldObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TNumericFieldObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TNumericFieldObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TNumericFieldObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TNumericFieldObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TNumericFieldObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TNumericFieldObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TNumericFieldObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TNumericFieldObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TNumericFieldObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TNumericFieldObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TNumericFieldObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TNumericFieldObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TNumericFieldObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TNumericFieldObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TNumericFieldObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TNumericFieldObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TNumericFieldObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TNumericFieldObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TNumericFieldObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TNumericFieldObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TNumericFieldObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TNumericFieldObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TNumericFieldObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TNumericFieldObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TNumericFieldObjectInstance.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TNumericFieldObjectInstance.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TNumericFieldObjectInstance.Get_FieldType: CrRuntimeFieldKindEnum;
begin
  Result := DefaultInterface.FieldType;
end;

procedure TNumericFieldObjectInstance.Set_FieldType(pVal: CrRuntimeFieldKindEnum);
begin
  DefaultInterface.FieldType := pVal;
end;

function  TNumericFieldObjectInstance.Get_FieldValueType: CrFieldValueTypeEnum;
begin
  Result := DefaultInterface.FieldValueType;
end;

procedure TNumericFieldObjectInstance.Set_FieldValueType(pVal: CrFieldValueTypeEnum);
begin
  DefaultInterface.FieldValueType := pVal;
end;

function  TNumericFieldObjectInstance.Get_IsConstantField: WordBool;
begin
  Result := DefaultInterface.IsConstantField;
end;

procedure TNumericFieldObjectInstance.Set_IsConstantField(pVal: WordBool);
begin
  DefaultInterface.IsConstantField := pVal;
end;

function  TNumericFieldObjectInstance.Get_IsPrintTimeField: WordBool;
begin
  Result := DefaultInterface.IsPrintTimeField;
end;

procedure TNumericFieldObjectInstance.Set_IsPrintTimeField(pVal: WordBool);
begin
  DefaultInterface.IsPrintTimeField := pVal;
end;

function  TNumericFieldObjectInstance.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TNumericFieldObjectInstance.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TNumericFieldObjectInstance.Get_FieldFormat: ISCRFieldFormat;
begin
  Result := DefaultInterface.FieldFormat;
end;

procedure TNumericFieldObjectInstance.Set_FieldFormat(const pVal: ISCRFieldFormat);
begin
  DefaultInterface.FieldFormat := pVal;
end;

function  TNumericFieldObjectInstance.Get_LeftAlignFixedLeft: WordBool;
begin
  Result := DefaultInterface.LeftAlignFixedLeft;
end;

procedure TNumericFieldObjectInstance.Set_LeftAlignFixedLeft(pVal: WordBool);
begin
  DefaultInterface.LeftAlignFixedLeft := pVal;
end;

function  TNumericFieldObjectInstance.Get_RightAlignFixedRight: WordBool;
begin
  Result := DefaultInterface.RightAlignFixedRight;
end;

procedure TNumericFieldObjectInstance.Set_RightAlignFixedRight(pVal: WordBool);
begin
  DefaultInterface.RightAlignFixedRight := pVal;
end;

function  TNumericFieldObjectInstance.Get_AllowClipping: WordBool;
begin
  Result := DefaultInterface.AllowClipping;
end;

procedure TNumericFieldObjectInstance.Set_AllowClipping(pVal: WordBool);
begin
  DefaultInterface.AllowClipping := pVal;
end;

function  TNumericFieldObjectInstance.Get_FieldStrings: ISCRStrings;
begin
  Result := DefaultInterface.FieldStrings;
end;

procedure TNumericFieldObjectInstance.Set_FieldStrings(const pVal: ISCRStrings);
begin
  DefaultInterface.FieldStrings := pVal;
end;

function  TNumericFieldObjectInstance.Get_FieldHasRawValue: WordBool;
begin
  Result := DefaultInterface.FieldHasRawValue;
end;

procedure TNumericFieldObjectInstance.Set_FieldHasRawValue(pVal: WordBool);
begin
  DefaultInterface.FieldHasRawValue := pVal;
end;

function  TNumericFieldObjectInstance.Get_RawData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.RawData;
end;

procedure TNumericFieldObjectInstance.Set_RawData(pVal: OleVariant);
begin
  DefaultInterface.RawData := pVal;
end;

function  TNumericFieldObjectInstance.Get_FixedLeft: WideString;
begin
  Result := DefaultInterface.FixedLeft;
end;

procedure TNumericFieldObjectInstance.Set_FixedLeft(const pVal: WideString);
  { Warning: The property FixedLeft has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedLeft := pVal;
end;

function  TNumericFieldObjectInstance.Get_FixedLeftReserve: WideString;
begin
  Result := DefaultInterface.FixedLeftReserve;
end;

procedure TNumericFieldObjectInstance.Set_FixedLeftReserve(const pVal: WideString);
  { Warning: The property FixedLeftReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedLeftReserve := pVal;
end;

function  TNumericFieldObjectInstance.Get_FixedRight: WideString;
begin
  Result := DefaultInterface.FixedRight;
end;

procedure TNumericFieldObjectInstance.Set_FixedRight(const pVal: WideString);
  { Warning: The property FixedRight has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedRight := pVal;
end;

function  TNumericFieldObjectInstance.Get_FixedRightReserve: WideString;
begin
  Result := DefaultInterface.FixedRightReserve;
end;

procedure TNumericFieldObjectInstance.Set_FixedRightReserve(const pVal: WideString);
  { Warning: The property FixedRightReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedRightReserve := pVal;
end;

function  TNumericFieldObjectInstance.Get_LeftFill: WideString;
begin
  Result := DefaultInterface.LeftFill;
end;

procedure TNumericFieldObjectInstance.Set_LeftFill(const pVal: WideString);
  { Warning: The property LeftFill has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LeftFill := pVal;
end;

function  TNumericFieldObjectInstance.Get_RightFill: WideString;
begin
  Result := DefaultInterface.RightFill;
end;

procedure TNumericFieldObjectInstance.Set_RightFill(const pVal: WideString);
  { Warning: The property RightFill has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RightFill := pVal;
end;

function  TNumericFieldObjectInstance.Get_Prefix: WideString;
begin
  Result := DefaultInterface.Prefix;
end;

procedure TNumericFieldObjectInstance.Set_Prefix(const pVal: WideString);
  { Warning: The property Prefix has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Prefix := pVal;
end;

function  TNumericFieldObjectInstance.Get_PrefixReserve: WideString;
begin
  Result := DefaultInterface.PrefixReserve;
end;

procedure TNumericFieldObjectInstance.Set_PrefixReserve(const pVal: WideString);
  { Warning: The property PrefixReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrefixReserve := pVal;
end;

function  TNumericFieldObjectInstance.Get_Suffix: WideString;
begin
  Result := DefaultInterface.Suffix;
end;

procedure TNumericFieldObjectInstance.Set_Suffix(const pVal: WideString);
  { Warning: The property Suffix has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Suffix := pVal;
end;

function  TNumericFieldObjectInstance.Get_SuffixReserve: WideString;
begin
  Result := DefaultInterface.SuffixReserve;
end;

procedure TNumericFieldObjectInstance.Set_SuffixReserve(const pVal: WideString);
  { Warning: The property SuffixReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SuffixReserve := pVal;
end;

function  TNumericFieldObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TNumericFieldObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                             DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TNumericFieldObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TNumericFieldObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TNumericFieldObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TNumericFieldObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                           out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TNumericFieldObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TNumericFieldObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TNumericFieldObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNumericFieldObjectInstanceProperties.Create(AServer: TNumericFieldObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TNumericFieldObjectInstanceProperties.GetDefaultInterface: ISCRNumericFieldObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TNumericFieldObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TNumericFieldObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TNumericFieldObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TNumericFieldObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TNumericFieldObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TNumericFieldObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TNumericFieldObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TNumericFieldObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TNumericFieldObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TNumericFieldObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TNumericFieldObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TNumericFieldObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TNumericFieldObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TNumericFieldObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TNumericFieldObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TNumericFieldObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TNumericFieldObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TNumericFieldObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TNumericFieldObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TNumericFieldObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TNumericFieldObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TNumericFieldObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TNumericFieldObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TNumericFieldObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TNumericFieldObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TNumericFieldObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TNumericFieldObjectInstanceProperties.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TNumericFieldObjectInstanceProperties.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_FieldType: CrRuntimeFieldKindEnum;
begin
  Result := DefaultInterface.FieldType;
end;

procedure TNumericFieldObjectInstanceProperties.Set_FieldType(pVal: CrRuntimeFieldKindEnum);
begin
  DefaultInterface.FieldType := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_FieldValueType: CrFieldValueTypeEnum;
begin
  Result := DefaultInterface.FieldValueType;
end;

procedure TNumericFieldObjectInstanceProperties.Set_FieldValueType(pVal: CrFieldValueTypeEnum);
begin
  DefaultInterface.FieldValueType := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_IsConstantField: WordBool;
begin
  Result := DefaultInterface.IsConstantField;
end;

procedure TNumericFieldObjectInstanceProperties.Set_IsConstantField(pVal: WordBool);
begin
  DefaultInterface.IsConstantField := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_IsPrintTimeField: WordBool;
begin
  Result := DefaultInterface.IsPrintTimeField;
end;

procedure TNumericFieldObjectInstanceProperties.Set_IsPrintTimeField(pVal: WordBool);
begin
  DefaultInterface.IsPrintTimeField := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TNumericFieldObjectInstanceProperties.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_FieldFormat: ISCRFieldFormat;
begin
  Result := DefaultInterface.FieldFormat;
end;

procedure TNumericFieldObjectInstanceProperties.Set_FieldFormat(const pVal: ISCRFieldFormat);
begin
  DefaultInterface.FieldFormat := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_LeftAlignFixedLeft: WordBool;
begin
  Result := DefaultInterface.LeftAlignFixedLeft;
end;

procedure TNumericFieldObjectInstanceProperties.Set_LeftAlignFixedLeft(pVal: WordBool);
begin
  DefaultInterface.LeftAlignFixedLeft := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_RightAlignFixedRight: WordBool;
begin
  Result := DefaultInterface.RightAlignFixedRight;
end;

procedure TNumericFieldObjectInstanceProperties.Set_RightAlignFixedRight(pVal: WordBool);
begin
  DefaultInterface.RightAlignFixedRight := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_AllowClipping: WordBool;
begin
  Result := DefaultInterface.AllowClipping;
end;

procedure TNumericFieldObjectInstanceProperties.Set_AllowClipping(pVal: WordBool);
begin
  DefaultInterface.AllowClipping := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_FieldStrings: ISCRStrings;
begin
  Result := DefaultInterface.FieldStrings;
end;

procedure TNumericFieldObjectInstanceProperties.Set_FieldStrings(const pVal: ISCRStrings);
begin
  DefaultInterface.FieldStrings := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_FieldHasRawValue: WordBool;
begin
  Result := DefaultInterface.FieldHasRawValue;
end;

procedure TNumericFieldObjectInstanceProperties.Set_FieldHasRawValue(pVal: WordBool);
begin
  DefaultInterface.FieldHasRawValue := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_RawData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.RawData;
end;

procedure TNumericFieldObjectInstanceProperties.Set_RawData(pVal: OleVariant);
begin
  DefaultInterface.RawData := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_FixedLeft: WideString;
begin
  Result := DefaultInterface.FixedLeft;
end;

procedure TNumericFieldObjectInstanceProperties.Set_FixedLeft(const pVal: WideString);
  { Warning: The property FixedLeft has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedLeft := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_FixedLeftReserve: WideString;
begin
  Result := DefaultInterface.FixedLeftReserve;
end;

procedure TNumericFieldObjectInstanceProperties.Set_FixedLeftReserve(const pVal: WideString);
  { Warning: The property FixedLeftReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedLeftReserve := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_FixedRight: WideString;
begin
  Result := DefaultInterface.FixedRight;
end;

procedure TNumericFieldObjectInstanceProperties.Set_FixedRight(const pVal: WideString);
  { Warning: The property FixedRight has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedRight := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_FixedRightReserve: WideString;
begin
  Result := DefaultInterface.FixedRightReserve;
end;

procedure TNumericFieldObjectInstanceProperties.Set_FixedRightReserve(const pVal: WideString);
  { Warning: The property FixedRightReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedRightReserve := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_LeftFill: WideString;
begin
  Result := DefaultInterface.LeftFill;
end;

procedure TNumericFieldObjectInstanceProperties.Set_LeftFill(const pVal: WideString);
  { Warning: The property LeftFill has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LeftFill := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_RightFill: WideString;
begin
  Result := DefaultInterface.RightFill;
end;

procedure TNumericFieldObjectInstanceProperties.Set_RightFill(const pVal: WideString);
  { Warning: The property RightFill has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RightFill := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_Prefix: WideString;
begin
  Result := DefaultInterface.Prefix;
end;

procedure TNumericFieldObjectInstanceProperties.Set_Prefix(const pVal: WideString);
  { Warning: The property Prefix has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Prefix := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_PrefixReserve: WideString;
begin
  Result := DefaultInterface.PrefixReserve;
end;

procedure TNumericFieldObjectInstanceProperties.Set_PrefixReserve(const pVal: WideString);
  { Warning: The property PrefixReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrefixReserve := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_Suffix: WideString;
begin
  Result := DefaultInterface.Suffix;
end;

procedure TNumericFieldObjectInstanceProperties.Set_Suffix(const pVal: WideString);
  { Warning: The property Suffix has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Suffix := pVal;
end;

function  TNumericFieldObjectInstanceProperties.Get_SuffixReserve: WideString;
begin
  Result := DefaultInterface.SuffixReserve;
end;

procedure TNumericFieldObjectInstanceProperties.Set_SuffixReserve(const pVal: WideString);
  { Warning: The property SuffixReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SuffixReserve := pVal;
end;

{$ENDIF}

class function CoFieldObjectInstanceInGrid.Create: ISCRFieldObjectInstanceInGrid;
begin
  Result := CreateComObject(CLASS_FieldObjectInstanceInGrid) as ISCRFieldObjectInstanceInGrid;
end;

class function CoFieldObjectInstanceInGrid.CreateRemote(const MachineName: string): ISCRFieldObjectInstanceInGrid;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FieldObjectInstanceInGrid) as ISCRFieldObjectInstanceInGrid;
end;

procedure TFieldObjectInstanceInGrid.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{78A01793-3F6C-43F3-A77F-A9C1B0856C48}';
    IntfIID:   '{AE0374FB-EF49-4A6B-80C0-1DBD14D41E0D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFieldObjectInstanceInGrid.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRFieldObjectInstanceInGrid;
  end;
end;

procedure TFieldObjectInstanceInGrid.ConnectTo(svrIntf: ISCRFieldObjectInstanceInGrid);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFieldObjectInstanceInGrid.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFieldObjectInstanceInGrid.GetDefaultInterface: ISCRFieldObjectInstanceInGrid;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFieldObjectInstanceInGrid.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFieldObjectInstanceInGridProperties.Create(Self);
{$ENDIF}
end;

destructor TFieldObjectInstanceInGrid.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFieldObjectInstanceInGrid.GetServerProperties: TFieldObjectInstanceInGridProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TFieldObjectInstanceInGrid.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TFieldObjectInstanceInGrid.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TFieldObjectInstanceInGrid.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TFieldObjectInstanceInGrid.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TFieldObjectInstanceInGrid.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TFieldObjectInstanceInGrid.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TFieldObjectInstanceInGrid.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TFieldObjectInstanceInGrid.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TFieldObjectInstanceInGrid.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TFieldObjectInstanceInGrid.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TFieldObjectInstanceInGrid.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TFieldObjectInstanceInGrid.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TFieldObjectInstanceInGrid.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TFieldObjectInstanceInGrid.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TFieldObjectInstanceInGrid.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TFieldObjectInstanceInGrid.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TFieldObjectInstanceInGrid.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TFieldObjectInstanceInGrid.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TFieldObjectInstanceInGrid.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TFieldObjectInstanceInGrid.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TFieldObjectInstanceInGrid.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TFieldObjectInstanceInGrid.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TFieldObjectInstanceInGrid.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TFieldObjectInstanceInGrid.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TFieldObjectInstanceInGrid.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TFieldObjectInstanceInGrid.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TFieldObjectInstanceInGrid.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TFieldObjectInstanceInGrid.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_FieldType: CrRuntimeFieldKindEnum;
begin
  Result := DefaultInterface.FieldType;
end;

procedure TFieldObjectInstanceInGrid.Set_FieldType(pVal: CrRuntimeFieldKindEnum);
begin
  DefaultInterface.FieldType := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_FieldValueType: CrFieldValueTypeEnum;
begin
  Result := DefaultInterface.FieldValueType;
end;

procedure TFieldObjectInstanceInGrid.Set_FieldValueType(pVal: CrFieldValueTypeEnum);
begin
  DefaultInterface.FieldValueType := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_IsConstantField: WordBool;
begin
  Result := DefaultInterface.IsConstantField;
end;

procedure TFieldObjectInstanceInGrid.Set_IsConstantField(pVal: WordBool);
begin
  DefaultInterface.IsConstantField := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_IsPrintTimeField: WordBool;
begin
  Result := DefaultInterface.IsPrintTimeField;
end;

procedure TFieldObjectInstanceInGrid.Set_IsPrintTimeField(pVal: WordBool);
begin
  DefaultInterface.IsPrintTimeField := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TFieldObjectInstanceInGrid.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_FieldFormat: ISCRFieldFormat;
begin
  Result := DefaultInterface.FieldFormat;
end;

procedure TFieldObjectInstanceInGrid.Set_FieldFormat(const pVal: ISCRFieldFormat);
begin
  DefaultInterface.FieldFormat := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_LeftAlignFixedLeft: WordBool;
begin
  Result := DefaultInterface.LeftAlignFixedLeft;
end;

procedure TFieldObjectInstanceInGrid.Set_LeftAlignFixedLeft(pVal: WordBool);
begin
  DefaultInterface.LeftAlignFixedLeft := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_RightAlignFixedRight: WordBool;
begin
  Result := DefaultInterface.RightAlignFixedRight;
end;

procedure TFieldObjectInstanceInGrid.Set_RightAlignFixedRight(pVal: WordBool);
begin
  DefaultInterface.RightAlignFixedRight := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_AllowClipping: WordBool;
begin
  Result := DefaultInterface.AllowClipping;
end;

procedure TFieldObjectInstanceInGrid.Set_AllowClipping(pVal: WordBool);
begin
  DefaultInterface.AllowClipping := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_FieldStrings: ISCRStrings;
begin
  Result := DefaultInterface.FieldStrings;
end;

procedure TFieldObjectInstanceInGrid.Set_FieldStrings(const pVal: ISCRStrings);
begin
  DefaultInterface.FieldStrings := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_FieldHasRawValue: WordBool;
begin
  Result := DefaultInterface.FieldHasRawValue;
end;

procedure TFieldObjectInstanceInGrid.Set_FieldHasRawValue(pVal: WordBool);
begin
  DefaultInterface.FieldHasRawValue := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_RawData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.RawData;
end;

procedure TFieldObjectInstanceInGrid.Set_RawData(pVal: OleVariant);
begin
  DefaultInterface.RawData := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_RowNumber: Integer;
begin
  Result := DefaultInterface.RowNumber;
end;

procedure TFieldObjectInstanceInGrid.Set_RowNumber(pVal: Integer);
begin
  DefaultInterface.RowNumber := pVal;
end;

function  TFieldObjectInstanceInGrid.Get_ColumnNumber: Integer;
begin
  Result := DefaultInterface.ColumnNumber;
end;

procedure TFieldObjectInstanceInGrid.Set_ColumnNumber(pVal: Integer);
begin
  DefaultInterface.ColumnNumber := pVal;
end;

function  TFieldObjectInstanceInGrid.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TFieldObjectInstanceInGrid.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                            DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TFieldObjectInstanceInGrid.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TFieldObjectInstanceInGrid.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TFieldObjectInstanceInGrid.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TFieldObjectInstanceInGrid.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                          out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TFieldObjectInstanceInGrid.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TFieldObjectInstanceInGrid.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TFieldObjectInstanceInGrid.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFieldObjectInstanceInGridProperties.Create(AServer: TFieldObjectInstanceInGrid);
begin
  inherited Create;
  FServer := AServer;
end;

function TFieldObjectInstanceInGridProperties.GetDefaultInterface: ISCRFieldObjectInstanceInGrid;
begin
  Result := FServer.DefaultInterface;
end;

function  TFieldObjectInstanceInGridProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TFieldObjectInstanceInGridProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TFieldObjectInstanceInGridProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TFieldObjectInstanceInGridProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TFieldObjectInstanceInGridProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TFieldObjectInstanceInGridProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TFieldObjectInstanceInGridProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TFieldObjectInstanceInGridProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TFieldObjectInstanceInGridProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TFieldObjectInstanceInGridProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TFieldObjectInstanceInGridProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TFieldObjectInstanceInGridProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TFieldObjectInstanceInGridProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TFieldObjectInstanceInGridProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TFieldObjectInstanceInGridProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TFieldObjectInstanceInGridProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TFieldObjectInstanceInGridProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TFieldObjectInstanceInGridProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TFieldObjectInstanceInGridProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TFieldObjectInstanceInGridProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TFieldObjectInstanceInGridProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TFieldObjectInstanceInGridProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TFieldObjectInstanceInGridProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TFieldObjectInstanceInGridProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TFieldObjectInstanceInGridProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TFieldObjectInstanceInGridProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TFieldObjectInstanceInGridProperties.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TFieldObjectInstanceInGridProperties.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_FieldType: CrRuntimeFieldKindEnum;
begin
  Result := DefaultInterface.FieldType;
end;

procedure TFieldObjectInstanceInGridProperties.Set_FieldType(pVal: CrRuntimeFieldKindEnum);
begin
  DefaultInterface.FieldType := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_FieldValueType: CrFieldValueTypeEnum;
begin
  Result := DefaultInterface.FieldValueType;
end;

procedure TFieldObjectInstanceInGridProperties.Set_FieldValueType(pVal: CrFieldValueTypeEnum);
begin
  DefaultInterface.FieldValueType := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_IsConstantField: WordBool;
begin
  Result := DefaultInterface.IsConstantField;
end;

procedure TFieldObjectInstanceInGridProperties.Set_IsConstantField(pVal: WordBool);
begin
  DefaultInterface.IsConstantField := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_IsPrintTimeField: WordBool;
begin
  Result := DefaultInterface.IsPrintTimeField;
end;

procedure TFieldObjectInstanceInGridProperties.Set_IsPrintTimeField(pVal: WordBool);
begin
  DefaultInterface.IsPrintTimeField := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TFieldObjectInstanceInGridProperties.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_FieldFormat: ISCRFieldFormat;
begin
  Result := DefaultInterface.FieldFormat;
end;

procedure TFieldObjectInstanceInGridProperties.Set_FieldFormat(const pVal: ISCRFieldFormat);
begin
  DefaultInterface.FieldFormat := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_LeftAlignFixedLeft: WordBool;
begin
  Result := DefaultInterface.LeftAlignFixedLeft;
end;

procedure TFieldObjectInstanceInGridProperties.Set_LeftAlignFixedLeft(pVal: WordBool);
begin
  DefaultInterface.LeftAlignFixedLeft := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_RightAlignFixedRight: WordBool;
begin
  Result := DefaultInterface.RightAlignFixedRight;
end;

procedure TFieldObjectInstanceInGridProperties.Set_RightAlignFixedRight(pVal: WordBool);
begin
  DefaultInterface.RightAlignFixedRight := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_AllowClipping: WordBool;
begin
  Result := DefaultInterface.AllowClipping;
end;

procedure TFieldObjectInstanceInGridProperties.Set_AllowClipping(pVal: WordBool);
begin
  DefaultInterface.AllowClipping := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_FieldStrings: ISCRStrings;
begin
  Result := DefaultInterface.FieldStrings;
end;

procedure TFieldObjectInstanceInGridProperties.Set_FieldStrings(const pVal: ISCRStrings);
begin
  DefaultInterface.FieldStrings := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_FieldHasRawValue: WordBool;
begin
  Result := DefaultInterface.FieldHasRawValue;
end;

procedure TFieldObjectInstanceInGridProperties.Set_FieldHasRawValue(pVal: WordBool);
begin
  DefaultInterface.FieldHasRawValue := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_RawData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.RawData;
end;

procedure TFieldObjectInstanceInGridProperties.Set_RawData(pVal: OleVariant);
begin
  DefaultInterface.RawData := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_RowNumber: Integer;
begin
  Result := DefaultInterface.RowNumber;
end;

procedure TFieldObjectInstanceInGridProperties.Set_RowNumber(pVal: Integer);
begin
  DefaultInterface.RowNumber := pVal;
end;

function  TFieldObjectInstanceInGridProperties.Get_ColumnNumber: Integer;
begin
  Result := DefaultInterface.ColumnNumber;
end;

procedure TFieldObjectInstanceInGridProperties.Set_ColumnNumber(pVal: Integer);
begin
  DefaultInterface.ColumnNumber := pVal;
end;

{$ENDIF}

class function CoNumericFieldObjectInstanceInGrid.Create: ISCRNumericFieldObjectInstanceInGrid;
begin
  Result := CreateComObject(CLASS_NumericFieldObjectInstanceInGrid) as ISCRNumericFieldObjectInstanceInGrid;
end;

class function CoNumericFieldObjectInstanceInGrid.CreateRemote(const MachineName: string): ISCRNumericFieldObjectInstanceInGrid;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NumericFieldObjectInstanceInGrid) as ISCRNumericFieldObjectInstanceInGrid;
end;

procedure TNumericFieldObjectInstanceInGrid.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7244DF35-D354-46FF-B60D-EB7C3F6C89AC}';
    IntfIID:   '{5392C302-4DD3-4A7E-B246-9B91AE37CB36}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNumericFieldObjectInstanceInGrid.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRNumericFieldObjectInstanceInGrid;
  end;
end;

procedure TNumericFieldObjectInstanceInGrid.ConnectTo(svrIntf: ISCRNumericFieldObjectInstanceInGrid);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNumericFieldObjectInstanceInGrid.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNumericFieldObjectInstanceInGrid.GetDefaultInterface: ISCRNumericFieldObjectInstanceInGrid;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNumericFieldObjectInstanceInGrid.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNumericFieldObjectInstanceInGridProperties.Create(Self);
{$ENDIF}
end;

destructor TNumericFieldObjectInstanceInGrid.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNumericFieldObjectInstanceInGrid.GetServerProperties: TNumericFieldObjectInstanceInGridProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TNumericFieldObjectInstanceInGrid.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TNumericFieldObjectInstanceInGrid.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TNumericFieldObjectInstanceInGrid.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_FieldType: CrRuntimeFieldKindEnum;
begin
  Result := DefaultInterface.FieldType;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_FieldType(pVal: CrRuntimeFieldKindEnum);
begin
  DefaultInterface.FieldType := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_FieldValueType: CrFieldValueTypeEnum;
begin
  Result := DefaultInterface.FieldValueType;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_FieldValueType(pVal: CrFieldValueTypeEnum);
begin
  DefaultInterface.FieldValueType := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_IsConstantField: WordBool;
begin
  Result := DefaultInterface.IsConstantField;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_IsConstantField(pVal: WordBool);
begin
  DefaultInterface.IsConstantField := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_IsPrintTimeField: WordBool;
begin
  Result := DefaultInterface.IsPrintTimeField;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_IsPrintTimeField(pVal: WordBool);
begin
  DefaultInterface.IsPrintTimeField := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_FieldFormat: ISCRFieldFormat;
begin
  Result := DefaultInterface.FieldFormat;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_FieldFormat(const pVal: ISCRFieldFormat);
begin
  DefaultInterface.FieldFormat := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_LeftAlignFixedLeft: WordBool;
begin
  Result := DefaultInterface.LeftAlignFixedLeft;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_LeftAlignFixedLeft(pVal: WordBool);
begin
  DefaultInterface.LeftAlignFixedLeft := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_RightAlignFixedRight: WordBool;
begin
  Result := DefaultInterface.RightAlignFixedRight;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_RightAlignFixedRight(pVal: WordBool);
begin
  DefaultInterface.RightAlignFixedRight := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_AllowClipping: WordBool;
begin
  Result := DefaultInterface.AllowClipping;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_AllowClipping(pVal: WordBool);
begin
  DefaultInterface.AllowClipping := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_FieldStrings: ISCRStrings;
begin
  Result := DefaultInterface.FieldStrings;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_FieldStrings(const pVal: ISCRStrings);
begin
  DefaultInterface.FieldStrings := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_FieldHasRawValue: WordBool;
begin
  Result := DefaultInterface.FieldHasRawValue;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_FieldHasRawValue(pVal: WordBool);
begin
  DefaultInterface.FieldHasRawValue := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_RawData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.RawData;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_RawData(pVal: OleVariant);
begin
  DefaultInterface.RawData := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_FixedLeft: WideString;
begin
  Result := DefaultInterface.FixedLeft;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_FixedLeft(const pVal: WideString);
  { Warning: The property FixedLeft has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedLeft := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_FixedLeftReserve: WideString;
begin
  Result := DefaultInterface.FixedLeftReserve;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_FixedLeftReserve(const pVal: WideString);
  { Warning: The property FixedLeftReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedLeftReserve := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_FixedRight: WideString;
begin
  Result := DefaultInterface.FixedRight;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_FixedRight(const pVal: WideString);
  { Warning: The property FixedRight has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedRight := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_FixedRightReserve: WideString;
begin
  Result := DefaultInterface.FixedRightReserve;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_FixedRightReserve(const pVal: WideString);
  { Warning: The property FixedRightReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedRightReserve := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_LeftFill: WideString;
begin
  Result := DefaultInterface.LeftFill;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_LeftFill(const pVal: WideString);
  { Warning: The property LeftFill has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LeftFill := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_RightFill: WideString;
begin
  Result := DefaultInterface.RightFill;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_RightFill(const pVal: WideString);
  { Warning: The property RightFill has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RightFill := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_Prefix: WideString;
begin
  Result := DefaultInterface.Prefix;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_Prefix(const pVal: WideString);
  { Warning: The property Prefix has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Prefix := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_PrefixReserve: WideString;
begin
  Result := DefaultInterface.PrefixReserve;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_PrefixReserve(const pVal: WideString);
  { Warning: The property PrefixReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrefixReserve := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_Suffix: WideString;
begin
  Result := DefaultInterface.Suffix;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_Suffix(const pVal: WideString);
  { Warning: The property Suffix has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Suffix := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_SuffixReserve: WideString;
begin
  Result := DefaultInterface.SuffixReserve;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_SuffixReserve(const pVal: WideString);
  { Warning: The property SuffixReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SuffixReserve := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_RowNumber: Integer;
begin
  Result := DefaultInterface.RowNumber;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_RowNumber(pVal: Integer);
begin
  DefaultInterface.RowNumber := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Get_ColumnNumber: Integer;
begin
  Result := DefaultInterface.ColumnNumber;
end;

procedure TNumericFieldObjectInstanceInGrid.Set_ColumnNumber(pVal: Integer);
begin
  DefaultInterface.ColumnNumber := pVal;
end;

function  TNumericFieldObjectInstanceInGrid.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TNumericFieldObjectInstanceInGrid.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                                   DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TNumericFieldObjectInstanceInGrid.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TNumericFieldObjectInstanceInGrid.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TNumericFieldObjectInstanceInGrid.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TNumericFieldObjectInstanceInGrid.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                                 out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TNumericFieldObjectInstanceInGrid.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TNumericFieldObjectInstanceInGrid.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TNumericFieldObjectInstanceInGrid.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNumericFieldObjectInstanceInGridProperties.Create(AServer: TNumericFieldObjectInstanceInGrid);
begin
  inherited Create;
  FServer := AServer;
end;

function TNumericFieldObjectInstanceInGridProperties.GetDefaultInterface: ISCRNumericFieldObjectInstanceInGrid;
begin
  Result := FServer.DefaultInterface;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_FieldType: CrRuntimeFieldKindEnum;
begin
  Result := DefaultInterface.FieldType;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_FieldType(pVal: CrRuntimeFieldKindEnum);
begin
  DefaultInterface.FieldType := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_FieldValueType: CrFieldValueTypeEnum;
begin
  Result := DefaultInterface.FieldValueType;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_FieldValueType(pVal: CrFieldValueTypeEnum);
begin
  DefaultInterface.FieldValueType := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_IsConstantField: WordBool;
begin
  Result := DefaultInterface.IsConstantField;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_IsConstantField(pVal: WordBool);
begin
  DefaultInterface.IsConstantField := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_IsPrintTimeField: WordBool;
begin
  Result := DefaultInterface.IsPrintTimeField;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_IsPrintTimeField(pVal: WordBool);
begin
  DefaultInterface.IsPrintTimeField := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_FieldFormat: ISCRFieldFormat;
begin
  Result := DefaultInterface.FieldFormat;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_FieldFormat(const pVal: ISCRFieldFormat);
begin
  DefaultInterface.FieldFormat := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_LeftAlignFixedLeft: WordBool;
begin
  Result := DefaultInterface.LeftAlignFixedLeft;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_LeftAlignFixedLeft(pVal: WordBool);
begin
  DefaultInterface.LeftAlignFixedLeft := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_RightAlignFixedRight: WordBool;
begin
  Result := DefaultInterface.RightAlignFixedRight;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_RightAlignFixedRight(pVal: WordBool);
begin
  DefaultInterface.RightAlignFixedRight := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_AllowClipping: WordBool;
begin
  Result := DefaultInterface.AllowClipping;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_AllowClipping(pVal: WordBool);
begin
  DefaultInterface.AllowClipping := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_FieldStrings: ISCRStrings;
begin
  Result := DefaultInterface.FieldStrings;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_FieldStrings(const pVal: ISCRStrings);
begin
  DefaultInterface.FieldStrings := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_FieldHasRawValue: WordBool;
begin
  Result := DefaultInterface.FieldHasRawValue;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_FieldHasRawValue(pVal: WordBool);
begin
  DefaultInterface.FieldHasRawValue := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_RawData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.RawData;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_RawData(pVal: OleVariant);
begin
  DefaultInterface.RawData := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_FixedLeft: WideString;
begin
  Result := DefaultInterface.FixedLeft;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_FixedLeft(const pVal: WideString);
  { Warning: The property FixedLeft has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedLeft := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_FixedLeftReserve: WideString;
begin
  Result := DefaultInterface.FixedLeftReserve;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_FixedLeftReserve(const pVal: WideString);
  { Warning: The property FixedLeftReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedLeftReserve := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_FixedRight: WideString;
begin
  Result := DefaultInterface.FixedRight;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_FixedRight(const pVal: WideString);
  { Warning: The property FixedRight has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedRight := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_FixedRightReserve: WideString;
begin
  Result := DefaultInterface.FixedRightReserve;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_FixedRightReserve(const pVal: WideString);
  { Warning: The property FixedRightReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FixedRightReserve := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_LeftFill: WideString;
begin
  Result := DefaultInterface.LeftFill;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_LeftFill(const pVal: WideString);
  { Warning: The property LeftFill has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LeftFill := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_RightFill: WideString;
begin
  Result := DefaultInterface.RightFill;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_RightFill(const pVal: WideString);
  { Warning: The property RightFill has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RightFill := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_Prefix: WideString;
begin
  Result := DefaultInterface.Prefix;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_Prefix(const pVal: WideString);
  { Warning: The property Prefix has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Prefix := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_PrefixReserve: WideString;
begin
  Result := DefaultInterface.PrefixReserve;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_PrefixReserve(const pVal: WideString);
  { Warning: The property PrefixReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrefixReserve := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_Suffix: WideString;
begin
  Result := DefaultInterface.Suffix;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_Suffix(const pVal: WideString);
  { Warning: The property Suffix has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Suffix := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_SuffixReserve: WideString;
begin
  Result := DefaultInterface.SuffixReserve;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_SuffixReserve(const pVal: WideString);
  { Warning: The property SuffixReserve has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SuffixReserve := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_RowNumber: Integer;
begin
  Result := DefaultInterface.RowNumber;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_RowNumber(pVal: Integer);
begin
  DefaultInterface.RowNumber := pVal;
end;

function  TNumericFieldObjectInstanceInGridProperties.Get_ColumnNumber: Integer;
begin
  Result := DefaultInterface.ColumnNumber;
end;

procedure TNumericFieldObjectInstanceInGridProperties.Set_ColumnNumber(pVal: Integer);
begin
  DefaultInterface.ColumnNumber := pVal;
end;

{$ENDIF}

class function CoTextObjectInstanceInGrid.Create: ISCRTextObjectInstanceInGrid;
begin
  Result := CreateComObject(CLASS_TextObjectInstanceInGrid) as ISCRTextObjectInstanceInGrid;
end;

class function CoTextObjectInstanceInGrid.CreateRemote(const MachineName: string): ISCRTextObjectInstanceInGrid;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TextObjectInstanceInGrid) as ISCRTextObjectInstanceInGrid;
end;

procedure TTextObjectInstanceInGrid.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{28CCFA56-2441-4BE7-A637-97A4E54A11D9}';
    IntfIID:   '{B6A8A12D-F811-4BEA-8DEE-8BFEA6236AEE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTextObjectInstanceInGrid.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRTextObjectInstanceInGrid;
  end;
end;

procedure TTextObjectInstanceInGrid.ConnectTo(svrIntf: ISCRTextObjectInstanceInGrid);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTextObjectInstanceInGrid.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTextObjectInstanceInGrid.GetDefaultInterface: ISCRTextObjectInstanceInGrid;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTextObjectInstanceInGrid.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTextObjectInstanceInGridProperties.Create(Self);
{$ENDIF}
end;

destructor TTextObjectInstanceInGrid.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTextObjectInstanceInGrid.GetServerProperties: TTextObjectInstanceInGridProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TTextObjectInstanceInGrid.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TTextObjectInstanceInGrid.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TTextObjectInstanceInGrid.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TTextObjectInstanceInGrid.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TTextObjectInstanceInGrid.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TTextObjectInstanceInGrid.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TTextObjectInstanceInGrid.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TTextObjectInstanceInGrid.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TTextObjectInstanceInGrid.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TTextObjectInstanceInGrid.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TTextObjectInstanceInGrid.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TTextObjectInstanceInGrid.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TTextObjectInstanceInGrid.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TTextObjectInstanceInGrid.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TTextObjectInstanceInGrid.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TTextObjectInstanceInGrid.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TTextObjectInstanceInGrid.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TTextObjectInstanceInGrid.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TTextObjectInstanceInGrid.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TTextObjectInstanceInGrid.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TTextObjectInstanceInGrid.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TTextObjectInstanceInGrid.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TTextObjectInstanceInGrid.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TTextObjectInstanceInGrid.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TTextObjectInstanceInGrid.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TTextObjectInstanceInGrid.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TTextObjectInstanceInGrid.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TTextObjectInstanceInGrid.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TTextObjectInstanceInGrid.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TTextObjectInstanceInGrid.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TTextObjectInstanceInGrid.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TTextObjectInstanceInGrid.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TTextObjectInstanceInGrid.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TTextObjectInstanceInGrid.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TTextObjectInstanceInGrid.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TTextObjectInstanceInGrid.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TTextObjectInstanceInGrid.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TTextObjectInstanceInGrid.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TTextObjectInstanceInGrid.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TTextObjectInstanceInGrid.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TTextObjectInstanceInGrid.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TTextObjectInstanceInGrid.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TTextObjectInstanceInGrid.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TTextObjectInstanceInGrid.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TTextObjectInstanceInGrid.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TTextObjectInstanceInGrid.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TTextObjectInstanceInGrid.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TTextObjectInstanceInGrid.Get_StartLineNumber: Integer;
begin
  Result := DefaultInterface.StartLineNumber;
end;

procedure TTextObjectInstanceInGrid.Set_StartLineNumber(pVal: Integer);
begin
  DefaultInterface.StartLineNumber := pVal;
end;

function  TTextObjectInstanceInGrid.Get_EndLineNumber: Integer;
begin
  Result := DefaultInterface.EndLineNumber;
end;

procedure TTextObjectInstanceInGrid.Set_EndLineNumber(pVal: Integer);
begin
  DefaultInterface.EndLineNumber := pVal;
end;

function  TTextObjectInstanceInGrid.Get_VerticalStartOffset: Integer;
begin
  Result := DefaultInterface.VerticalStartOffset;
end;

procedure TTextObjectInstanceInGrid.Set_VerticalStartOffset(pVal: Integer);
begin
  DefaultInterface.VerticalStartOffset := pVal;
end;

function  TTextObjectInstanceInGrid.Get_Paragraphs: ISCRRuntimeParagraphs;
begin
  Result := DefaultInterface.Paragraphs;
end;

procedure TTextObjectInstanceInGrid.Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
begin
  DefaultInterface.Paragraphs := pVal;
end;

function  TTextObjectInstanceInGrid.Get_RowNumber: Integer;
begin
  Result := DefaultInterface.RowNumber;
end;

procedure TTextObjectInstanceInGrid.Set_RowNumber(pVal: Integer);
begin
  DefaultInterface.RowNumber := pVal;
end;

function  TTextObjectInstanceInGrid.Get_ColumnNumber: Integer;
begin
  Result := DefaultInterface.ColumnNumber;
end;

procedure TTextObjectInstanceInGrid.Set_ColumnNumber(pVal: Integer);
begin
  DefaultInterface.ColumnNumber := pVal;
end;

function  TTextObjectInstanceInGrid.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TTextObjectInstanceInGrid.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                           DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TTextObjectInstanceInGrid.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TTextObjectInstanceInGrid.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TTextObjectInstanceInGrid.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TTextObjectInstanceInGrid.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                         out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TTextObjectInstanceInGrid.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TTextObjectInstanceInGrid.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TTextObjectInstanceInGrid.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

procedure TTextObjectInstanceInGrid.SetUpDefaultObject(const bstrText: WideString);
begin
  DefaultInterface.SetUpDefaultObject(bstrText);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTextObjectInstanceInGridProperties.Create(AServer: TTextObjectInstanceInGrid);
begin
  inherited Create;
  FServer := AServer;
end;

function TTextObjectInstanceInGridProperties.GetDefaultInterface: ISCRTextObjectInstanceInGrid;
begin
  Result := FServer.DefaultInterface;
end;

function  TTextObjectInstanceInGridProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TTextObjectInstanceInGridProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TTextObjectInstanceInGridProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TTextObjectInstanceInGridProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TTextObjectInstanceInGridProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TTextObjectInstanceInGridProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TTextObjectInstanceInGridProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TTextObjectInstanceInGridProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TTextObjectInstanceInGridProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TTextObjectInstanceInGridProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TTextObjectInstanceInGridProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TTextObjectInstanceInGridProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TTextObjectInstanceInGridProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TTextObjectInstanceInGridProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TTextObjectInstanceInGridProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TTextObjectInstanceInGridProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TTextObjectInstanceInGridProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TTextObjectInstanceInGridProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TTextObjectInstanceInGridProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TTextObjectInstanceInGridProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TTextObjectInstanceInGridProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TTextObjectInstanceInGridProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TTextObjectInstanceInGridProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TTextObjectInstanceInGridProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TTextObjectInstanceInGridProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TTextObjectInstanceInGridProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TTextObjectInstanceInGridProperties.Get_StartLineNumber: Integer;
begin
  Result := DefaultInterface.StartLineNumber;
end;

procedure TTextObjectInstanceInGridProperties.Set_StartLineNumber(pVal: Integer);
begin
  DefaultInterface.StartLineNumber := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_EndLineNumber: Integer;
begin
  Result := DefaultInterface.EndLineNumber;
end;

procedure TTextObjectInstanceInGridProperties.Set_EndLineNumber(pVal: Integer);
begin
  DefaultInterface.EndLineNumber := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_VerticalStartOffset: Integer;
begin
  Result := DefaultInterface.VerticalStartOffset;
end;

procedure TTextObjectInstanceInGridProperties.Set_VerticalStartOffset(pVal: Integer);
begin
  DefaultInterface.VerticalStartOffset := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_Paragraphs: ISCRRuntimeParagraphs;
begin
  Result := DefaultInterface.Paragraphs;
end;

procedure TTextObjectInstanceInGridProperties.Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
begin
  DefaultInterface.Paragraphs := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_RowNumber: Integer;
begin
  Result := DefaultInterface.RowNumber;
end;

procedure TTextObjectInstanceInGridProperties.Set_RowNumber(pVal: Integer);
begin
  DefaultInterface.RowNumber := pVal;
end;

function  TTextObjectInstanceInGridProperties.Get_ColumnNumber: Integer;
begin
  Result := DefaultInterface.ColumnNumber;
end;

procedure TTextObjectInstanceInGridProperties.Set_ColumnNumber(pVal: Integer);
begin
  DefaultInterface.ColumnNumber := pVal;
end;

{$ENDIF}

class function CoRuntimeParagraph.Create: ISCRRuntimeParagraph;
begin
  Result := CreateComObject(CLASS_RuntimeParagraph) as ISCRRuntimeParagraph;
end;

class function CoRuntimeParagraph.CreateRemote(const MachineName: string): ISCRRuntimeParagraph;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuntimeParagraph) as ISCRRuntimeParagraph;
end;

procedure TRuntimeParagraph.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FFD74733-D093-40E5-895F-4B0BAEFC4D47}';
    IntfIID:   '{55F4FF93-FF32-4FD5-8D1E-54ED4173E36C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRuntimeParagraph.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRRuntimeParagraph;
  end;
end;

procedure TRuntimeParagraph.ConnectTo(svrIntf: ISCRRuntimeParagraph);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRuntimeParagraph.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRuntimeParagraph.GetDefaultInterface: ISCRRuntimeParagraph;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRuntimeParagraph.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuntimeParagraphProperties.Create(Self);
{$ENDIF}
end;

destructor TRuntimeParagraph.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRuntimeParagraph.GetServerProperties: TRuntimeParagraphProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TRuntimeParagraph.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeParagraph.Get_IndentAndSpacingFormat: ISCRIndentAndSpacingFormat;
begin
  Result := DefaultInterface.IndentAndSpacingFormat;
end;

procedure TRuntimeParagraph.Set_IndentAndSpacingFormat(const pVal: ISCRIndentAndSpacingFormat);
begin
  DefaultInterface.IndentAndSpacingFormat := pVal;
end;

function  TRuntimeParagraph.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TRuntimeParagraph.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TRuntimeParagraph.Get_TextLines: ISCRTextLines;
begin
  Result := DefaultInterface.TextLines;
end;

procedure TRuntimeParagraph.Set_TextLines(const pVal: ISCRTextLines);
begin
  DefaultInterface.TextLines := pVal;
end;

function  TRuntimeParagraph.Get_TabStops: ISCRTabStops;
begin
  Result := DefaultInterface.TabStops;
end;

procedure TRuntimeParagraph.Set_TabStops(const pVal: ISCRTabStops);
begin
  DefaultInterface.TabStops := pVal;
end;

function  TRuntimeParagraph.Get_RightToLeftReading: WordBool;
begin
  Result := DefaultInterface.RightToLeftReading;
end;

procedure TRuntimeParagraph.Set_RightToLeftReading(pVal: WordBool);
begin
  DefaultInterface.RightToLeftReading := pVal;
end;

function  TRuntimeParagraph.Clone(DeepClone: WordBool): ISCRRuntimeParagraph;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TRuntimeParagraph.CopyTo(const RuntimeParagraph: ISCRRuntimeParagraph; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(RuntimeParagraph, DeepCopy);
end;

function  TRuntimeParagraph.Equals(const RuntimeParagraph: ISCRRuntimeParagraph): WordBool;
begin
  Result := DefaultInterface.Equals(RuntimeParagraph);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuntimeParagraphProperties.Create(AServer: TRuntimeParagraph);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuntimeParagraphProperties.GetDefaultInterface: ISCRRuntimeParagraph;
begin
  Result := FServer.DefaultInterface;
end;

function  TRuntimeParagraphProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeParagraphProperties.Get_IndentAndSpacingFormat: ISCRIndentAndSpacingFormat;
begin
  Result := DefaultInterface.IndentAndSpacingFormat;
end;

procedure TRuntimeParagraphProperties.Set_IndentAndSpacingFormat(const pVal: ISCRIndentAndSpacingFormat);
begin
  DefaultInterface.IndentAndSpacingFormat := pVal;
end;

function  TRuntimeParagraphProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TRuntimeParagraphProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TRuntimeParagraphProperties.Get_TextLines: ISCRTextLines;
begin
  Result := DefaultInterface.TextLines;
end;

procedure TRuntimeParagraphProperties.Set_TextLines(const pVal: ISCRTextLines);
begin
  DefaultInterface.TextLines := pVal;
end;

function  TRuntimeParagraphProperties.Get_TabStops: ISCRTabStops;
begin
  Result := DefaultInterface.TabStops;
end;

procedure TRuntimeParagraphProperties.Set_TabStops(const pVal: ISCRTabStops);
begin
  DefaultInterface.TabStops := pVal;
end;

function  TRuntimeParagraphProperties.Get_RightToLeftReading: WordBool;
begin
  Result := DefaultInterface.RightToLeftReading;
end;

procedure TRuntimeParagraphProperties.Set_RightToLeftReading(pVal: WordBool);
begin
  DefaultInterface.RightToLeftReading := pVal;
end;

{$ENDIF}

class function CoRuntimeParagraphs.Create: ISCRRuntimeParagraphs;
begin
  Result := CreateComObject(CLASS_RuntimeParagraphs) as ISCRRuntimeParagraphs;
end;

class function CoRuntimeParagraphs.CreateRemote(const MachineName: string): ISCRRuntimeParagraphs;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuntimeParagraphs) as ISCRRuntimeParagraphs;
end;

procedure TRuntimeParagraphs.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8BF0A3F9-B01F-4902-BDD3-AA9BA2237956}';
    IntfIID:   '{6CE91280-C132-4563-8101-E01B16267F74}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRuntimeParagraphs.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRRuntimeParagraphs;
  end;
end;

procedure TRuntimeParagraphs.ConnectTo(svrIntf: ISCRRuntimeParagraphs);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRuntimeParagraphs.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRuntimeParagraphs.GetDefaultInterface: ISCRRuntimeParagraphs;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRuntimeParagraphs.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuntimeParagraphsProperties.Create(Self);
{$ENDIF}
end;

destructor TRuntimeParagraphs.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRuntimeParagraphs.GetServerProperties: TRuntimeParagraphsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TRuntimeParagraphs.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeParagraphs.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TRuntimeParagraphs.Get_Item(Index: Integer): ISCRRuntimeParagraph;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TRuntimeParagraphs.Set_Item(Index: Integer; const ppVal: ISCRRuntimeParagraph);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TRuntimeParagraphs.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TRuntimeParagraphs.Clone(DeepClone: WordBool): ISCRRuntimeParagraphs;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TRuntimeParagraphs.CopyTo(const RuntimeParagraphs: ISCRRuntimeParagraphs; 
                                    DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(RuntimeParagraphs, DeepCopy);
end;

function  TRuntimeParagraphs.Equals(const RuntimeParagraphs: ISCRRuntimeParagraphs): WordBool;
begin
  Result := DefaultInterface.Equals(RuntimeParagraphs);
end;

procedure TRuntimeParagraphs.Add(const RuntimeParagraph: ISCRRuntimeParagraph);
begin
  DefaultInterface.Add(RuntimeParagraph);
end;

procedure TRuntimeParagraphs.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TRuntimeParagraphs.Insert(Index: Integer; const RuntimeParagraph: ISCRRuntimeParagraph);
begin
  DefaultInterface.Insert(Index, RuntimeParagraph);
end;

procedure TRuntimeParagraphs.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TRuntimeParagraphs.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TRuntimeParagraphs.FindIndexOf(const RuntimeParagraph: ISCRRuntimeParagraph): Integer;
begin
  Result := DefaultInterface.FindIndexOf(RuntimeParagraph);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuntimeParagraphsProperties.Create(AServer: TRuntimeParagraphs);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuntimeParagraphsProperties.GetDefaultInterface: ISCRRuntimeParagraphs;
begin
  Result := FServer.DefaultInterface;
end;

function  TRuntimeParagraphsProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeParagraphsProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TRuntimeParagraphsProperties.Get_Item(Index: Integer): ISCRRuntimeParagraph;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TRuntimeParagraphsProperties.Set_Item(Index: Integer; const ppVal: ISCRRuntimeParagraph);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TRuntimeParagraphsProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoTextLine.Create: ISCRTextLine;
begin
  Result := CreateComObject(CLASS_TextLine) as ISCRTextLine;
end;

class function CoTextLine.CreateRemote(const MachineName: string): ISCRTextLine;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TextLine) as ISCRTextLine;
end;

procedure TTextLine.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{60818F72-713A-4EEF-A601-F6AED5DB571D}';
    IntfIID:   '{67BE28CE-6B1F-47F9-841C-8E8086625BE5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTextLine.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRTextLine;
  end;
end;

procedure TTextLine.ConnectTo(svrIntf: ISCRTextLine);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTextLine.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTextLine.GetDefaultInterface: ISCRTextLine;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTextLine.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTextLineProperties.Create(Self);
{$ENDIF}
end;

destructor TTextLine.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTextLine.GetServerProperties: TTextLineProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TTextLine.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TTextLine.Get_ParagraphElements: ISCRRuntimeParagraphElements;
begin
  Result := DefaultInterface.ParagraphElements;
end;

procedure TTextLine.Set_ParagraphElements(const pVal: ISCRRuntimeParagraphElements);
begin
  DefaultInterface.ParagraphElements := pVal;
end;

function  TTextLine.Get_BaseLine: Integer;
begin
  Result := DefaultInterface.BaseLine;
end;

procedure TTextLine.Set_BaseLine(pVal: Integer);
begin
  DefaultInterface.BaseLine := pVal;
end;

function  TTextLine.Get_TabUnits: ISCRTabUnits;
begin
  Result := DefaultInterface.TabUnits;
end;

procedure TTextLine.Set_TabUnits(const pVal: ISCRTabUnits);
begin
  DefaultInterface.TabUnits := pVal;
end;

function  TTextLine.Clone(DeepClone: WordBool): ISCRTextLine;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TTextLine.CopyTo(const TextLine: ISCRTextLine; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(TextLine, DeepCopy);
end;

function  TTextLine.Equals(const TextLine: ISCRTextLine): WordBool;
begin
  Result := DefaultInterface.Equals(TextLine);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTextLineProperties.Create(AServer: TTextLine);
begin
  inherited Create;
  FServer := AServer;
end;

function TTextLineProperties.GetDefaultInterface: ISCRTextLine;
begin
  Result := FServer.DefaultInterface;
end;

function  TTextLineProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TTextLineProperties.Get_ParagraphElements: ISCRRuntimeParagraphElements;
begin
  Result := DefaultInterface.ParagraphElements;
end;

procedure TTextLineProperties.Set_ParagraphElements(const pVal: ISCRRuntimeParagraphElements);
begin
  DefaultInterface.ParagraphElements := pVal;
end;

function  TTextLineProperties.Get_BaseLine: Integer;
begin
  Result := DefaultInterface.BaseLine;
end;

procedure TTextLineProperties.Set_BaseLine(pVal: Integer);
begin
  DefaultInterface.BaseLine := pVal;
end;

function  TTextLineProperties.Get_TabUnits: ISCRTabUnits;
begin
  Result := DefaultInterface.TabUnits;
end;

procedure TTextLineProperties.Set_TabUnits(const pVal: ISCRTabUnits);
begin
  DefaultInterface.TabUnits := pVal;
end;

{$ENDIF}

class function CoTextLines.Create: ISCRTextLines;
begin
  Result := CreateComObject(CLASS_TextLines) as ISCRTextLines;
end;

class function CoTextLines.CreateRemote(const MachineName: string): ISCRTextLines;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TextLines) as ISCRTextLines;
end;

procedure TTextLines.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1CE7E45A-6939-4F0C-BBB9-4D07D25C905E}';
    IntfIID:   '{F647BBBE-C718-47C2-BA96-99E5B5046D27}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTextLines.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRTextLines;
  end;
end;

procedure TTextLines.ConnectTo(svrIntf: ISCRTextLines);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTextLines.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTextLines.GetDefaultInterface: ISCRTextLines;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTextLines.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTextLinesProperties.Create(Self);
{$ENDIF}
end;

destructor TTextLines.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTextLines.GetServerProperties: TTextLinesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TTextLines.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TTextLines.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TTextLines.Get_Item(Index: Integer): ISCRTextLine;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TTextLines.Set_Item(Index: Integer; const ppVal: ISCRTextLine);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TTextLines.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TTextLines.Clone(DeepClone: WordBool): ISCRTextLines;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TTextLines.CopyTo(const TextLines: ISCRTextLines; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(TextLines, DeepCopy);
end;

function  TTextLines.Equals(const TextLines: ISCRTextLines): WordBool;
begin
  Result := DefaultInterface.Equals(TextLines);
end;

procedure TTextLines.Add(const TextLine: ISCRTextLine);
begin
  DefaultInterface.Add(TextLine);
end;

procedure TTextLines.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TTextLines.Insert(Index: Integer; const TextLine: ISCRTextLine);
begin
  DefaultInterface.Insert(Index, TextLine);
end;

procedure TTextLines.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TTextLines.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TTextLines.FindIndexOf(const TextLine: ISCRTextLine): Integer;
begin
  Result := DefaultInterface.FindIndexOf(TextLine);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTextLinesProperties.Create(AServer: TTextLines);
begin
  inherited Create;
  FServer := AServer;
end;

function TTextLinesProperties.GetDefaultInterface: ISCRTextLines;
begin
  Result := FServer.DefaultInterface;
end;

function  TTextLinesProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TTextLinesProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TTextLinesProperties.Get_Item(Index: Integer): ISCRTextLine;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TTextLinesProperties.Set_Item(Index: Integer; const ppVal: ISCRTextLine);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TTextLinesProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoGroupTreeNodeID.Create: ISCRGroupTreeNodeID;
begin
  Result := CreateComObject(CLASS_GroupTreeNodeID) as ISCRGroupTreeNodeID;
end;

class function CoGroupTreeNodeID.CreateRemote(const MachineName: string): ISCRGroupTreeNodeID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GroupTreeNodeID) as ISCRGroupTreeNodeID;
end;

procedure TGroupTreeNodeID.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F5333742-B68D-4BD9-98F7-76D6D09A2934}';
    IntfIID:   '{8DC3E28A-D8C7-4A48-9443-7AD787796C6C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGroupTreeNodeID.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRGroupTreeNodeID;
  end;
end;

procedure TGroupTreeNodeID.ConnectTo(svrIntf: ISCRGroupTreeNodeID);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGroupTreeNodeID.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGroupTreeNodeID.GetDefaultInterface: ISCRGroupTreeNodeID;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGroupTreeNodeID.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGroupTreeNodeIDProperties.Create(Self);
{$ENDIF}
end;

destructor TGroupTreeNodeID.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGroupTreeNodeID.GetServerProperties: TGroupTreeNodeIDProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TGroupTreeNodeID.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGroupTreeNodeID.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TGroupTreeNodeID.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TGroupTreeNodeID.Get_GroupLevel: LongWord;
begin
  Result := DefaultInterface.GroupLevel;
end;

procedure TGroupTreeNodeID.Set_GroupLevel(pVal: LongWord);
begin
  DefaultInterface.GroupLevel := pVal;
end;

function  TGroupTreeNodeID.Get_GroupPath: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.GroupPath;
end;

procedure TGroupTreeNodeID.Set_GroupPath(pVal: OleVariant);
begin
  DefaultInterface.GroupPath := pVal;
end;

function  TGroupTreeNodeID.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TGroupTreeNodeID.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TGroupTreeNodeID.Clone(DeepClone: WordBool): ISCRGroupTreeNodeID;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TGroupTreeNodeID.CopyTo(const GroupTreeNodeID: ISCRGroupTreeNodeID; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(GroupTreeNodeID, DeepCopy);
end;

function  TGroupTreeNodeID.Equals(const GroupTreeNodeID: ISCRGroupTreeNodeID): WordBool;
begin
  Result := DefaultInterface.Equals(GroupTreeNodeID);
end;

procedure TGroupTreeNodeID.MatchID(const nodeID: ISCRGroupTreeNodeID; out pMatched: WordBool);
begin
  DefaultInterface.MatchID(nodeID, pMatched);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGroupTreeNodeIDProperties.Create(AServer: TGroupTreeNodeID);
begin
  inherited Create;
  FServer := AServer;
end;

function TGroupTreeNodeIDProperties.GetDefaultInterface: ISCRGroupTreeNodeID;
begin
  Result := FServer.DefaultInterface;
end;

function  TGroupTreeNodeIDProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGroupTreeNodeIDProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TGroupTreeNodeIDProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TGroupTreeNodeIDProperties.Get_GroupLevel: LongWord;
begin
  Result := DefaultInterface.GroupLevel;
end;

procedure TGroupTreeNodeIDProperties.Set_GroupLevel(pVal: LongWord);
begin
  DefaultInterface.GroupLevel := pVal;
end;

function  TGroupTreeNodeIDProperties.Get_GroupPath: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.GroupPath;
end;

procedure TGroupTreeNodeIDProperties.Set_GroupPath(pVal: OleVariant);
begin
  DefaultInterface.GroupPath := pVal;
end;

function  TGroupTreeNodeIDProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TGroupTreeNodeIDProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

{$ENDIF}

class function CoSectionInstance.Create: ISCRSectionInstance;
begin
  Result := CreateComObject(CLASS_SectionInstance) as ISCRSectionInstance;
end;

class function CoSectionInstance.CreateRemote(const MachineName: string): ISCRSectionInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SectionInstance) as ISCRSectionInstance;
end;

procedure TSectionInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C064B58C-FDCA-4B49-BBC7-27437080F459}';
    IntfIID:   '{B185D51C-8588-430A-964F-DB61FFB6505E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSectionInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRSectionInstance;
  end;
end;

procedure TSectionInstance.ConnectTo(svrIntf: ISCRSectionInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSectionInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSectionInstance.GetDefaultInterface: ISCRSectionInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSectionInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSectionInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TSectionInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSectionInstance.GetServerProperties: TSectionInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TSectionInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TSectionInstance.Get_OffsetInPageX: Integer;
begin
  Result := DefaultInterface.OffsetInPageX;
end;

procedure TSectionInstance.Set_OffsetInPageX(pVal: Integer);
begin
  DefaultInterface.OffsetInPageX := pVal;
end;

function  TSectionInstance.Get_OffsetInPageY: Integer;
begin
  Result := DefaultInterface.OffsetInPageY;
end;

procedure TSectionInstance.Set_OffsetInPageY(pVal: Integer);
begin
  DefaultInterface.OffsetInPageY := pVal;
end;

function  TSectionInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TSectionInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TSectionInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TSectionInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TSectionInstance.Get_BackgroundColor: OLE_COLOR;
begin
  Result := DefaultInterface.BackgroundColor;
end;

procedure TSectionInstance.Set_BackgroundColor(pVal: OLE_COLOR);
begin
  DefaultInterface.BackgroundColor := pVal;
end;

function  TSectionInstance.Get_Kind: CrAreaSectionKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TSectionInstance.Set_Kind(pVal: CrAreaSectionKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TSectionInstance.Get_GroupTreeNodeID: ISCRGroupTreeNodeID;
begin
  Result := DefaultInterface.GroupTreeNodeID;
end;

procedure TSectionInstance.Set_GroupTreeNodeID(const pVal: ISCRGroupTreeNodeID);
begin
  DefaultInterface.GroupTreeNodeID := pVal;
end;

function  TSectionInstance.Get_EnableUnderlaySection: WordBool;
begin
  Result := DefaultInterface.EnableUnderlaySection;
end;

procedure TSectionInstance.Set_EnableUnderlaySection(pVal: WordBool);
begin
  DefaultInterface.EnableUnderlaySection := pVal;
end;

function  TSectionInstance.Get_ReportObjectInstances: ISCRReportObjectInstances;
begin
  Result := DefaultInterface.ReportObjectInstances;
end;

procedure TSectionInstance.Set_ReportObjectInstances(const pVal: ISCRReportObjectInstances);
begin
  DefaultInterface.ReportObjectInstances := pVal;
end;

function  TSectionInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TSectionInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TSectionInstance.Get_SectionName: WideString;
begin
  Result := DefaultInterface.SectionName;
end;

procedure TSectionInstance.Set_SectionName(const pVal: WideString);
  { Warning: The property SectionName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SectionName := pVal;
end;

function  TSectionInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TSectionInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TSectionInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TSectionInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TSectionInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TSectionInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TSectionInstance.Clone(DeepClone: WordBool): ISCRSectionInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TSectionInstance.CopyTo(const SectionInstance: ISCRSectionInstance; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(SectionInstance, DeepCopy);
end;

function  TSectionInstance.Equals(const SectionInstance: ISCRSectionInstance): WordBool;
begin
  Result := DefaultInterface.Equals(SectionInstance);
end;

procedure TSectionInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSectionInstanceProperties.Create(AServer: TSectionInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TSectionInstanceProperties.GetDefaultInterface: ISCRSectionInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TSectionInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TSectionInstanceProperties.Get_OffsetInPageX: Integer;
begin
  Result := DefaultInterface.OffsetInPageX;
end;

procedure TSectionInstanceProperties.Set_OffsetInPageX(pVal: Integer);
begin
  DefaultInterface.OffsetInPageX := pVal;
end;

function  TSectionInstanceProperties.Get_OffsetInPageY: Integer;
begin
  Result := DefaultInterface.OffsetInPageY;
end;

procedure TSectionInstanceProperties.Set_OffsetInPageY(pVal: Integer);
begin
  DefaultInterface.OffsetInPageY := pVal;
end;

function  TSectionInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TSectionInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TSectionInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TSectionInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TSectionInstanceProperties.Get_BackgroundColor: OLE_COLOR;
begin
  Result := DefaultInterface.BackgroundColor;
end;

procedure TSectionInstanceProperties.Set_BackgroundColor(pVal: OLE_COLOR);
begin
  DefaultInterface.BackgroundColor := pVal;
end;

function  TSectionInstanceProperties.Get_Kind: CrAreaSectionKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TSectionInstanceProperties.Set_Kind(pVal: CrAreaSectionKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TSectionInstanceProperties.Get_GroupTreeNodeID: ISCRGroupTreeNodeID;
begin
  Result := DefaultInterface.GroupTreeNodeID;
end;

procedure TSectionInstanceProperties.Set_GroupTreeNodeID(const pVal: ISCRGroupTreeNodeID);
begin
  DefaultInterface.GroupTreeNodeID := pVal;
end;

function  TSectionInstanceProperties.Get_EnableUnderlaySection: WordBool;
begin
  Result := DefaultInterface.EnableUnderlaySection;
end;

procedure TSectionInstanceProperties.Set_EnableUnderlaySection(pVal: WordBool);
begin
  DefaultInterface.EnableUnderlaySection := pVal;
end;

function  TSectionInstanceProperties.Get_ReportObjectInstances: ISCRReportObjectInstances;
begin
  Result := DefaultInterface.ReportObjectInstances;
end;

procedure TSectionInstanceProperties.Set_ReportObjectInstances(const pVal: ISCRReportObjectInstances);
begin
  DefaultInterface.ReportObjectInstances := pVal;
end;

function  TSectionInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TSectionInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TSectionInstanceProperties.Get_SectionName: WideString;
begin
  Result := DefaultInterface.SectionName;
end;

procedure TSectionInstanceProperties.Set_SectionName(const pVal: WideString);
  { Warning: The property SectionName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SectionName := pVal;
end;

function  TSectionInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TSectionInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TSectionInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TSectionInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TSectionInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TSectionInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

{$ENDIF}

class function CoSubreportObjectInstance.Create: ISCRSubreportObjectInstance;
begin
  Result := CreateComObject(CLASS_SubreportObjectInstance) as ISCRSubreportObjectInstance;
end;

class function CoSubreportObjectInstance.CreateRemote(const MachineName: string): ISCRSubreportObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SubreportObjectInstance) as ISCRSubreportObjectInstance;
end;

procedure TSubreportObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{35ED5EEE-CA83-4D20-8A89-FC295D69F0F1}';
    IntfIID:   '{116107E2-B006-459C-89CC-421128BBC527}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSubreportObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRSubreportObjectInstance;
  end;
end;

procedure TSubreportObjectInstance.ConnectTo(svrIntf: ISCRSubreportObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSubreportObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSubreportObjectInstance.GetDefaultInterface: ISCRSubreportObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSubreportObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSubreportObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TSubreportObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSubreportObjectInstance.GetServerProperties: TSubreportObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TSubreportObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TSubreportObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TSubreportObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TSubreportObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TSubreportObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TSubreportObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TSubreportObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TSubreportObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TSubreportObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TSubreportObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TSubreportObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TSubreportObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TSubreportObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TSubreportObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TSubreportObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TSubreportObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TSubreportObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TSubreportObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TSubreportObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TSubreportObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TSubreportObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TSubreportObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TSubreportObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TSubreportObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TSubreportObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TSubreportObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TSubreportObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TSubreportObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TSubreportObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TSubreportObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TSubreportObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TSubreportObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TSubreportObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TSubreportObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TSubreportObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TSubreportObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TSubreportObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TSubreportObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TSubreportObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TSubreportObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TSubreportObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TSubreportObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TSubreportObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TSubreportObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TSubreportObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TSubreportObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TSubreportObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TSubreportObjectInstance.Get_SubreportName: WideString;
begin
  Result := DefaultInterface.SubreportName;
end;

procedure TSubreportObjectInstance.Set_SubreportName(const pVal: WideString);
  { Warning: The property SubreportName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubreportName := pVal;
end;

function  TSubreportObjectInstance.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TSubreportObjectInstance.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TSubreportObjectInstance.Get_TabText: WideString;
begin
  Result := DefaultInterface.TabText;
end;

procedure TSubreportObjectInstance.Set_TabText(const pVal: WideString);
  { Warning: The property TabText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TabText := pVal;
end;

function  TSubreportObjectInstance.Get_SubreportPageObject: ISCRPageObjectInstance;
begin
  Result := DefaultInterface.SubreportPageObject;
end;

procedure TSubreportObjectInstance.Set_SubreportPageObject(const pVal: ISCRPageObjectInstance);
begin
  DefaultInterface.SubreportPageObject := pVal;
end;

function  TSubreportObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TSubreportObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                          DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TSubreportObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TSubreportObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TSubreportObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TSubreportObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                        out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TSubreportObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TSubreportObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TSubreportObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSubreportObjectInstanceProperties.Create(AServer: TSubreportObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TSubreportObjectInstanceProperties.GetDefaultInterface: ISCRSubreportObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TSubreportObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TSubreportObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TSubreportObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TSubreportObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TSubreportObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TSubreportObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TSubreportObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TSubreportObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TSubreportObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TSubreportObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TSubreportObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TSubreportObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TSubreportObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TSubreportObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TSubreportObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TSubreportObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TSubreportObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TSubreportObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TSubreportObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TSubreportObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TSubreportObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TSubreportObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TSubreportObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TSubreportObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TSubreportObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TSubreportObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TSubreportObjectInstanceProperties.Get_SubreportName: WideString;
begin
  Result := DefaultInterface.SubreportName;
end;

procedure TSubreportObjectInstanceProperties.Set_SubreportName(const pVal: WideString);
  { Warning: The property SubreportName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubreportName := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TSubreportObjectInstanceProperties.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_TabText: WideString;
begin
  Result := DefaultInterface.TabText;
end;

procedure TSubreportObjectInstanceProperties.Set_TabText(const pVal: WideString);
  { Warning: The property TabText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TabText := pVal;
end;

function  TSubreportObjectInstanceProperties.Get_SubreportPageObject: ISCRPageObjectInstance;
begin
  Result := DefaultInterface.SubreportPageObject;
end;

procedure TSubreportObjectInstanceProperties.Set_SubreportPageObject(const pVal: ISCRPageObjectInstance);
begin
  DefaultInterface.SubreportPageObject := pVal;
end;

{$ENDIF}

class function CoOnDemandSubreportObjectInstance.Create: ISCROnDemandSubreportObjectInstance;
begin
  Result := CreateComObject(CLASS_OnDemandSubreportObjectInstance) as ISCROnDemandSubreportObjectInstance;
end;

class function CoOnDemandSubreportObjectInstance.CreateRemote(const MachineName: string): ISCROnDemandSubreportObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OnDemandSubreportObjectInstance) as ISCROnDemandSubreportObjectInstance;
end;

procedure TOnDemandSubreportObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{529C7D33-35D8-47B4-9040-23BA177FF13A}';
    IntfIID:   '{116107E3-B006-459C-89CC-421128BBC527}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TOnDemandSubreportObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCROnDemandSubreportObjectInstance;
  end;
end;

procedure TOnDemandSubreportObjectInstance.ConnectTo(svrIntf: ISCROnDemandSubreportObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TOnDemandSubreportObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TOnDemandSubreportObjectInstance.GetDefaultInterface: ISCROnDemandSubreportObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TOnDemandSubreportObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TOnDemandSubreportObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TOnDemandSubreportObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TOnDemandSubreportObjectInstance.GetServerProperties: TOnDemandSubreportObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TOnDemandSubreportObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TOnDemandSubreportObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TOnDemandSubreportObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TOnDemandSubreportObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TOnDemandSubreportObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TOnDemandSubreportObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TOnDemandSubreportObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TOnDemandSubreportObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TOnDemandSubreportObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TOnDemandSubreportObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TOnDemandSubreportObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TOnDemandSubreportObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TOnDemandSubreportObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TOnDemandSubreportObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TOnDemandSubreportObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TOnDemandSubreportObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TOnDemandSubreportObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TOnDemandSubreportObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TOnDemandSubreportObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TOnDemandSubreportObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TOnDemandSubreportObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TOnDemandSubreportObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TOnDemandSubreportObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TOnDemandSubreportObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TOnDemandSubreportObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TOnDemandSubreportObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TOnDemandSubreportObjectInstance.Get_SubreportName: WideString;
begin
  Result := DefaultInterface.SubreportName;
end;

procedure TOnDemandSubreportObjectInstance.Set_SubreportName(const pVal: WideString);
  { Warning: The property SubreportName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubreportName := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TOnDemandSubreportObjectInstance.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_TabText: WideString;
begin
  Result := DefaultInterface.TabText;
end;

procedure TOnDemandSubreportObjectInstance.Set_TabText(const pVal: WideString);
  { Warning: The property TabText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TabText := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_OnDemandSubreportIndex: Integer;
begin
  Result := DefaultInterface.OnDemandSubreportIndex;
end;

procedure TOnDemandSubreportObjectInstance.Set_OnDemandSubreportIndex(pVal: Integer);
begin
  DefaultInterface.OnDemandSubreportIndex := pVal;
end;

function  TOnDemandSubreportObjectInstance.Get_OnDemandSubreportDisplayString: WideString;
begin
  Result := DefaultInterface.OnDemandSubreportDisplayString;
end;

procedure TOnDemandSubreportObjectInstance.Set_OnDemandSubreportDisplayString(const pVal: WideString);
  { Warning: The property OnDemandSubreportDisplayString has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDemandSubreportDisplayString := pVal;
end;

function  TOnDemandSubreportObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TOnDemandSubreportObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                                  DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TOnDemandSubreportObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TOnDemandSubreportObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TOnDemandSubreportObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TOnDemandSubreportObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                                out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TOnDemandSubreportObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TOnDemandSubreportObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TOnDemandSubreportObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TOnDemandSubreportObjectInstanceProperties.Create(AServer: TOnDemandSubreportObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TOnDemandSubreportObjectInstanceProperties.GetDefaultInterface: ISCROnDemandSubreportObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_SubreportName: WideString;
begin
  Result := DefaultInterface.SubreportName;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_SubreportName(const pVal: WideString);
  { Warning: The property SubreportName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubreportName := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_TabText: WideString;
begin
  Result := DefaultInterface.TabText;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_TabText(const pVal: WideString);
  { Warning: The property TabText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TabText := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_OnDemandSubreportIndex: Integer;
begin
  Result := DefaultInterface.OnDemandSubreportIndex;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_OnDemandSubreportIndex(pVal: Integer);
begin
  DefaultInterface.OnDemandSubreportIndex := pVal;
end;

function  TOnDemandSubreportObjectInstanceProperties.Get_OnDemandSubreportDisplayString: WideString;
begin
  Result := DefaultInterface.OnDemandSubreportDisplayString;
end;

procedure TOnDemandSubreportObjectInstanceProperties.Set_OnDemandSubreportDisplayString(const pVal: WideString);
  { Warning: The property OnDemandSubreportDisplayString has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDemandSubreportDisplayString := pVal;
end;

{$ENDIF}

class function CoSectionInstances.Create: ISCRSectionInstances;
begin
  Result := CreateComObject(CLASS_SectionInstances) as ISCRSectionInstances;
end;

class function CoSectionInstances.CreateRemote(const MachineName: string): ISCRSectionInstances;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SectionInstances) as ISCRSectionInstances;
end;

procedure TSectionInstances.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{14F28892-AEF5-4917-AB89-95C6D3D53B55}';
    IntfIID:   '{B8E83213-97DE-4A5A-9697-854DC45FAFFF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSectionInstances.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRSectionInstances;
  end;
end;

procedure TSectionInstances.ConnectTo(svrIntf: ISCRSectionInstances);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSectionInstances.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSectionInstances.GetDefaultInterface: ISCRSectionInstances;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSectionInstances.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSectionInstancesProperties.Create(Self);
{$ENDIF}
end;

destructor TSectionInstances.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSectionInstances.GetServerProperties: TSectionInstancesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TSectionInstances.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TSectionInstances.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TSectionInstances.Get_Item(Index: Integer): ISCRSectionInstance;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TSectionInstances.Set_Item(Index: Integer; const ppVal: ISCRSectionInstance);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TSectionInstances.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TSectionInstances.Clone(DeepClone: WordBool): ISCRSectionInstances;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TSectionInstances.CopyTo(const SectionInstances: ISCRSectionInstances; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(SectionInstances, DeepCopy);
end;

function  TSectionInstances.Equals(const SectionInstances: ISCRSectionInstances): WordBool;
begin
  Result := DefaultInterface.Equals(SectionInstances);
end;

procedure TSectionInstances.Add(const SectionInstance: ISCRSectionInstance);
begin
  DefaultInterface.Add(SectionInstance);
end;

procedure TSectionInstances.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TSectionInstances.Insert(Index: Integer; const SectionInstance: ISCRSectionInstance);
begin
  DefaultInterface.Insert(Index, SectionInstance);
end;

procedure TSectionInstances.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TSectionInstances.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TSectionInstances.FindIndexOf(const SectionInstance: ISCRSectionInstance): Integer;
begin
  Result := DefaultInterface.FindIndexOf(SectionInstance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSectionInstancesProperties.Create(AServer: TSectionInstances);
begin
  inherited Create;
  FServer := AServer;
end;

function TSectionInstancesProperties.GetDefaultInterface: ISCRSectionInstances;
begin
  Result := FServer.DefaultInterface;
end;

function  TSectionInstancesProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TSectionInstancesProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TSectionInstancesProperties.Get_Item(Index: Integer): ISCRSectionInstance;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TSectionInstancesProperties.Set_Item(Index: Integer; const ppVal: ISCRSectionInstance);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TSectionInstancesProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoPageObjectInstance.Create: ISCRPageObjectInstance;
begin
  Result := CreateComObject(CLASS_PageObjectInstance) as ISCRPageObjectInstance;
end;

class function CoPageObjectInstance.CreateRemote(const MachineName: string): ISCRPageObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PageObjectInstance) as ISCRPageObjectInstance;
end;

procedure TPageObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{01BFF5EC-91EB-48B6-8F8D-0AEE008561B8}';
    IntfIID:   '{AFCE37DB-BB07-42F1-BBB5-1473AF40530F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPageObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRPageObjectInstance;
  end;
end;

procedure TPageObjectInstance.ConnectTo(svrIntf: ISCRPageObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPageObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPageObjectInstance.GetDefaultInterface: ISCRPageObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TPageObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TPageObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TPageObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TPageObjectInstance.GetServerProperties: TPageObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TPageObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TPageObjectInstance.Get_PageWidth: Integer;
begin
  Result := DefaultInterface.PageWidth;
end;

procedure TPageObjectInstance.Set_PageWidth(pVal: Integer);
begin
  DefaultInterface.PageWidth := pVal;
end;

function  TPageObjectInstance.Get_PageHeight: Integer;
begin
  Result := DefaultInterface.PageHeight;
end;

procedure TPageObjectInstance.Set_PageHeight(pVal: Integer);
begin
  DefaultInterface.PageHeight := pVal;
end;

function  TPageObjectInstance.Get_LeftMargin: Integer;
begin
  Result := DefaultInterface.LeftMargin;
end;

procedure TPageObjectInstance.Set_LeftMargin(pVal: Integer);
begin
  DefaultInterface.LeftMargin := pVal;
end;

function  TPageObjectInstance.Get_TopMargin: Integer;
begin
  Result := DefaultInterface.TopMargin;
end;

procedure TPageObjectInstance.Set_TopMargin(pVal: Integer);
begin
  DefaultInterface.TopMargin := pVal;
end;

function  TPageObjectInstance.Get_RightMargin: Integer;
begin
  Result := DefaultInterface.RightMargin;
end;

procedure TPageObjectInstance.Set_RightMargin(pVal: Integer);
begin
  DefaultInterface.RightMargin := pVal;
end;

function  TPageObjectInstance.Get_BottomMargin: Integer;
begin
  Result := DefaultInterface.BottomMargin;
end;

procedure TPageObjectInstance.Set_BottomMargin(pVal: Integer);
begin
  DefaultInterface.BottomMargin := pVal;
end;

function  TPageObjectInstance.Get_PageNumber: Integer;
begin
  Result := DefaultInterface.PageNumber;
end;

procedure TPageObjectInstance.Set_PageNumber(pVal: Integer);
begin
  DefaultInterface.PageNumber := pVal;
end;

function  TPageObjectInstance.Get_LastPageNumber: Integer;
begin
  Result := DefaultInterface.LastPageNumber;
end;

procedure TPageObjectInstance.Set_LastPageNumber(pVal: Integer);
begin
  DefaultInterface.LastPageNumber := pVal;
end;

function  TPageObjectInstance.Get_IsPageComplete: WordBool;
begin
  Result := DefaultInterface.IsPageComplete;
end;

procedure TPageObjectInstance.Set_IsPageComplete(pVal: WordBool);
begin
  DefaultInterface.IsPageComplete := pVal;
end;

function  TPageObjectInstance.Get_SectionInstances: ISCRSectionInstances;
begin
  Result := DefaultInterface.SectionInstances;
end;

procedure TPageObjectInstance.Set_SectionInstances(const pVal: ISCRSectionInstances);
begin
  DefaultInterface.SectionInstances := pVal;
end;

function  TPageObjectInstance.Get_LineObjectInstances: ISCRLineObjectInstances;
begin
  Result := DefaultInterface.LineObjectInstances;
end;

procedure TPageObjectInstance.Set_LineObjectInstances(const pVal: ISCRLineObjectInstances);
begin
  DefaultInterface.LineObjectInstances := pVal;
end;

function  TPageObjectInstance.Get_BoxObjectInstances: ISCRBoxObjectInstances;
begin
  Result := DefaultInterface.BoxObjectInstances;
end;

procedure TPageObjectInstance.Set_BoxObjectInstances(const pVal: ISCRBoxObjectInstances);
begin
  DefaultInterface.BoxObjectInstances := pVal;
end;

function  TPageObjectInstance.Get_ReportName: WideString;
begin
  Result := DefaultInterface.ReportName;
end;

procedure TPageObjectInstance.Set_ReportName(const pVal: WideString);
  { Warning: The property ReportName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportName := pVal;
end;

function  TPageObjectInstance.Get_DrillDownContext: ISCRGroupTreeNodeID;
begin
  Result := DefaultInterface.DrillDownContext;
end;

procedure TPageObjectInstance.Set_DrillDownContext(const pVal: ISCRGroupTreeNodeID);
begin
  DefaultInterface.DrillDownContext := pVal;
end;

function  TPageObjectInstance.Get_SubreportContext: ISCRSubreportContext;
begin
  Result := DefaultInterface.SubreportContext;
end;

procedure TPageObjectInstance.Set_SubreportContext(const pVal: ISCRSubreportContext);
begin
  DefaultInterface.SubreportContext := pVal;
end;

function  TPageObjectInstance.Get_IsLastPage: WordBool;
begin
  Result := DefaultInterface.IsLastPage;
end;

procedure TPageObjectInstance.Set_IsLastPage(pVal: WordBool);
begin
  DefaultInterface.IsLastPage := pVal;
end;

function  TPageObjectInstance.Get_ReportTitle: WideString;
begin
  Result := DefaultInterface.ReportTitle;
end;

procedure TPageObjectInstance.Set_ReportTitle(const pVal: WideString);
  { Warning: The property ReportTitle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportTitle := pVal;
end;

function  TPageObjectInstance.Get_IsLastPageKnown: WordBool;
begin
  Result := DefaultInterface.IsLastPageKnown;
end;

procedure TPageObjectInstance.Set_IsLastPageKnown(pVal: WordBool);
begin
  DefaultInterface.IsLastPageKnown := pVal;
end;

function  TPageObjectInstance.Get_IsShowGroupTree: WordBool;
begin
  Result := DefaultInterface.IsShowGroupTree;
end;

procedure TPageObjectInstance.Set_IsShowGroupTree(pVal: WordBool);
begin
  DefaultInterface.IsShowGroupTree := pVal;
end;

function  TPageObjectInstance.Clone(DeepClone: WordBool): ISCRPageObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TPageObjectInstance.CopyTo(const PageObjectInstance: ISCRPageObjectInstance; 
                                     DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(PageObjectInstance, DeepCopy);
end;

function  TPageObjectInstance.Equals(const PageObjectInstance: ISCRPageObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(PageObjectInstance);
end;

procedure TPageObjectInstance.getPrinterInfo(out bstrDriverName: PWord1; 
                                             out paperOrientation: CrPaperOrientationEnum; 
                                             out paperSize: CrPaperSizeEnum; 
                                             out pPaperWidth: LongWord; out pPaperLength: LongWord; 
                                             out pUseDefaultPrinter: WordBool; 
                                             out pUseDefaultPrinterSettings: WordBool);
begin
  DefaultInterface.getPrinterInfo(bstrDriverName, paperOrientation, paperSize, pPaperWidth, 
                                  pPaperLength, pUseDefaultPrinter, pUseDefaultPrinterSettings);
end;

procedure TPageObjectInstance.setPrinterInfo(var bstrDriverName: Word; 
                                             paperOrientation: CrPaperOrientationEnum; 
                                             paperSize: CrPaperSizeEnum; paperWidth: LongWord; 
                                             paperLength: LongWord; vbUseDefaultPrinter: WordBool; 
                                             vbUseDefaultPrinterSettings: WordBool);
begin
  DefaultInterface.setPrinterInfo(bstrDriverName, paperOrientation, paperSize, paperWidth, 
                                  paperLength, vbUseDefaultPrinter, vbUseDefaultPrinterSettings);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TPageObjectInstanceProperties.Create(AServer: TPageObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TPageObjectInstanceProperties.GetDefaultInterface: ISCRPageObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TPageObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TPageObjectInstanceProperties.Get_PageWidth: Integer;
begin
  Result := DefaultInterface.PageWidth;
end;

procedure TPageObjectInstanceProperties.Set_PageWidth(pVal: Integer);
begin
  DefaultInterface.PageWidth := pVal;
end;

function  TPageObjectInstanceProperties.Get_PageHeight: Integer;
begin
  Result := DefaultInterface.PageHeight;
end;

procedure TPageObjectInstanceProperties.Set_PageHeight(pVal: Integer);
begin
  DefaultInterface.PageHeight := pVal;
end;

function  TPageObjectInstanceProperties.Get_LeftMargin: Integer;
begin
  Result := DefaultInterface.LeftMargin;
end;

procedure TPageObjectInstanceProperties.Set_LeftMargin(pVal: Integer);
begin
  DefaultInterface.LeftMargin := pVal;
end;

function  TPageObjectInstanceProperties.Get_TopMargin: Integer;
begin
  Result := DefaultInterface.TopMargin;
end;

procedure TPageObjectInstanceProperties.Set_TopMargin(pVal: Integer);
begin
  DefaultInterface.TopMargin := pVal;
end;

function  TPageObjectInstanceProperties.Get_RightMargin: Integer;
begin
  Result := DefaultInterface.RightMargin;
end;

procedure TPageObjectInstanceProperties.Set_RightMargin(pVal: Integer);
begin
  DefaultInterface.RightMargin := pVal;
end;

function  TPageObjectInstanceProperties.Get_BottomMargin: Integer;
begin
  Result := DefaultInterface.BottomMargin;
end;

procedure TPageObjectInstanceProperties.Set_BottomMargin(pVal: Integer);
begin
  DefaultInterface.BottomMargin := pVal;
end;

function  TPageObjectInstanceProperties.Get_PageNumber: Integer;
begin
  Result := DefaultInterface.PageNumber;
end;

procedure TPageObjectInstanceProperties.Set_PageNumber(pVal: Integer);
begin
  DefaultInterface.PageNumber := pVal;
end;

function  TPageObjectInstanceProperties.Get_LastPageNumber: Integer;
begin
  Result := DefaultInterface.LastPageNumber;
end;

procedure TPageObjectInstanceProperties.Set_LastPageNumber(pVal: Integer);
begin
  DefaultInterface.LastPageNumber := pVal;
end;

function  TPageObjectInstanceProperties.Get_IsPageComplete: WordBool;
begin
  Result := DefaultInterface.IsPageComplete;
end;

procedure TPageObjectInstanceProperties.Set_IsPageComplete(pVal: WordBool);
begin
  DefaultInterface.IsPageComplete := pVal;
end;

function  TPageObjectInstanceProperties.Get_SectionInstances: ISCRSectionInstances;
begin
  Result := DefaultInterface.SectionInstances;
end;

procedure TPageObjectInstanceProperties.Set_SectionInstances(const pVal: ISCRSectionInstances);
begin
  DefaultInterface.SectionInstances := pVal;
end;

function  TPageObjectInstanceProperties.Get_LineObjectInstances: ISCRLineObjectInstances;
begin
  Result := DefaultInterface.LineObjectInstances;
end;

procedure TPageObjectInstanceProperties.Set_LineObjectInstances(const pVal: ISCRLineObjectInstances);
begin
  DefaultInterface.LineObjectInstances := pVal;
end;

function  TPageObjectInstanceProperties.Get_BoxObjectInstances: ISCRBoxObjectInstances;
begin
  Result := DefaultInterface.BoxObjectInstances;
end;

procedure TPageObjectInstanceProperties.Set_BoxObjectInstances(const pVal: ISCRBoxObjectInstances);
begin
  DefaultInterface.BoxObjectInstances := pVal;
end;

function  TPageObjectInstanceProperties.Get_ReportName: WideString;
begin
  Result := DefaultInterface.ReportName;
end;

procedure TPageObjectInstanceProperties.Set_ReportName(const pVal: WideString);
  { Warning: The property ReportName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportName := pVal;
end;

function  TPageObjectInstanceProperties.Get_DrillDownContext: ISCRGroupTreeNodeID;
begin
  Result := DefaultInterface.DrillDownContext;
end;

procedure TPageObjectInstanceProperties.Set_DrillDownContext(const pVal: ISCRGroupTreeNodeID);
begin
  DefaultInterface.DrillDownContext := pVal;
end;

function  TPageObjectInstanceProperties.Get_SubreportContext: ISCRSubreportContext;
begin
  Result := DefaultInterface.SubreportContext;
end;

procedure TPageObjectInstanceProperties.Set_SubreportContext(const pVal: ISCRSubreportContext);
begin
  DefaultInterface.SubreportContext := pVal;
end;

function  TPageObjectInstanceProperties.Get_IsLastPage: WordBool;
begin
  Result := DefaultInterface.IsLastPage;
end;

procedure TPageObjectInstanceProperties.Set_IsLastPage(pVal: WordBool);
begin
  DefaultInterface.IsLastPage := pVal;
end;

function  TPageObjectInstanceProperties.Get_ReportTitle: WideString;
begin
  Result := DefaultInterface.ReportTitle;
end;

procedure TPageObjectInstanceProperties.Set_ReportTitle(const pVal: WideString);
  { Warning: The property ReportTitle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportTitle := pVal;
end;

function  TPageObjectInstanceProperties.Get_IsLastPageKnown: WordBool;
begin
  Result := DefaultInterface.IsLastPageKnown;
end;

procedure TPageObjectInstanceProperties.Set_IsLastPageKnown(pVal: WordBool);
begin
  DefaultInterface.IsLastPageKnown := pVal;
end;

function  TPageObjectInstanceProperties.Get_IsShowGroupTree: WordBool;
begin
  Result := DefaultInterface.IsShowGroupTree;
end;

procedure TPageObjectInstanceProperties.Set_IsShowGroupTree(pVal: WordBool);
begin
  DefaultInterface.IsShowGroupTree := pVal;
end;

{$ENDIF}

class function CoStringFieldObjectInstance.Create: ISCRStringFieldObjectInstance;
begin
  Result := CreateComObject(CLASS_StringFieldObjectInstance) as ISCRStringFieldObjectInstance;
end;

class function CoStringFieldObjectInstance.CreateRemote(const MachineName: string): ISCRStringFieldObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StringFieldObjectInstance) as ISCRStringFieldObjectInstance;
end;

procedure TStringFieldObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{92F0B088-920D-4081-B612-8913E981D644}';
    IntfIID:   '{1CBCB17C-9982-40CC-9384-19EE1F4F6101}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStringFieldObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRStringFieldObjectInstance;
  end;
end;

procedure TStringFieldObjectInstance.ConnectTo(svrIntf: ISCRStringFieldObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStringFieldObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStringFieldObjectInstance.GetDefaultInterface: ISCRStringFieldObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TStringFieldObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TStringFieldObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TStringFieldObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TStringFieldObjectInstance.GetServerProperties: TStringFieldObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TStringFieldObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TStringFieldObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TStringFieldObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TStringFieldObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TStringFieldObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TStringFieldObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TStringFieldObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TStringFieldObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TStringFieldObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TStringFieldObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TStringFieldObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TStringFieldObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TStringFieldObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TStringFieldObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TStringFieldObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TStringFieldObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TStringFieldObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TStringFieldObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TStringFieldObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TStringFieldObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TStringFieldObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TStringFieldObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TStringFieldObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TStringFieldObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TStringFieldObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TStringFieldObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TStringFieldObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TStringFieldObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TStringFieldObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TStringFieldObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TStringFieldObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TStringFieldObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TStringFieldObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TStringFieldObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TStringFieldObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TStringFieldObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TStringFieldObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TStringFieldObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TStringFieldObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TStringFieldObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TStringFieldObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TStringFieldObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TStringFieldObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TStringFieldObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TStringFieldObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TStringFieldObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TStringFieldObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TStringFieldObjectInstance.Get_StartLineNumber: Integer;
begin
  Result := DefaultInterface.StartLineNumber;
end;

procedure TStringFieldObjectInstance.Set_StartLineNumber(pVal: Integer);
begin
  DefaultInterface.StartLineNumber := pVal;
end;

function  TStringFieldObjectInstance.Get_EndLineNumber: Integer;
begin
  Result := DefaultInterface.EndLineNumber;
end;

procedure TStringFieldObjectInstance.Set_EndLineNumber(pVal: Integer);
begin
  DefaultInterface.EndLineNumber := pVal;
end;

function  TStringFieldObjectInstance.Get_VerticalStartOffset: Integer;
begin
  Result := DefaultInterface.VerticalStartOffset;
end;

procedure TStringFieldObjectInstance.Set_VerticalStartOffset(pVal: Integer);
begin
  DefaultInterface.VerticalStartOffset := pVal;
end;

function  TStringFieldObjectInstance.Get_Paragraphs: ISCRRuntimeParagraphs;
begin
  Result := DefaultInterface.Paragraphs;
end;

procedure TStringFieldObjectInstance.Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
begin
  DefaultInterface.Paragraphs := pVal;
end;

function  TStringFieldObjectInstance.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TStringFieldObjectInstance.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TStringFieldObjectInstance.Get_FieldType: CrRuntimeFieldKindEnum;
begin
  Result := DefaultInterface.FieldType;
end;

procedure TStringFieldObjectInstance.Set_FieldType(pVal: CrRuntimeFieldKindEnum);
begin
  DefaultInterface.FieldType := pVal;
end;

function  TStringFieldObjectInstance.Get_FieldValueType: CrFieldValueTypeEnum;
begin
  Result := DefaultInterface.FieldValueType;
end;

procedure TStringFieldObjectInstance.Set_FieldValueType(pVal: CrFieldValueTypeEnum);
begin
  DefaultInterface.FieldValueType := pVal;
end;

function  TStringFieldObjectInstance.Get_IsConstantField: WordBool;
begin
  Result := DefaultInterface.IsConstantField;
end;

procedure TStringFieldObjectInstance.Set_IsConstantField(pVal: WordBool);
begin
  DefaultInterface.IsConstantField := pVal;
end;

function  TStringFieldObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TStringFieldObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                            DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TStringFieldObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TStringFieldObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TStringFieldObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TStringFieldObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                          out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TStringFieldObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TStringFieldObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TStringFieldObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

procedure TStringFieldObjectInstance.SetUpDefaultObject(const bstrText: WideString);
begin
  DefaultInterface.SetUpDefaultObject(bstrText);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TStringFieldObjectInstanceProperties.Create(AServer: TStringFieldObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TStringFieldObjectInstanceProperties.GetDefaultInterface: ISCRStringFieldObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TStringFieldObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TStringFieldObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TStringFieldObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TStringFieldObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TStringFieldObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TStringFieldObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TStringFieldObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TStringFieldObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TStringFieldObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TStringFieldObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TStringFieldObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TStringFieldObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TStringFieldObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TStringFieldObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TStringFieldObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TStringFieldObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TStringFieldObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TStringFieldObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TStringFieldObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TStringFieldObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TStringFieldObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TStringFieldObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TStringFieldObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TStringFieldObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TStringFieldObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TStringFieldObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TStringFieldObjectInstanceProperties.Get_StartLineNumber: Integer;
begin
  Result := DefaultInterface.StartLineNumber;
end;

procedure TStringFieldObjectInstanceProperties.Set_StartLineNumber(pVal: Integer);
begin
  DefaultInterface.StartLineNumber := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_EndLineNumber: Integer;
begin
  Result := DefaultInterface.EndLineNumber;
end;

procedure TStringFieldObjectInstanceProperties.Set_EndLineNumber(pVal: Integer);
begin
  DefaultInterface.EndLineNumber := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_VerticalStartOffset: Integer;
begin
  Result := DefaultInterface.VerticalStartOffset;
end;

procedure TStringFieldObjectInstanceProperties.Set_VerticalStartOffset(pVal: Integer);
begin
  DefaultInterface.VerticalStartOffset := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_Paragraphs: ISCRRuntimeParagraphs;
begin
  Result := DefaultInterface.Paragraphs;
end;

procedure TStringFieldObjectInstanceProperties.Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
begin
  DefaultInterface.Paragraphs := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TStringFieldObjectInstanceProperties.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_FieldType: CrRuntimeFieldKindEnum;
begin
  Result := DefaultInterface.FieldType;
end;

procedure TStringFieldObjectInstanceProperties.Set_FieldType(pVal: CrRuntimeFieldKindEnum);
begin
  DefaultInterface.FieldType := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_FieldValueType: CrFieldValueTypeEnum;
begin
  Result := DefaultInterface.FieldValueType;
end;

procedure TStringFieldObjectInstanceProperties.Set_FieldValueType(pVal: CrFieldValueTypeEnum);
begin
  DefaultInterface.FieldValueType := pVal;
end;

function  TStringFieldObjectInstanceProperties.Get_IsConstantField: WordBool;
begin
  Result := DefaultInterface.IsConstantField;
end;

procedure TStringFieldObjectInstanceProperties.Set_IsConstantField(pVal: WordBool);
begin
  DefaultInterface.IsConstantField := pVal;
end;

{$ENDIF}

class function CoStringFieldObjectInstanceInGrid.Create: ISCRStringFieldObjectInstanceInGrid;
begin
  Result := CreateComObject(CLASS_StringFieldObjectInstanceInGrid) as ISCRStringFieldObjectInstanceInGrid;
end;

class function CoStringFieldObjectInstanceInGrid.CreateRemote(const MachineName: string): ISCRStringFieldObjectInstanceInGrid;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StringFieldObjectInstanceInGrid) as ISCRStringFieldObjectInstanceInGrid;
end;

procedure TStringFieldObjectInstanceInGrid.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CD1327C4-E961-4B39-A39D-59F0CDE48F4D}';
    IntfIID:   '{CFD56A9F-EE52-4043-8013-5005A1C853D9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStringFieldObjectInstanceInGrid.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRStringFieldObjectInstanceInGrid;
  end;
end;

procedure TStringFieldObjectInstanceInGrid.ConnectTo(svrIntf: ISCRStringFieldObjectInstanceInGrid);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStringFieldObjectInstanceInGrid.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStringFieldObjectInstanceInGrid.GetDefaultInterface: ISCRStringFieldObjectInstanceInGrid;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TStringFieldObjectInstanceInGrid.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TStringFieldObjectInstanceInGridProperties.Create(Self);
{$ENDIF}
end;

destructor TStringFieldObjectInstanceInGrid.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TStringFieldObjectInstanceInGrid.GetServerProperties: TStringFieldObjectInstanceInGridProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TStringFieldObjectInstanceInGrid.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TStringFieldObjectInstanceInGrid.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TStringFieldObjectInstanceInGrid.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TStringFieldObjectInstanceInGrid.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TStringFieldObjectInstanceInGrid.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TStringFieldObjectInstanceInGrid.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TStringFieldObjectInstanceInGrid.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TStringFieldObjectInstanceInGrid.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TStringFieldObjectInstanceInGrid.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TStringFieldObjectInstanceInGrid.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TStringFieldObjectInstanceInGrid.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TStringFieldObjectInstanceInGrid.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TStringFieldObjectInstanceInGrid.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TStringFieldObjectInstanceInGrid.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TStringFieldObjectInstanceInGrid.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TStringFieldObjectInstanceInGrid.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TStringFieldObjectInstanceInGrid.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TStringFieldObjectInstanceInGrid.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TStringFieldObjectInstanceInGrid.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TStringFieldObjectInstanceInGrid.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TStringFieldObjectInstanceInGrid.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TStringFieldObjectInstanceInGrid.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TStringFieldObjectInstanceInGrid.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TStringFieldObjectInstanceInGrid.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TStringFieldObjectInstanceInGrid.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TStringFieldObjectInstanceInGrid.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TStringFieldObjectInstanceInGrid.Get_StartLineNumber: Integer;
begin
  Result := DefaultInterface.StartLineNumber;
end;

procedure TStringFieldObjectInstanceInGrid.Set_StartLineNumber(pVal: Integer);
begin
  DefaultInterface.StartLineNumber := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_EndLineNumber: Integer;
begin
  Result := DefaultInterface.EndLineNumber;
end;

procedure TStringFieldObjectInstanceInGrid.Set_EndLineNumber(pVal: Integer);
begin
  DefaultInterface.EndLineNumber := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_VerticalStartOffset: Integer;
begin
  Result := DefaultInterface.VerticalStartOffset;
end;

procedure TStringFieldObjectInstanceInGrid.Set_VerticalStartOffset(pVal: Integer);
begin
  DefaultInterface.VerticalStartOffset := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_Paragraphs: ISCRRuntimeParagraphs;
begin
  Result := DefaultInterface.Paragraphs;
end;

procedure TStringFieldObjectInstanceInGrid.Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
begin
  DefaultInterface.Paragraphs := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TStringFieldObjectInstanceInGrid.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_FieldType: CrRuntimeFieldKindEnum;
begin
  Result := DefaultInterface.FieldType;
end;

procedure TStringFieldObjectInstanceInGrid.Set_FieldType(pVal: CrRuntimeFieldKindEnum);
begin
  DefaultInterface.FieldType := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_FieldValueType: CrFieldValueTypeEnum;
begin
  Result := DefaultInterface.FieldValueType;
end;

procedure TStringFieldObjectInstanceInGrid.Set_FieldValueType(pVal: CrFieldValueTypeEnum);
begin
  DefaultInterface.FieldValueType := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_IsConstantField: WordBool;
begin
  Result := DefaultInterface.IsConstantField;
end;

procedure TStringFieldObjectInstanceInGrid.Set_IsConstantField(pVal: WordBool);
begin
  DefaultInterface.IsConstantField := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_RowNumber: Integer;
begin
  Result := DefaultInterface.RowNumber;
end;

procedure TStringFieldObjectInstanceInGrid.Set_RowNumber(pVal: Integer);
begin
  DefaultInterface.RowNumber := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Get_ColumnNumber: Integer;
begin
  Result := DefaultInterface.ColumnNumber;
end;

procedure TStringFieldObjectInstanceInGrid.Set_ColumnNumber(pVal: Integer);
begin
  DefaultInterface.ColumnNumber := pVal;
end;

function  TStringFieldObjectInstanceInGrid.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TStringFieldObjectInstanceInGrid.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                                  DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TStringFieldObjectInstanceInGrid.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TStringFieldObjectInstanceInGrid.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TStringFieldObjectInstanceInGrid.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TStringFieldObjectInstanceInGrid.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                                out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TStringFieldObjectInstanceInGrid.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TStringFieldObjectInstanceInGrid.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TStringFieldObjectInstanceInGrid.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

procedure TStringFieldObjectInstanceInGrid.SetUpDefaultObject(const bstrText: WideString);
begin
  DefaultInterface.SetUpDefaultObject(bstrText);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TStringFieldObjectInstanceInGridProperties.Create(AServer: TStringFieldObjectInstanceInGrid);
begin
  inherited Create;
  FServer := AServer;
end;

function TStringFieldObjectInstanceInGridProperties.GetDefaultInterface: ISCRStringFieldObjectInstanceInGrid;
begin
  Result := FServer.DefaultInterface;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_StartLineNumber: Integer;
begin
  Result := DefaultInterface.StartLineNumber;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_StartLineNumber(pVal: Integer);
begin
  DefaultInterface.StartLineNumber := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_EndLineNumber: Integer;
begin
  Result := DefaultInterface.EndLineNumber;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_EndLineNumber(pVal: Integer);
begin
  DefaultInterface.EndLineNumber := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_VerticalStartOffset: Integer;
begin
  Result := DefaultInterface.VerticalStartOffset;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_VerticalStartOffset(pVal: Integer);
begin
  DefaultInterface.VerticalStartOffset := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_Paragraphs: ISCRRuntimeParagraphs;
begin
  Result := DefaultInterface.Paragraphs;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_Paragraphs(const pVal: ISCRRuntimeParagraphs);
begin
  DefaultInterface.Paragraphs := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_FieldType: CrRuntimeFieldKindEnum;
begin
  Result := DefaultInterface.FieldType;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_FieldType(pVal: CrRuntimeFieldKindEnum);
begin
  DefaultInterface.FieldType := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_FieldValueType: CrFieldValueTypeEnum;
begin
  Result := DefaultInterface.FieldValueType;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_FieldValueType(pVal: CrFieldValueTypeEnum);
begin
  DefaultInterface.FieldValueType := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_IsConstantField: WordBool;
begin
  Result := DefaultInterface.IsConstantField;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_IsConstantField(pVal: WordBool);
begin
  DefaultInterface.IsConstantField := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_RowNumber: Integer;
begin
  Result := DefaultInterface.RowNumber;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_RowNumber(pVal: Integer);
begin
  DefaultInterface.RowNumber := pVal;
end;

function  TStringFieldObjectInstanceInGridProperties.Get_ColumnNumber: Integer;
begin
  Result := DefaultInterface.ColumnNumber;
end;

procedure TStringFieldObjectInstanceInGridProperties.Set_ColumnNumber(pVal: Integer);
begin
  DefaultInterface.ColumnNumber := pVal;
end;

{$ENDIF}

class function CoSubreportContext.Create: ISCRSubreportContext;
begin
  Result := CreateComObject(CLASS_SubreportContext) as ISCRSubreportContext;
end;

class function CoSubreportContext.CreateRemote(const MachineName: string): ISCRSubreportContext;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SubreportContext) as ISCRSubreportContext;
end;

procedure TSubreportContext.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C827B45D-BA5D-47E1-8889-AA303E654A27}';
    IntfIID:   '{6236DD50-909F-4499-B01D-3508EEF7ACF7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSubreportContext.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRSubreportContext;
  end;
end;

procedure TSubreportContext.ConnectTo(svrIntf: ISCRSubreportContext);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSubreportContext.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSubreportContext.GetDefaultInterface: ISCRSubreportContext;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSubreportContext.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSubreportContextProperties.Create(Self);
{$ENDIF}
end;

destructor TSubreportContext.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSubreportContext.GetServerProperties: TSubreportContextProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TSubreportContext.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TSubreportContext.Get_SubreportName: WideString;
begin
  Result := DefaultInterface.SubreportName;
end;

procedure TSubreportContext.Set_SubreportName(const pVal: WideString);
  { Warning: The property SubreportName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubreportName := pVal;
end;

function  TSubreportContext.Get_SubreportIndex: Integer;
begin
  Result := DefaultInterface.SubreportIndex;
end;

procedure TSubreportContext.Set_SubreportIndex(pVal: Integer);
begin
  DefaultInterface.SubreportIndex := pVal;
end;

function  TSubreportContext.Get_PageNumber: Integer;
begin
  Result := DefaultInterface.PageNumber;
end;

procedure TSubreportContext.Set_PageNumber(pVal: Integer);
begin
  DefaultInterface.PageNumber := pVal;
end;

function  TSubreportContext.Get_ContainingGroupInfo: ISCRGroupTreeNodeID;
begin
  Result := DefaultInterface.ContainingGroupInfo;
end;

procedure TSubreportContext.Set_ContainingGroupInfo(const pVal: ISCRGroupTreeNodeID);
begin
  DefaultInterface.ContainingGroupInfo := pVal;
end;

function  TSubreportContext.Clone(DeepClone: WordBool): ISCRSubreportContext;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TSubreportContext.CopyTo(const SubreportContext: ISCRSubreportContext; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(SubreportContext, DeepCopy);
end;

function  TSubreportContext.Equals(const SubreportContext: ISCRSubreportContext): WordBool;
begin
  Result := DefaultInterface.Equals(SubreportContext);
end;

procedure TSubreportContext.MatchSubreport(const context: ISCRSubreportContext; 
                                           out pMatched: WordBool);
begin
  DefaultInterface.MatchSubreport(context, pMatched);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSubreportContextProperties.Create(AServer: TSubreportContext);
begin
  inherited Create;
  FServer := AServer;
end;

function TSubreportContextProperties.GetDefaultInterface: ISCRSubreportContext;
begin
  Result := FServer.DefaultInterface;
end;

function  TSubreportContextProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TSubreportContextProperties.Get_SubreportName: WideString;
begin
  Result := DefaultInterface.SubreportName;
end;

procedure TSubreportContextProperties.Set_SubreportName(const pVal: WideString);
  { Warning: The property SubreportName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubreportName := pVal;
end;

function  TSubreportContextProperties.Get_SubreportIndex: Integer;
begin
  Result := DefaultInterface.SubreportIndex;
end;

procedure TSubreportContextProperties.Set_SubreportIndex(pVal: Integer);
begin
  DefaultInterface.SubreportIndex := pVal;
end;

function  TSubreportContextProperties.Get_PageNumber: Integer;
begin
  Result := DefaultInterface.PageNumber;
end;

procedure TSubreportContextProperties.Set_PageNumber(pVal: Integer);
begin
  DefaultInterface.PageNumber := pVal;
end;

function  TSubreportContextProperties.Get_ContainingGroupInfo: ISCRGroupTreeNodeID;
begin
  Result := DefaultInterface.ContainingGroupInfo;
end;

procedure TSubreportContextProperties.Set_ContainingGroupInfo(const pVal: ISCRGroupTreeNodeID);
begin
  DefaultInterface.ContainingGroupInfo := pVal;
end;

{$ENDIF}

class function CoLineObjectInstance.Create: ISCRDrawingObjectInstance;
begin
  Result := CreateComObject(CLASS_LineObjectInstance) as ISCRDrawingObjectInstance;
end;

class function CoLineObjectInstance.CreateRemote(const MachineName: string): ISCRDrawingObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LineObjectInstance) as ISCRDrawingObjectInstance;
end;

procedure TLineObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E6FE1508-37F5-4BE3-8890-D9CC9526E6DD}';
    IntfIID:   '{37819D51-72B4-4B03-ABB6-0AA3BB4B1FB8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLineObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRDrawingObjectInstance;
  end;
end;

procedure TLineObjectInstance.ConnectTo(svrIntf: ISCRDrawingObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TLineObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TLineObjectInstance.GetDefaultInterface: ISCRDrawingObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TLineObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TLineObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TLineObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TLineObjectInstance.GetServerProperties: TLineObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TLineObjectInstance.Get_StartX: Integer;
begin
  Result := DefaultInterface.StartX;
end;

procedure TLineObjectInstance.Set_StartX(pVal: Integer);
begin
  DefaultInterface.StartX := pVal;
end;

function  TLineObjectInstance.Get_StartY: Integer;
begin
  Result := DefaultInterface.StartY;
end;

procedure TLineObjectInstance.Set_StartY(pVal: Integer);
begin
  DefaultInterface.StartY := pVal;
end;

function  TLineObjectInstance.Get_EndX: Integer;
begin
  Result := DefaultInterface.EndX;
end;

procedure TLineObjectInstance.Set_EndX(pVal: Integer);
begin
  DefaultInterface.EndX := pVal;
end;

function  TLineObjectInstance.Get_EndY: Integer;
begin
  Result := DefaultInterface.EndY;
end;

procedure TLineObjectInstance.Set_EndY(pVal: Integer);
begin
  DefaultInterface.EndY := pVal;
end;

function  TLineObjectInstance.Get_LineColor: OLE_COLOR;
begin
  Result := DefaultInterface.LineColor;
end;

procedure TLineObjectInstance.Set_LineColor(pVal: OLE_COLOR);
begin
  DefaultInterface.LineColor := pVal;
end;

function  TLineObjectInstance.Get_LineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.LineStyle;
end;

procedure TLineObjectInstance.Set_LineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.LineStyle := pVal;
end;

function  TLineObjectInstance.Get_LineThickness: Integer;
begin
  Result := DefaultInterface.LineThickness;
end;

procedure TLineObjectInstance.Set_LineThickness(pVal: Integer);
begin
  DefaultInterface.LineThickness := pVal;
end;

function  TLineObjectInstance.Get_ObjectName: WideString;
begin
  Result := DefaultInterface.ObjectName;
end;

procedure TLineObjectInstance.Set_ObjectName(const pVal: WideString);
  { Warning: The property ObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ObjectName := pVal;
end;

function  TLineObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TLineObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TLineObjectInstanceProperties.Create(AServer: TLineObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TLineObjectInstanceProperties.GetDefaultInterface: ISCRDrawingObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TLineObjectInstanceProperties.Get_StartX: Integer;
begin
  Result := DefaultInterface.StartX;
end;

procedure TLineObjectInstanceProperties.Set_StartX(pVal: Integer);
begin
  DefaultInterface.StartX := pVal;
end;

function  TLineObjectInstanceProperties.Get_StartY: Integer;
begin
  Result := DefaultInterface.StartY;
end;

procedure TLineObjectInstanceProperties.Set_StartY(pVal: Integer);
begin
  DefaultInterface.StartY := pVal;
end;

function  TLineObjectInstanceProperties.Get_EndX: Integer;
begin
  Result := DefaultInterface.EndX;
end;

procedure TLineObjectInstanceProperties.Set_EndX(pVal: Integer);
begin
  DefaultInterface.EndX := pVal;
end;

function  TLineObjectInstanceProperties.Get_EndY: Integer;
begin
  Result := DefaultInterface.EndY;
end;

procedure TLineObjectInstanceProperties.Set_EndY(pVal: Integer);
begin
  DefaultInterface.EndY := pVal;
end;

function  TLineObjectInstanceProperties.Get_LineColor: OLE_COLOR;
begin
  Result := DefaultInterface.LineColor;
end;

procedure TLineObjectInstanceProperties.Set_LineColor(pVal: OLE_COLOR);
begin
  DefaultInterface.LineColor := pVal;
end;

function  TLineObjectInstanceProperties.Get_LineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.LineStyle;
end;

procedure TLineObjectInstanceProperties.Set_LineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.LineStyle := pVal;
end;

function  TLineObjectInstanceProperties.Get_LineThickness: Integer;
begin
  Result := DefaultInterface.LineThickness;
end;

procedure TLineObjectInstanceProperties.Set_LineThickness(pVal: Integer);
begin
  DefaultInterface.LineThickness := pVal;
end;

function  TLineObjectInstanceProperties.Get_ObjectName: WideString;
begin
  Result := DefaultInterface.ObjectName;
end;

procedure TLineObjectInstanceProperties.Set_ObjectName(const pVal: WideString);
  { Warning: The property ObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ObjectName := pVal;
end;

function  TLineObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TLineObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

{$ENDIF}

class function CoBoxObjectInstance.Create: ISCRBoxObjectInstance;
begin
  Result := CreateComObject(CLASS_BoxObjectInstance) as ISCRBoxObjectInstance;
end;

class function CoBoxObjectInstance.CreateRemote(const MachineName: string): ISCRBoxObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BoxObjectInstance) as ISCRBoxObjectInstance;
end;

procedure TBoxObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D4E1430D-779B-4EE7-A188-DDED2D4D94F5}';
    IntfIID:   '{74742555-4C6C-49CB-9D89-A47B4C737FEB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBoxObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRBoxObjectInstance;
  end;
end;

procedure TBoxObjectInstance.ConnectTo(svrIntf: ISCRBoxObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TBoxObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TBoxObjectInstance.GetDefaultInterface: ISCRBoxObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBoxObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBoxObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TBoxObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBoxObjectInstance.GetServerProperties: TBoxObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TBoxObjectInstance.Get_StartX: Integer;
begin
  Result := DefaultInterface.StartX;
end;

procedure TBoxObjectInstance.Set_StartX(pVal: Integer);
begin
  DefaultInterface.StartX := pVal;
end;

function  TBoxObjectInstance.Get_StartY: Integer;
begin
  Result := DefaultInterface.StartY;
end;

procedure TBoxObjectInstance.Set_StartY(pVal: Integer);
begin
  DefaultInterface.StartY := pVal;
end;

function  TBoxObjectInstance.Get_EndX: Integer;
begin
  Result := DefaultInterface.EndX;
end;

procedure TBoxObjectInstance.Set_EndX(pVal: Integer);
begin
  DefaultInterface.EndX := pVal;
end;

function  TBoxObjectInstance.Get_EndY: Integer;
begin
  Result := DefaultInterface.EndY;
end;

procedure TBoxObjectInstance.Set_EndY(pVal: Integer);
begin
  DefaultInterface.EndY := pVal;
end;

function  TBoxObjectInstance.Get_LineColor: OLE_COLOR;
begin
  Result := DefaultInterface.LineColor;
end;

procedure TBoxObjectInstance.Set_LineColor(pVal: OLE_COLOR);
begin
  DefaultInterface.LineColor := pVal;
end;

function  TBoxObjectInstance.Get_LineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.LineStyle;
end;

procedure TBoxObjectInstance.Set_LineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.LineStyle := pVal;
end;

function  TBoxObjectInstance.Get_LineThickness: Integer;
begin
  Result := DefaultInterface.LineThickness;
end;

procedure TBoxObjectInstance.Set_LineThickness(pVal: Integer);
begin
  DefaultInterface.LineThickness := pVal;
end;

function  TBoxObjectInstance.Get_ObjectName: WideString;
begin
  Result := DefaultInterface.ObjectName;
end;

procedure TBoxObjectInstance.Set_ObjectName(const pVal: WideString);
  { Warning: The property ObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ObjectName := pVal;
end;

function  TBoxObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TBoxObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TBoxObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TBoxObjectInstance.Get_FillColor: OLE_COLOR;
begin
  Result := DefaultInterface.FillColor;
end;

procedure TBoxObjectInstance.Set_FillColor(pVal: OLE_COLOR);
begin
  DefaultInterface.FillColor := pVal;
end;

function  TBoxObjectInstance.Get_CornerEllipseWidth: Integer;
begin
  Result := DefaultInterface.CornerEllipseWidth;
end;

procedure TBoxObjectInstance.Set_CornerEllipseWidth(pVal: Integer);
begin
  DefaultInterface.CornerEllipseWidth := pVal;
end;

function  TBoxObjectInstance.Get_CornerEllipseHeight: Integer;
begin
  Result := DefaultInterface.CornerEllipseHeight;
end;

procedure TBoxObjectInstance.Set_CornerEllipseHeight(pVal: Integer);
begin
  DefaultInterface.CornerEllipseHeight := pVal;
end;

function  TBoxObjectInstance.Get_TopClosed: WordBool;
begin
  Result := DefaultInterface.TopClosed;
end;

procedure TBoxObjectInstance.Set_TopClosed(pVal: WordBool);
begin
  DefaultInterface.TopClosed := pVal;
end;

function  TBoxObjectInstance.Get_BottomClosed: WordBool;
begin
  Result := DefaultInterface.BottomClosed;
end;

procedure TBoxObjectInstance.Set_BottomClosed(pVal: WordBool);
begin
  DefaultInterface.BottomClosed := pVal;
end;

function  TBoxObjectInstance.Get_HasDropShadow: WordBool;
begin
  Result := DefaultInterface.HasDropShadow;
end;

procedure TBoxObjectInstance.Set_HasDropShadow(pVal: WordBool);
begin
  DefaultInterface.HasDropShadow := pVal;
end;

function  TBoxObjectInstance.Clone(DeepClone: WordBool): ISCRBoxObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TBoxObjectInstance.CopyTo(const BoxObjectInstance: ISCRBoxObjectInstance; 
                                    DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(BoxObjectInstance, DeepCopy);
end;

function  TBoxObjectInstance.Equals(const BoxObjectInstance: ISCRBoxObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(BoxObjectInstance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBoxObjectInstanceProperties.Create(AServer: TBoxObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TBoxObjectInstanceProperties.GetDefaultInterface: ISCRBoxObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TBoxObjectInstanceProperties.Get_StartX: Integer;
begin
  Result := DefaultInterface.StartX;
end;

procedure TBoxObjectInstanceProperties.Set_StartX(pVal: Integer);
begin
  DefaultInterface.StartX := pVal;
end;

function  TBoxObjectInstanceProperties.Get_StartY: Integer;
begin
  Result := DefaultInterface.StartY;
end;

procedure TBoxObjectInstanceProperties.Set_StartY(pVal: Integer);
begin
  DefaultInterface.StartY := pVal;
end;

function  TBoxObjectInstanceProperties.Get_EndX: Integer;
begin
  Result := DefaultInterface.EndX;
end;

procedure TBoxObjectInstanceProperties.Set_EndX(pVal: Integer);
begin
  DefaultInterface.EndX := pVal;
end;

function  TBoxObjectInstanceProperties.Get_EndY: Integer;
begin
  Result := DefaultInterface.EndY;
end;

procedure TBoxObjectInstanceProperties.Set_EndY(pVal: Integer);
begin
  DefaultInterface.EndY := pVal;
end;

function  TBoxObjectInstanceProperties.Get_LineColor: OLE_COLOR;
begin
  Result := DefaultInterface.LineColor;
end;

procedure TBoxObjectInstanceProperties.Set_LineColor(pVal: OLE_COLOR);
begin
  DefaultInterface.LineColor := pVal;
end;

function  TBoxObjectInstanceProperties.Get_LineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.LineStyle;
end;

procedure TBoxObjectInstanceProperties.Set_LineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.LineStyle := pVal;
end;

function  TBoxObjectInstanceProperties.Get_LineThickness: Integer;
begin
  Result := DefaultInterface.LineThickness;
end;

procedure TBoxObjectInstanceProperties.Set_LineThickness(pVal: Integer);
begin
  DefaultInterface.LineThickness := pVal;
end;

function  TBoxObjectInstanceProperties.Get_ObjectName: WideString;
begin
  Result := DefaultInterface.ObjectName;
end;

procedure TBoxObjectInstanceProperties.Set_ObjectName(const pVal: WideString);
  { Warning: The property ObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ObjectName := pVal;
end;

function  TBoxObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TBoxObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TBoxObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TBoxObjectInstanceProperties.Get_FillColor: OLE_COLOR;
begin
  Result := DefaultInterface.FillColor;
end;

procedure TBoxObjectInstanceProperties.Set_FillColor(pVal: OLE_COLOR);
begin
  DefaultInterface.FillColor := pVal;
end;

function  TBoxObjectInstanceProperties.Get_CornerEllipseWidth: Integer;
begin
  Result := DefaultInterface.CornerEllipseWidth;
end;

procedure TBoxObjectInstanceProperties.Set_CornerEllipseWidth(pVal: Integer);
begin
  DefaultInterface.CornerEllipseWidth := pVal;
end;

function  TBoxObjectInstanceProperties.Get_CornerEllipseHeight: Integer;
begin
  Result := DefaultInterface.CornerEllipseHeight;
end;

procedure TBoxObjectInstanceProperties.Set_CornerEllipseHeight(pVal: Integer);
begin
  DefaultInterface.CornerEllipseHeight := pVal;
end;

function  TBoxObjectInstanceProperties.Get_TopClosed: WordBool;
begin
  Result := DefaultInterface.TopClosed;
end;

procedure TBoxObjectInstanceProperties.Set_TopClosed(pVal: WordBool);
begin
  DefaultInterface.TopClosed := pVal;
end;

function  TBoxObjectInstanceProperties.Get_BottomClosed: WordBool;
begin
  Result := DefaultInterface.BottomClosed;
end;

procedure TBoxObjectInstanceProperties.Set_BottomClosed(pVal: WordBool);
begin
  DefaultInterface.BottomClosed := pVal;
end;

function  TBoxObjectInstanceProperties.Get_HasDropShadow: WordBool;
begin
  Result := DefaultInterface.HasDropShadow;
end;

procedure TBoxObjectInstanceProperties.Set_HasDropShadow(pVal: WordBool);
begin
  DefaultInterface.HasDropShadow := pVal;
end;

{$ENDIF}

class function CoMapObjectInstance.Create: ISCRMapObjectInstance;
begin
  Result := CreateComObject(CLASS_MapObjectInstance) as ISCRMapObjectInstance;
end;

class function CoMapObjectInstance.CreateRemote(const MachineName: string): ISCRMapObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MapObjectInstance) as ISCRMapObjectInstance;
end;

procedure TMapObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9A80D649-6CA4-4DA3-ABC2-69DA7D12107B}';
    IntfIID:   '{26819CFD-089D-4884-AF2A-08C126FB9E05}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMapObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRMapObjectInstance;
  end;
end;

procedure TMapObjectInstance.ConnectTo(svrIntf: ISCRMapObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMapObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMapObjectInstance.GetDefaultInterface: ISCRMapObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMapObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMapObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TMapObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMapObjectInstance.GetServerProperties: TMapObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TMapObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TMapObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TMapObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TMapObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TMapObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TMapObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TMapObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TMapObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TMapObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TMapObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TMapObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TMapObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TMapObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TMapObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TMapObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TMapObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TMapObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TMapObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TMapObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TMapObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TMapObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TMapObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TMapObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TMapObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TMapObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TMapObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TMapObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TMapObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TMapObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TMapObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TMapObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TMapObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TMapObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TMapObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TMapObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TMapObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TMapObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TMapObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TMapObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TMapObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TMapObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TMapObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TMapObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TMapObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TMapObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TMapObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TMapObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TMapObjectInstance.Get_ImageFormat: CrImageFormatEnum;
begin
  Result := DefaultInterface.ImageFormat;
end;

procedure TMapObjectInstance.Set_ImageFormat(pVal: CrImageFormatEnum);
begin
  DefaultInterface.ImageFormat := pVal;
end;

function  TMapObjectInstance.Get_ImageData: ISequentialStream;
begin
  Result := DefaultInterface.ImageData;
end;

procedure TMapObjectInstance.Set_ImageData(const pVal: ISequentialStream);
begin
  DefaultInterface.ImageData := pVal;
end;

function  TMapObjectInstance.Get_ImageByteArray: ISCRByteArray;
begin
  Result := DefaultInterface.ImageByteArray;
end;

procedure TMapObjectInstance.Set_ImageByteArray(const pVal: ISCRByteArray);
begin
  DefaultInterface.ImageByteArray := pVal;
end;

function  TMapObjectInstance.Get_AnalysisGridType: CrAnalysisGridEnum;
begin
  Result := DefaultInterface.AnalysisGridType;
end;

procedure TMapObjectInstance.Set_AnalysisGridType(pVal: CrAnalysisGridEnum);
begin
  DefaultInterface.AnalysisGridType := pVal;
end;

function  TMapObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TMapObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                    DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TMapObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TMapObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TMapObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TMapObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                  out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TMapObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TMapObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TMapObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMapObjectInstanceProperties.Create(AServer: TMapObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TMapObjectInstanceProperties.GetDefaultInterface: ISCRMapObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TMapObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TMapObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TMapObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TMapObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TMapObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TMapObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TMapObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TMapObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TMapObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TMapObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TMapObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TMapObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TMapObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TMapObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TMapObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TMapObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TMapObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TMapObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TMapObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TMapObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TMapObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TMapObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TMapObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TMapObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TMapObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TMapObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TMapObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TMapObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TMapObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TMapObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TMapObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TMapObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TMapObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TMapObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TMapObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TMapObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TMapObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TMapObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TMapObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TMapObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TMapObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TMapObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TMapObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TMapObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TMapObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TMapObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TMapObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TMapObjectInstanceProperties.Get_ImageFormat: CrImageFormatEnum;
begin
  Result := DefaultInterface.ImageFormat;
end;

procedure TMapObjectInstanceProperties.Set_ImageFormat(pVal: CrImageFormatEnum);
begin
  DefaultInterface.ImageFormat := pVal;
end;

function  TMapObjectInstanceProperties.Get_ImageData: ISequentialStream;
begin
  Result := DefaultInterface.ImageData;
end;

procedure TMapObjectInstanceProperties.Set_ImageData(const pVal: ISequentialStream);
begin
  DefaultInterface.ImageData := pVal;
end;

function  TMapObjectInstanceProperties.Get_ImageByteArray: ISCRByteArray;
begin
  Result := DefaultInterface.ImageByteArray;
end;

procedure TMapObjectInstanceProperties.Set_ImageByteArray(const pVal: ISCRByteArray);
begin
  DefaultInterface.ImageByteArray := pVal;
end;

function  TMapObjectInstanceProperties.Get_AnalysisGridType: CrAnalysisGridEnum;
begin
  Result := DefaultInterface.AnalysisGridType;
end;

procedure TMapObjectInstanceProperties.Set_AnalysisGridType(pVal: CrAnalysisGridEnum);
begin
  DefaultInterface.AnalysisGridType := pVal;
end;

{$ENDIF}

class function CoOleObjectInstance.Create: ISCROleObjectInstance;
begin
  Result := CreateComObject(CLASS_OleObjectInstance) as ISCROleObjectInstance;
end;

class function CoOleObjectInstance.CreateRemote(const MachineName: string): ISCROleObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OleObjectInstance) as ISCROleObjectInstance;
end;

procedure TOleObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{692F3D79-D04C-4503-9F64-E2EC86BB68D5}';
    IntfIID:   '{0B40FB2E-99A4-4DB6-8E83-3EAA68942FBA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TOleObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCROleObjectInstance;
  end;
end;

procedure TOleObjectInstance.ConnectTo(svrIntf: ISCROleObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TOleObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TOleObjectInstance.GetDefaultInterface: ISCROleObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TOleObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TOleObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TOleObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TOleObjectInstance.GetServerProperties: TOleObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TOleObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TOleObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TOleObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TOleObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TOleObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TOleObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TOleObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TOleObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TOleObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TOleObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TOleObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TOleObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TOleObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TOleObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TOleObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TOleObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TOleObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TOleObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TOleObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TOleObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TOleObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TOleObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TOleObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TOleObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TOleObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TOleObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TOleObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TOleObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TOleObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TOleObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TOleObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TOleObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TOleObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TOleObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TOleObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TOleObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TOleObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TOleObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TOleObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TOleObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TOleObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TOleObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TOleObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TOleObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TOleObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TOleObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TOleObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TOleObjectInstance.Get_ImageFormat: CrImageFormatEnum;
begin
  Result := DefaultInterface.ImageFormat;
end;

procedure TOleObjectInstance.Set_ImageFormat(pVal: CrImageFormatEnum);
begin
  DefaultInterface.ImageFormat := pVal;
end;

function  TOleObjectInstance.Get_ImageData: ISequentialStream;
begin
  Result := DefaultInterface.ImageData;
end;

procedure TOleObjectInstance.Set_ImageData(const pVal: ISequentialStream);
begin
  DefaultInterface.ImageData := pVal;
end;

function  TOleObjectInstance.Get_ImageByteArray: ISCRByteArray;
begin
  Result := DefaultInterface.ImageByteArray;
end;

procedure TOleObjectInstance.Set_ImageByteArray(const pVal: ISCRByteArray);
begin
  DefaultInterface.ImageByteArray := pVal;
end;

function  TOleObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TOleObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                    DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TOleObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TOleObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TOleObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TOleObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                  out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TOleObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TOleObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TOleObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TOleObjectInstanceProperties.Create(AServer: TOleObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TOleObjectInstanceProperties.GetDefaultInterface: ISCROleObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TOleObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TOleObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TOleObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TOleObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TOleObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TOleObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TOleObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TOleObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TOleObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TOleObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TOleObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TOleObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TOleObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TOleObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TOleObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TOleObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TOleObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TOleObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TOleObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TOleObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TOleObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TOleObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TOleObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TOleObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TOleObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TOleObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TOleObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TOleObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TOleObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TOleObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TOleObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TOleObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TOleObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TOleObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TOleObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TOleObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TOleObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TOleObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TOleObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TOleObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TOleObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TOleObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TOleObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TOleObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TOleObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TOleObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TOleObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TOleObjectInstanceProperties.Get_ImageFormat: CrImageFormatEnum;
begin
  Result := DefaultInterface.ImageFormat;
end;

procedure TOleObjectInstanceProperties.Set_ImageFormat(pVal: CrImageFormatEnum);
begin
  DefaultInterface.ImageFormat := pVal;
end;

function  TOleObjectInstanceProperties.Get_ImageData: ISequentialStream;
begin
  Result := DefaultInterface.ImageData;
end;

procedure TOleObjectInstanceProperties.Set_ImageData(const pVal: ISequentialStream);
begin
  DefaultInterface.ImageData := pVal;
end;

function  TOleObjectInstanceProperties.Get_ImageByteArray: ISCRByteArray;
begin
  Result := DefaultInterface.ImageByteArray;
end;

procedure TOleObjectInstanceProperties.Set_ImageByteArray(const pVal: ISCRByteArray);
begin
  DefaultInterface.ImageByteArray := pVal;
end;

{$ENDIF}

class function CoFlashObjectInstance.Create: ISCRFlashObjectInstance;
begin
  Result := CreateComObject(CLASS_FlashObjectInstance) as ISCRFlashObjectInstance;
end;

class function CoFlashObjectInstance.CreateRemote(const MachineName: string): ISCRFlashObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FlashObjectInstance) as ISCRFlashObjectInstance;
end;

procedure TFlashObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{774965B5-A3F0-494C-86C7-A7B5126BB19F}';
    IntfIID:   '{E1368757-31F4-4AE8-819D-857F9ECEEE48}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFlashObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRFlashObjectInstance;
  end;
end;

procedure TFlashObjectInstance.ConnectTo(svrIntf: ISCRFlashObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFlashObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFlashObjectInstance.GetDefaultInterface: ISCRFlashObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFlashObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFlashObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TFlashObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFlashObjectInstance.GetServerProperties: TFlashObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TFlashObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TFlashObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TFlashObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TFlashObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TFlashObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TFlashObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TFlashObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TFlashObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TFlashObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TFlashObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TFlashObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TFlashObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TFlashObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TFlashObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TFlashObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TFlashObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TFlashObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TFlashObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TFlashObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TFlashObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TFlashObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TFlashObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TFlashObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TFlashObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TFlashObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TFlashObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TFlashObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TFlashObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TFlashObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TFlashObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TFlashObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TFlashObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TFlashObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TFlashObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TFlashObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TFlashObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TFlashObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TFlashObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TFlashObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TFlashObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TFlashObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TFlashObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TFlashObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TFlashObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TFlashObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TFlashObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TFlashObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TFlashObjectInstance.Get_ImageFormat: CrImageFormatEnum;
begin
  Result := DefaultInterface.ImageFormat;
end;

procedure TFlashObjectInstance.Set_ImageFormat(pVal: CrImageFormatEnum);
begin
  DefaultInterface.ImageFormat := pVal;
end;

function  TFlashObjectInstance.Get_ImageData: ISequentialStream;
begin
  Result := DefaultInterface.ImageData;
end;

procedure TFlashObjectInstance.Set_ImageData(const pVal: ISequentialStream);
begin
  DefaultInterface.ImageData := pVal;
end;

function  TFlashObjectInstance.Get_ImageByteArray: ISCRByteArray;
begin
  Result := DefaultInterface.ImageByteArray;
end;

procedure TFlashObjectInstance.Set_ImageByteArray(const pVal: ISCRByteArray);
begin
  DefaultInterface.ImageByteArray := pVal;
end;

function  TFlashObjectInstance.Get_SWFLocation: WideString;
begin
  Result := DefaultInterface.SWFLocation;
end;

procedure TFlashObjectInstance.Set_SWFLocation(const pVal: WideString);
  { Warning: The property SWFLocation has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SWFLocation := pVal;
end;

function  TFlashObjectInstance.Get_ParamNames: ISCRStrings;
begin
  Result := DefaultInterface.ParamNames;
end;

procedure TFlashObjectInstance.Set_ParamNames(const pVal: ISCRStrings);
begin
  DefaultInterface.ParamNames := pVal;
end;

function  TFlashObjectInstance.Get_ParamValues: ISCRStrings;
begin
  Result := DefaultInterface.ParamValues;
end;

procedure TFlashObjectInstance.Set_ParamValues(const pVal: ISCRStrings);
begin
  DefaultInterface.ParamValues := pVal;
end;

function  TFlashObjectInstance.Get_IsEmbedded: WordBool;
begin
  Result := DefaultInterface.IsEmbedded;
end;

procedure TFlashObjectInstance.Set_IsEmbedded(pVal: WordBool);
begin
  DefaultInterface.IsEmbedded := pVal;
end;

function  TFlashObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TFlashObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                      DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TFlashObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TFlashObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TFlashObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TFlashObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                    out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TFlashObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TFlashObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TFlashObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFlashObjectInstanceProperties.Create(AServer: TFlashObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TFlashObjectInstanceProperties.GetDefaultInterface: ISCRFlashObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TFlashObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TFlashObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TFlashObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TFlashObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TFlashObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TFlashObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TFlashObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TFlashObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TFlashObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TFlashObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TFlashObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TFlashObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TFlashObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TFlashObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TFlashObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TFlashObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TFlashObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TFlashObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TFlashObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TFlashObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TFlashObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TFlashObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TFlashObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TFlashObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TFlashObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TFlashObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TFlashObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TFlashObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TFlashObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TFlashObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TFlashObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TFlashObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TFlashObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TFlashObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TFlashObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TFlashObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TFlashObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TFlashObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TFlashObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TFlashObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TFlashObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TFlashObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TFlashObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TFlashObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TFlashObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TFlashObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TFlashObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TFlashObjectInstanceProperties.Get_ImageFormat: CrImageFormatEnum;
begin
  Result := DefaultInterface.ImageFormat;
end;

procedure TFlashObjectInstanceProperties.Set_ImageFormat(pVal: CrImageFormatEnum);
begin
  DefaultInterface.ImageFormat := pVal;
end;

function  TFlashObjectInstanceProperties.Get_ImageData: ISequentialStream;
begin
  Result := DefaultInterface.ImageData;
end;

procedure TFlashObjectInstanceProperties.Set_ImageData(const pVal: ISequentialStream);
begin
  DefaultInterface.ImageData := pVal;
end;

function  TFlashObjectInstanceProperties.Get_ImageByteArray: ISCRByteArray;
begin
  Result := DefaultInterface.ImageByteArray;
end;

procedure TFlashObjectInstanceProperties.Set_ImageByteArray(const pVal: ISCRByteArray);
begin
  DefaultInterface.ImageByteArray := pVal;
end;

function  TFlashObjectInstanceProperties.Get_SWFLocation: WideString;
begin
  Result := DefaultInterface.SWFLocation;
end;

procedure TFlashObjectInstanceProperties.Set_SWFLocation(const pVal: WideString);
  { Warning: The property SWFLocation has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SWFLocation := pVal;
end;

function  TFlashObjectInstanceProperties.Get_ParamNames: ISCRStrings;
begin
  Result := DefaultInterface.ParamNames;
end;

procedure TFlashObjectInstanceProperties.Set_ParamNames(const pVal: ISCRStrings);
begin
  DefaultInterface.ParamNames := pVal;
end;

function  TFlashObjectInstanceProperties.Get_ParamValues: ISCRStrings;
begin
  Result := DefaultInterface.ParamValues;
end;

procedure TFlashObjectInstanceProperties.Set_ParamValues(const pVal: ISCRStrings);
begin
  DefaultInterface.ParamValues := pVal;
end;

function  TFlashObjectInstanceProperties.Get_IsEmbedded: WordBool;
begin
  Result := DefaultInterface.IsEmbedded;
end;

procedure TFlashObjectInstanceProperties.Set_IsEmbedded(pVal: WordBool);
begin
  DefaultInterface.IsEmbedded := pVal;
end;

{$ENDIF}

class function CoBlobFieldObjectInstance.Create: ISCRBlobFieldObjectInstance;
begin
  Result := CreateComObject(CLASS_BlobFieldObjectInstance) as ISCRBlobFieldObjectInstance;
end;

class function CoBlobFieldObjectInstance.CreateRemote(const MachineName: string): ISCRBlobFieldObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BlobFieldObjectInstance) as ISCRBlobFieldObjectInstance;
end;

procedure TBlobFieldObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{25E6FEE2-3E54-4FF7-8159-E24BF9B6095D}';
    IntfIID:   '{29746F56-DE32-4B1D-80E6-C2309552C272}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBlobFieldObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRBlobFieldObjectInstance;
  end;
end;

procedure TBlobFieldObjectInstance.ConnectTo(svrIntf: ISCRBlobFieldObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TBlobFieldObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TBlobFieldObjectInstance.GetDefaultInterface: ISCRBlobFieldObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBlobFieldObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBlobFieldObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TBlobFieldObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBlobFieldObjectInstance.GetServerProperties: TBlobFieldObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TBlobFieldObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TBlobFieldObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TBlobFieldObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TBlobFieldObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TBlobFieldObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TBlobFieldObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TBlobFieldObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TBlobFieldObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TBlobFieldObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TBlobFieldObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TBlobFieldObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TBlobFieldObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TBlobFieldObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TBlobFieldObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TBlobFieldObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TBlobFieldObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TBlobFieldObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TBlobFieldObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TBlobFieldObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TBlobFieldObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TBlobFieldObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TBlobFieldObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TBlobFieldObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TBlobFieldObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TBlobFieldObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TBlobFieldObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TBlobFieldObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TBlobFieldObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TBlobFieldObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TBlobFieldObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TBlobFieldObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TBlobFieldObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TBlobFieldObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TBlobFieldObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TBlobFieldObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TBlobFieldObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TBlobFieldObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TBlobFieldObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TBlobFieldObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TBlobFieldObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TBlobFieldObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TBlobFieldObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TBlobFieldObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TBlobFieldObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TBlobFieldObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TBlobFieldObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TBlobFieldObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TBlobFieldObjectInstance.Get_ImageFormat: CrImageFormatEnum;
begin
  Result := DefaultInterface.ImageFormat;
end;

procedure TBlobFieldObjectInstance.Set_ImageFormat(pVal: CrImageFormatEnum);
begin
  DefaultInterface.ImageFormat := pVal;
end;

function  TBlobFieldObjectInstance.Get_ImageData: ISequentialStream;
begin
  Result := DefaultInterface.ImageData;
end;

procedure TBlobFieldObjectInstance.Set_ImageData(const pVal: ISequentialStream);
begin
  DefaultInterface.ImageData := pVal;
end;

function  TBlobFieldObjectInstance.Get_ImageByteArray: ISCRByteArray;
begin
  Result := DefaultInterface.ImageByteArray;
end;

procedure TBlobFieldObjectInstance.Set_ImageByteArray(const pVal: ISCRByteArray);
begin
  DefaultInterface.ImageByteArray := pVal;
end;

function  TBlobFieldObjectInstance.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TBlobFieldObjectInstance.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

function  TBlobFieldObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TBlobFieldObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                          DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TBlobFieldObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TBlobFieldObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TBlobFieldObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TBlobFieldObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                        out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TBlobFieldObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TBlobFieldObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TBlobFieldObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBlobFieldObjectInstanceProperties.Create(AServer: TBlobFieldObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TBlobFieldObjectInstanceProperties.GetDefaultInterface: ISCRBlobFieldObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TBlobFieldObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TBlobFieldObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TBlobFieldObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TBlobFieldObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TBlobFieldObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TBlobFieldObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TBlobFieldObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TBlobFieldObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TBlobFieldObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TBlobFieldObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TBlobFieldObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TBlobFieldObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TBlobFieldObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TBlobFieldObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TBlobFieldObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TBlobFieldObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TBlobFieldObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TBlobFieldObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TBlobFieldObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TBlobFieldObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TBlobFieldObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TBlobFieldObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TBlobFieldObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TBlobFieldObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TBlobFieldObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TBlobFieldObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TBlobFieldObjectInstanceProperties.Get_ImageFormat: CrImageFormatEnum;
begin
  Result := DefaultInterface.ImageFormat;
end;

procedure TBlobFieldObjectInstanceProperties.Set_ImageFormat(pVal: CrImageFormatEnum);
begin
  DefaultInterface.ImageFormat := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_ImageData: ISequentialStream;
begin
  Result := DefaultInterface.ImageData;
end;

procedure TBlobFieldObjectInstanceProperties.Set_ImageData(const pVal: ISequentialStream);
begin
  DefaultInterface.ImageData := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_ImageByteArray: ISCRByteArray;
begin
  Result := DefaultInterface.ImageByteArray;
end;

procedure TBlobFieldObjectInstanceProperties.Set_ImageByteArray(const pVal: ISCRByteArray);
begin
  DefaultInterface.ImageByteArray := pVal;
end;

function  TBlobFieldObjectInstanceProperties.Get_FieldName: WideString;
begin
  Result := DefaultInterface.FieldName;
end;

procedure TBlobFieldObjectInstanceProperties.Set_FieldName(const pVal: WideString);
  { Warning: The property FieldName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FieldName := pVal;
end;

{$ENDIF}

class function CoGridRowInstance.Create: ISCRGridRowInstance;
begin
  Result := CreateComObject(CLASS_GridRowInstance) as ISCRGridRowInstance;
end;

class function CoGridRowInstance.CreateRemote(const MachineName: string): ISCRGridRowInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GridRowInstance) as ISCRGridRowInstance;
end;

procedure TGridRowInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{50A4B4C6-D293-4BF5-BE81-7130E82E86A8}';
    IntfIID:   '{F943819E-EC22-4C6A-BBD2-8389CC7BD7EA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGridRowInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRGridRowInstance;
  end;
end;

procedure TGridRowInstance.ConnectTo(svrIntf: ISCRGridRowInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGridRowInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGridRowInstance.GetDefaultInterface: ISCRGridRowInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGridRowInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGridRowInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TGridRowInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGridRowInstance.GetServerProperties: TGridRowInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TGridRowInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGridRowInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TGridRowInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TGridRowInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TGridRowInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TGridRowInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TGridRowInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TGridRowInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TGridRowInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TGridRowInstance.Get_BackgroundColor: OLE_COLOR;
begin
  Result := DefaultInterface.BackgroundColor;
end;

procedure TGridRowInstance.Set_BackgroundColor(pVal: OLE_COLOR);
begin
  DefaultInterface.BackgroundColor := pVal;
end;

function  TGridRowInstance.Get_RowNumber: Integer;
begin
  Result := DefaultInterface.RowNumber;
end;

procedure TGridRowInstance.Set_RowNumber(pVal: Integer);
begin
  DefaultInterface.RowNumber := pVal;
end;

function  TGridRowInstance.Get_IsGrandTotalRow: WordBool;
begin
  Result := DefaultInterface.IsGrandTotalRow;
end;

procedure TGridRowInstance.Set_IsGrandTotalRow(pVal: WordBool);
begin
  DefaultInterface.IsGrandTotalRow := pVal;
end;

function  TGridRowInstance.Clone(DeepClone: WordBool): ISCRGridAreaInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TGridRowInstance.CopyTo(const GridAreaInstance: ISCRGridAreaInstance; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(GridAreaInstance, DeepCopy);
end;

function  TGridRowInstance.Equals(const GridAreaInstance: ISCRGridAreaInstance): WordBool;
begin
  Result := DefaultInterface.Equals(GridAreaInstance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGridRowInstanceProperties.Create(AServer: TGridRowInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TGridRowInstanceProperties.GetDefaultInterface: ISCRGridRowInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TGridRowInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGridRowInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TGridRowInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TGridRowInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TGridRowInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TGridRowInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TGridRowInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TGridRowInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TGridRowInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TGridRowInstanceProperties.Get_BackgroundColor: OLE_COLOR;
begin
  Result := DefaultInterface.BackgroundColor;
end;

procedure TGridRowInstanceProperties.Set_BackgroundColor(pVal: OLE_COLOR);
begin
  DefaultInterface.BackgroundColor := pVal;
end;

function  TGridRowInstanceProperties.Get_RowNumber: Integer;
begin
  Result := DefaultInterface.RowNumber;
end;

procedure TGridRowInstanceProperties.Set_RowNumber(pVal: Integer);
begin
  DefaultInterface.RowNumber := pVal;
end;

function  TGridRowInstanceProperties.Get_IsGrandTotalRow: WordBool;
begin
  Result := DefaultInterface.IsGrandTotalRow;
end;

procedure TGridRowInstanceProperties.Set_IsGrandTotalRow(pVal: WordBool);
begin
  DefaultInterface.IsGrandTotalRow := pVal;
end;

{$ENDIF}

class function CoGridColumnInstance.Create: ISCRGridColumnInstance;
begin
  Result := CreateComObject(CLASS_GridColumnInstance) as ISCRGridColumnInstance;
end;

class function CoGridColumnInstance.CreateRemote(const MachineName: string): ISCRGridColumnInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GridColumnInstance) as ISCRGridColumnInstance;
end;

procedure TGridColumnInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2ED106E0-4AA4-4AB1-BF51-052AA914DCE3}';
    IntfIID:   '{E6B94A8B-A025-45AC-827A-B2386DAB3821}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGridColumnInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRGridColumnInstance;
  end;
end;

procedure TGridColumnInstance.ConnectTo(svrIntf: ISCRGridColumnInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGridColumnInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGridColumnInstance.GetDefaultInterface: ISCRGridColumnInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGridColumnInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGridColumnInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TGridColumnInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGridColumnInstance.GetServerProperties: TGridColumnInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TGridColumnInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGridColumnInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TGridColumnInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TGridColumnInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TGridColumnInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TGridColumnInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TGridColumnInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TGridColumnInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TGridColumnInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TGridColumnInstance.Get_BackgroundColor: OLE_COLOR;
begin
  Result := DefaultInterface.BackgroundColor;
end;

procedure TGridColumnInstance.Set_BackgroundColor(pVal: OLE_COLOR);
begin
  DefaultInterface.BackgroundColor := pVal;
end;

function  TGridColumnInstance.Get_ColumnNumber: Integer;
begin
  Result := DefaultInterface.ColumnNumber;
end;

procedure TGridColumnInstance.Set_ColumnNumber(pVal: Integer);
begin
  DefaultInterface.ColumnNumber := pVal;
end;

function  TGridColumnInstance.Get_IsGrandTotalColumn: WordBool;
begin
  Result := DefaultInterface.IsGrandTotalColumn;
end;

procedure TGridColumnInstance.Set_IsGrandTotalColumn(pVal: WordBool);
begin
  DefaultInterface.IsGrandTotalColumn := pVal;
end;

function  TGridColumnInstance.Clone(DeepClone: WordBool): ISCRGridAreaInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TGridColumnInstance.CopyTo(const GridAreaInstance: ISCRGridAreaInstance; 
                                     DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(GridAreaInstance, DeepCopy);
end;

function  TGridColumnInstance.Equals(const GridAreaInstance: ISCRGridAreaInstance): WordBool;
begin
  Result := DefaultInterface.Equals(GridAreaInstance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGridColumnInstanceProperties.Create(AServer: TGridColumnInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TGridColumnInstanceProperties.GetDefaultInterface: ISCRGridColumnInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TGridColumnInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGridColumnInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TGridColumnInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TGridColumnInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TGridColumnInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TGridColumnInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TGridColumnInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TGridColumnInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TGridColumnInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TGridColumnInstanceProperties.Get_BackgroundColor: OLE_COLOR;
begin
  Result := DefaultInterface.BackgroundColor;
end;

procedure TGridColumnInstanceProperties.Set_BackgroundColor(pVal: OLE_COLOR);
begin
  DefaultInterface.BackgroundColor := pVal;
end;

function  TGridColumnInstanceProperties.Get_ColumnNumber: Integer;
begin
  Result := DefaultInterface.ColumnNumber;
end;

procedure TGridColumnInstanceProperties.Set_ColumnNumber(pVal: Integer);
begin
  DefaultInterface.ColumnNumber := pVal;
end;

function  TGridColumnInstanceProperties.Get_IsGrandTotalColumn: WordBool;
begin
  Result := DefaultInterface.IsGrandTotalColumn;
end;

procedure TGridColumnInstanceProperties.Set_IsGrandTotalColumn(pVal: WordBool);
begin
  DefaultInterface.IsGrandTotalColumn := pVal;
end;

{$ENDIF}

class function CoGridLabelInstance.Create: ISCRGridLabelInstance;
begin
  Result := CreateComObject(CLASS_GridLabelInstance) as ISCRGridLabelInstance;
end;

class function CoGridLabelInstance.CreateRemote(const MachineName: string): ISCRGridLabelInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GridLabelInstance) as ISCRGridLabelInstance;
end;

procedure TGridLabelInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FABF43AC-2F86-4A33-A303-9EF22CECDDE6}';
    IntfIID:   '{10C7A28B-B50F-440F-82D4-65F16D80F9B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGridLabelInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRGridLabelInstance;
  end;
end;

procedure TGridLabelInstance.ConnectTo(svrIntf: ISCRGridLabelInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGridLabelInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGridLabelInstance.GetDefaultInterface: ISCRGridLabelInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGridLabelInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGridLabelInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TGridLabelInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGridLabelInstance.GetServerProperties: TGridLabelInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TGridLabelInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGridLabelInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TGridLabelInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TGridLabelInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TGridLabelInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TGridLabelInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TGridLabelInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TGridLabelInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TGridLabelInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TGridLabelInstance.Get_BackgroundColor: OLE_COLOR;
begin
  Result := DefaultInterface.BackgroundColor;
end;

procedure TGridLabelInstance.Set_BackgroundColor(pVal: OLE_COLOR);
begin
  DefaultInterface.BackgroundColor := pVal;
end;

function  TGridLabelInstance.Get_StartRowNumber: Integer;
begin
  Result := DefaultInterface.StartRowNumber;
end;

procedure TGridLabelInstance.Set_StartRowNumber(pVal: Integer);
begin
  DefaultInterface.StartRowNumber := pVal;
end;

function  TGridLabelInstance.Get_EndRowNumber: Integer;
begin
  Result := DefaultInterface.EndRowNumber;
end;

procedure TGridLabelInstance.Set_EndRowNumber(pVal: Integer);
begin
  DefaultInterface.EndRowNumber := pVal;
end;

function  TGridLabelInstance.Get_StartColumnNumber: Integer;
begin
  Result := DefaultInterface.StartColumnNumber;
end;

procedure TGridLabelInstance.Set_StartColumnNumber(pVal: Integer);
begin
  DefaultInterface.StartColumnNumber := pVal;
end;

function  TGridLabelInstance.Get_EndColumnNumber: Integer;
begin
  Result := DefaultInterface.EndColumnNumber;
end;

procedure TGridLabelInstance.Set_EndColumnNumber(pVal: Integer);
begin
  DefaultInterface.EndColumnNumber := pVal;
end;

function  TGridLabelInstance.Get_HasText: WordBool;
begin
  Result := DefaultInterface.HasText;
end;

procedure TGridLabelInstance.Set_HasText(pVal: WordBool);
begin
  DefaultInterface.HasText := pVal;
end;

function  TGridLabelInstance.Clone(DeepClone: WordBool): ISCRGridAreaInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TGridLabelInstance.CopyTo(const GridAreaInstance: ISCRGridAreaInstance; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(GridAreaInstance, DeepCopy);
end;

function  TGridLabelInstance.Equals(const GridAreaInstance: ISCRGridAreaInstance): WordBool;
begin
  Result := DefaultInterface.Equals(GridAreaInstance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGridLabelInstanceProperties.Create(AServer: TGridLabelInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TGridLabelInstanceProperties.GetDefaultInterface: ISCRGridLabelInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TGridLabelInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGridLabelInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TGridLabelInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TGridLabelInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TGridLabelInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TGridLabelInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TGridLabelInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TGridLabelInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TGridLabelInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TGridLabelInstanceProperties.Get_BackgroundColor: OLE_COLOR;
begin
  Result := DefaultInterface.BackgroundColor;
end;

procedure TGridLabelInstanceProperties.Set_BackgroundColor(pVal: OLE_COLOR);
begin
  DefaultInterface.BackgroundColor := pVal;
end;

function  TGridLabelInstanceProperties.Get_StartRowNumber: Integer;
begin
  Result := DefaultInterface.StartRowNumber;
end;

procedure TGridLabelInstanceProperties.Set_StartRowNumber(pVal: Integer);
begin
  DefaultInterface.StartRowNumber := pVal;
end;

function  TGridLabelInstanceProperties.Get_EndRowNumber: Integer;
begin
  Result := DefaultInterface.EndRowNumber;
end;

procedure TGridLabelInstanceProperties.Set_EndRowNumber(pVal: Integer);
begin
  DefaultInterface.EndRowNumber := pVal;
end;

function  TGridLabelInstanceProperties.Get_StartColumnNumber: Integer;
begin
  Result := DefaultInterface.StartColumnNumber;
end;

procedure TGridLabelInstanceProperties.Set_StartColumnNumber(pVal: Integer);
begin
  DefaultInterface.StartColumnNumber := pVal;
end;

function  TGridLabelInstanceProperties.Get_EndColumnNumber: Integer;
begin
  Result := DefaultInterface.EndColumnNumber;
end;

procedure TGridLabelInstanceProperties.Set_EndColumnNumber(pVal: Integer);
begin
  DefaultInterface.EndColumnNumber := pVal;
end;

function  TGridLabelInstanceProperties.Get_HasText: WordBool;
begin
  Result := DefaultInterface.HasText;
end;

procedure TGridLabelInstanceProperties.Set_HasText(pVal: WordBool);
begin
  DefaultInterface.HasText := pVal;
end;

{$ENDIF}

class function CoGridAreaInstances.Create: ISCRGridAreaInstances;
begin
  Result := CreateComObject(CLASS_GridAreaInstances) as ISCRGridAreaInstances;
end;

class function CoGridAreaInstances.CreateRemote(const MachineName: string): ISCRGridAreaInstances;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GridAreaInstances) as ISCRGridAreaInstances;
end;

procedure TGridAreaInstances.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{522DC01A-E879-4A5F-B8A7-98C34F376131}';
    IntfIID:   '{22B018CE-4157-4882-B497-78F5D1FD6E27}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGridAreaInstances.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRGridAreaInstances;
  end;
end;

procedure TGridAreaInstances.ConnectTo(svrIntf: ISCRGridAreaInstances);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGridAreaInstances.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGridAreaInstances.GetDefaultInterface: ISCRGridAreaInstances;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGridAreaInstances.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGridAreaInstancesProperties.Create(Self);
{$ENDIF}
end;

destructor TGridAreaInstances.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGridAreaInstances.GetServerProperties: TGridAreaInstancesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TGridAreaInstances.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGridAreaInstances.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TGridAreaInstances.Get_Item(Index: Integer): ISCRGridAreaInstance;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TGridAreaInstances.Set_Item(Index: Integer; const ppVal: ISCRGridAreaInstance);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TGridAreaInstances.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TGridAreaInstances.Clone(DeepClone: WordBool): ISCRGridAreaInstances;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TGridAreaInstances.CopyTo(const GridAreaInstances: ISCRGridAreaInstances; 
                                    DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(GridAreaInstances, DeepCopy);
end;

function  TGridAreaInstances.Equals(const GridAreaInstances: ISCRGridAreaInstances): WordBool;
begin
  Result := DefaultInterface.Equals(GridAreaInstances);
end;

procedure TGridAreaInstances.Add(const GridAreaInstance: ISCRGridAreaInstance);
begin
  DefaultInterface.Add(GridAreaInstance);
end;

procedure TGridAreaInstances.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TGridAreaInstances.Insert(Index: Integer; const GridAreaInstance: ISCRGridAreaInstance);
begin
  DefaultInterface.Insert(Index, GridAreaInstance);
end;

procedure TGridAreaInstances.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TGridAreaInstances.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TGridAreaInstances.FindIndexOf(const GridAreaInstance: ISCRGridAreaInstance): Integer;
begin
  Result := DefaultInterface.FindIndexOf(GridAreaInstance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGridAreaInstancesProperties.Create(AServer: TGridAreaInstances);
begin
  inherited Create;
  FServer := AServer;
end;

function TGridAreaInstancesProperties.GetDefaultInterface: ISCRGridAreaInstances;
begin
  Result := FServer.DefaultInterface;
end;

function  TGridAreaInstancesProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGridAreaInstancesProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TGridAreaInstancesProperties.Get_Item(Index: Integer): ISCRGridAreaInstance;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TGridAreaInstancesProperties.Set_Item(Index: Integer; const ppVal: ISCRGridAreaInstance);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TGridAreaInstancesProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoGridLineInstance.Create: ISCRGridLineInstance;
begin
  Result := CreateComObject(CLASS_GridLineInstance) as ISCRGridLineInstance;
end;

class function CoGridLineInstance.CreateRemote(const MachineName: string): ISCRGridLineInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GridLineInstance) as ISCRGridLineInstance;
end;

procedure TGridLineInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3230FAD3-FB36-4BA4-8A8C-7174698E511B}';
    IntfIID:   '{808C3FBD-1A2A-43AF-AD6E-F16DC577022A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGridLineInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRGridLineInstance;
  end;
end;

procedure TGridLineInstance.ConnectTo(svrIntf: ISCRGridLineInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGridLineInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGridLineInstance.GetDefaultInterface: ISCRGridLineInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGridLineInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGridLineInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TGridLineInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGridLineInstance.GetServerProperties: TGridLineInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TGridLineInstance.Get_StartX: Integer;
begin
  Result := DefaultInterface.StartX;
end;

procedure TGridLineInstance.Set_StartX(pVal: Integer);
begin
  DefaultInterface.StartX := pVal;
end;

function  TGridLineInstance.Get_StartY: Integer;
begin
  Result := DefaultInterface.StartY;
end;

procedure TGridLineInstance.Set_StartY(pVal: Integer);
begin
  DefaultInterface.StartY := pVal;
end;

function  TGridLineInstance.Get_EndX: Integer;
begin
  Result := DefaultInterface.EndX;
end;

procedure TGridLineInstance.Set_EndX(pVal: Integer);
begin
  DefaultInterface.EndX := pVal;
end;

function  TGridLineInstance.Get_EndY: Integer;
begin
  Result := DefaultInterface.EndY;
end;

procedure TGridLineInstance.Set_EndY(pVal: Integer);
begin
  DefaultInterface.EndY := pVal;
end;

function  TGridLineInstance.Get_LineColor: OLE_COLOR;
begin
  Result := DefaultInterface.LineColor;
end;

procedure TGridLineInstance.Set_LineColor(pVal: OLE_COLOR);
begin
  DefaultInterface.LineColor := pVal;
end;

function  TGridLineInstance.Get_LineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.LineStyle;
end;

procedure TGridLineInstance.Set_LineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.LineStyle := pVal;
end;

function  TGridLineInstance.Get_LineThickness: Integer;
begin
  Result := DefaultInterface.LineThickness;
end;

procedure TGridLineInstance.Set_LineThickness(pVal: Integer);
begin
  DefaultInterface.LineThickness := pVal;
end;

function  TGridLineInstance.Get_ObjectName: WideString;
begin
  Result := DefaultInterface.ObjectName;
end;

procedure TGridLineInstance.Set_ObjectName(const pVal: WideString);
  { Warning: The property ObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ObjectName := pVal;
end;

function  TGridLineInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TGridLineInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TGridLineInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGridLineInstance.Get_GridLineType: CrGridLineEnum;
begin
  Result := DefaultInterface.GridLineType;
end;

procedure TGridLineInstance.Set_GridLineType(pVal: CrGridLineEnum);
begin
  DefaultInterface.GridLineType := pVal;
end;

function  TGridLineInstance.Clone(DeepClone: WordBool): ISCRGridLineInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TGridLineInstance.CopyTo(const GridLineInstance: ISCRGridLineInstance; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(GridLineInstance, DeepCopy);
end;

function  TGridLineInstance.Equals(const GridLineInstance: ISCRGridLineInstance): WordBool;
begin
  Result := DefaultInterface.Equals(GridLineInstance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGridLineInstanceProperties.Create(AServer: TGridLineInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TGridLineInstanceProperties.GetDefaultInterface: ISCRGridLineInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TGridLineInstanceProperties.Get_StartX: Integer;
begin
  Result := DefaultInterface.StartX;
end;

procedure TGridLineInstanceProperties.Set_StartX(pVal: Integer);
begin
  DefaultInterface.StartX := pVal;
end;

function  TGridLineInstanceProperties.Get_StartY: Integer;
begin
  Result := DefaultInterface.StartY;
end;

procedure TGridLineInstanceProperties.Set_StartY(pVal: Integer);
begin
  DefaultInterface.StartY := pVal;
end;

function  TGridLineInstanceProperties.Get_EndX: Integer;
begin
  Result := DefaultInterface.EndX;
end;

procedure TGridLineInstanceProperties.Set_EndX(pVal: Integer);
begin
  DefaultInterface.EndX := pVal;
end;

function  TGridLineInstanceProperties.Get_EndY: Integer;
begin
  Result := DefaultInterface.EndY;
end;

procedure TGridLineInstanceProperties.Set_EndY(pVal: Integer);
begin
  DefaultInterface.EndY := pVal;
end;

function  TGridLineInstanceProperties.Get_LineColor: OLE_COLOR;
begin
  Result := DefaultInterface.LineColor;
end;

procedure TGridLineInstanceProperties.Set_LineColor(pVal: OLE_COLOR);
begin
  DefaultInterface.LineColor := pVal;
end;

function  TGridLineInstanceProperties.Get_LineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.LineStyle;
end;

procedure TGridLineInstanceProperties.Set_LineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.LineStyle := pVal;
end;

function  TGridLineInstanceProperties.Get_LineThickness: Integer;
begin
  Result := DefaultInterface.LineThickness;
end;

procedure TGridLineInstanceProperties.Set_LineThickness(pVal: Integer);
begin
  DefaultInterface.LineThickness := pVal;
end;

function  TGridLineInstanceProperties.Get_ObjectName: WideString;
begin
  Result := DefaultInterface.ObjectName;
end;

procedure TGridLineInstanceProperties.Set_ObjectName(const pVal: WideString);
  { Warning: The property ObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ObjectName := pVal;
end;

function  TGridLineInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TGridLineInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TGridLineInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGridLineInstanceProperties.Get_GridLineType: CrGridLineEnum;
begin
  Result := DefaultInterface.GridLineType;
end;

procedure TGridLineInstanceProperties.Set_GridLineType(pVal: CrGridLineEnum);
begin
  DefaultInterface.GridLineType := pVal;
end;

{$ENDIF}

class function CoGridLineInstances.Create: ISCRGridLineInstances;
begin
  Result := CreateComObject(CLASS_GridLineInstances) as ISCRGridLineInstances;
end;

class function CoGridLineInstances.CreateRemote(const MachineName: string): ISCRGridLineInstances;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GridLineInstances) as ISCRGridLineInstances;
end;

procedure TGridLineInstances.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E85C5868-F8F2-44E9-BCBE-DC8EDFEF1580}';
    IntfIID:   '{BA460C53-DC28-40E1-80E1-788C7BAE6131}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGridLineInstances.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRGridLineInstances;
  end;
end;

procedure TGridLineInstances.ConnectTo(svrIntf: ISCRGridLineInstances);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGridLineInstances.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGridLineInstances.GetDefaultInterface: ISCRGridLineInstances;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGridLineInstances.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGridLineInstancesProperties.Create(Self);
{$ENDIF}
end;

destructor TGridLineInstances.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGridLineInstances.GetServerProperties: TGridLineInstancesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TGridLineInstances.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGridLineInstances.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TGridLineInstances.Get_Item(Index: Integer): ISCRGridLineInstance;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TGridLineInstances.Set_Item(Index: Integer; const ppVal: ISCRGridLineInstance);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TGridLineInstances.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TGridLineInstances.Clone(DeepClone: WordBool): ISCRGridLineInstances;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TGridLineInstances.CopyTo(const GridLineInstances: ISCRGridLineInstances; 
                                    DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(GridLineInstances, DeepCopy);
end;

function  TGridLineInstances.Equals(const GridLineInstances: ISCRGridLineInstances): WordBool;
begin
  Result := DefaultInterface.Equals(GridLineInstances);
end;

procedure TGridLineInstances.Add(const GridLineInstance: ISCRGridLineInstance);
begin
  DefaultInterface.Add(GridLineInstance);
end;

procedure TGridLineInstances.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TGridLineInstances.Insert(Index: Integer; const GridLineInstance: ISCRGridLineInstance);
begin
  DefaultInterface.Insert(Index, GridLineInstance);
end;

procedure TGridLineInstances.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TGridLineInstances.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TGridLineInstances.FindIndexOf(const GridLineInstance: ISCRGridLineInstance): Integer;
begin
  Result := DefaultInterface.FindIndexOf(GridLineInstance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGridLineInstancesProperties.Create(AServer: TGridLineInstances);
begin
  inherited Create;
  FServer := AServer;
end;

function TGridLineInstancesProperties.GetDefaultInterface: ISCRGridLineInstances;
begin
  Result := FServer.DefaultInterface;
end;

function  TGridLineInstancesProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGridLineInstancesProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TGridLineInstancesProperties.Get_Item(Index: Integer): ISCRGridLineInstance;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TGridLineInstancesProperties.Set_Item(Index: Integer; const ppVal: ISCRGridLineInstance);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TGridLineInstancesProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCrossTabObjectInstance.Create: ISCRCrossTabObjectInstance;
begin
  Result := CreateComObject(CLASS_CrossTabObjectInstance) as ISCRCrossTabObjectInstance;
end;

class function CoCrossTabObjectInstance.CreateRemote(const MachineName: string): ISCRCrossTabObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CrossTabObjectInstance) as ISCRCrossTabObjectInstance;
end;

procedure TCrossTabObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A2B2EBBE-F906-49DD-A06E-15F62B3F6459}';
    IntfIID:   '{13814FB8-6F31-48EF-B645-FAB11C3E915C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCrossTabObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRCrossTabObjectInstance;
  end;
end;

procedure TCrossTabObjectInstance.ConnectTo(svrIntf: ISCRCrossTabObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCrossTabObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCrossTabObjectInstance.GetDefaultInterface: ISCRCrossTabObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCrossTabObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCrossTabObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TCrossTabObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCrossTabObjectInstance.GetServerProperties: TCrossTabObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TCrossTabObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TCrossTabObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TCrossTabObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TCrossTabObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TCrossTabObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TCrossTabObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TCrossTabObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TCrossTabObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TCrossTabObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TCrossTabObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TCrossTabObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TCrossTabObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TCrossTabObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TCrossTabObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TCrossTabObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TCrossTabObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TCrossTabObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TCrossTabObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TCrossTabObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TCrossTabObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TCrossTabObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TCrossTabObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TCrossTabObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TCrossTabObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TCrossTabObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TCrossTabObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TCrossTabObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TCrossTabObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TCrossTabObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TCrossTabObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TCrossTabObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TCrossTabObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TCrossTabObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TCrossTabObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TCrossTabObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TCrossTabObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TCrossTabObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TCrossTabObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TCrossTabObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TCrossTabObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TCrossTabObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TCrossTabObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TCrossTabObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TCrossTabObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TCrossTabObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TCrossTabObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TCrossTabObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TCrossTabObjectInstance.Get_GridAreas: ISCRGridAreaInstances;
begin
  Result := DefaultInterface.GridAreas;
end;

procedure TCrossTabObjectInstance.Set_GridAreas(const pVal: ISCRGridAreaInstances);
begin
  DefaultInterface.GridAreas := pVal;
end;

function  TCrossTabObjectInstance.Get_GridLines: ISCRGridLineInstances;
begin
  Result := DefaultInterface.GridLines;
end;

procedure TCrossTabObjectInstance.Set_GridLines(const pVal: ISCRGridLineInstances);
begin
  DefaultInterface.GridLines := pVal;
end;

function  TCrossTabObjectInstance.Get_InGridReportObjectInstances: ISCRReportObjectInstances;
begin
  Result := DefaultInterface.InGridReportObjectInstances;
end;

procedure TCrossTabObjectInstance.Set_InGridReportObjectInstances(const pVal: ISCRReportObjectInstances);
begin
  DefaultInterface.InGridReportObjectInstances := pVal;
end;

function  TCrossTabObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TCrossTabObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                         DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TCrossTabObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TCrossTabObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TCrossTabObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TCrossTabObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                       out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TCrossTabObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TCrossTabObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TCrossTabObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCrossTabObjectInstanceProperties.Create(AServer: TCrossTabObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TCrossTabObjectInstanceProperties.GetDefaultInterface: ISCRCrossTabObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TCrossTabObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TCrossTabObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TCrossTabObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TCrossTabObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TCrossTabObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TCrossTabObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TCrossTabObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TCrossTabObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TCrossTabObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TCrossTabObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TCrossTabObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TCrossTabObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TCrossTabObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TCrossTabObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TCrossTabObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TCrossTabObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TCrossTabObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TCrossTabObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TCrossTabObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TCrossTabObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TCrossTabObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TCrossTabObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TCrossTabObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TCrossTabObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TCrossTabObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TCrossTabObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TCrossTabObjectInstanceProperties.Get_GridAreas: ISCRGridAreaInstances;
begin
  Result := DefaultInterface.GridAreas;
end;

procedure TCrossTabObjectInstanceProperties.Set_GridAreas(const pVal: ISCRGridAreaInstances);
begin
  DefaultInterface.GridAreas := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_GridLines: ISCRGridLineInstances;
begin
  Result := DefaultInterface.GridLines;
end;

procedure TCrossTabObjectInstanceProperties.Set_GridLines(const pVal: ISCRGridLineInstances);
begin
  DefaultInterface.GridLines := pVal;
end;

function  TCrossTabObjectInstanceProperties.Get_InGridReportObjectInstances: ISCRReportObjectInstances;
begin
  Result := DefaultInterface.InGridReportObjectInstances;
end;

procedure TCrossTabObjectInstanceProperties.Set_InGridReportObjectInstances(const pVal: ISCRReportObjectInstances);
begin
  DefaultInterface.InGridReportObjectInstances := pVal;
end;

{$ENDIF}

class function CoOlapObjectInstance.Create: ISCROlapObjectInstance;
begin
  Result := CreateComObject(CLASS_OlapObjectInstance) as ISCROlapObjectInstance;
end;

class function CoOlapObjectInstance.CreateRemote(const MachineName: string): ISCROlapObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OlapObjectInstance) as ISCROlapObjectInstance;
end;

procedure TOlapObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{378E48BD-E52C-4482-8A29-4765CC739374}';
    IntfIID:   '{DE286594-9688-4D73-963C-D4549F792CBC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TOlapObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCROlapObjectInstance;
  end;
end;

procedure TOlapObjectInstance.ConnectTo(svrIntf: ISCROlapObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TOlapObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TOlapObjectInstance.GetDefaultInterface: ISCROlapObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TOlapObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TOlapObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TOlapObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TOlapObjectInstance.GetServerProperties: TOlapObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TOlapObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TOlapObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TOlapObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TOlapObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TOlapObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TOlapObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TOlapObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TOlapObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TOlapObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TOlapObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TOlapObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TOlapObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TOlapObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TOlapObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TOlapObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TOlapObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TOlapObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TOlapObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TOlapObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TOlapObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TOlapObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TOlapObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TOlapObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TOlapObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TOlapObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TOlapObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TOlapObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TOlapObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TOlapObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TOlapObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TOlapObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TOlapObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TOlapObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TOlapObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TOlapObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TOlapObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TOlapObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TOlapObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TOlapObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TOlapObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TOlapObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TOlapObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TOlapObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TOlapObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TOlapObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TOlapObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TOlapObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TOlapObjectInstance.Get_SectionHeadingInstance: ISCROlapSectHeadObjectInstance;
begin
  Result := DefaultInterface.SectionHeadingInstance;
end;

procedure TOlapObjectInstance.Set_SectionHeadingInstance(const pVal: ISCROlapSectHeadObjectInstance);
begin
  DefaultInterface.SectionHeadingInstance := pVal;
end;

function  TOlapObjectInstance.Get_GridObjectInstance: ISCRCrossTabObjectInstance;
begin
  Result := DefaultInterface.GridObjectInstance;
end;

procedure TOlapObjectInstance.Set_GridObjectInstance(const pVal: ISCRCrossTabObjectInstance);
begin
  DefaultInterface.GridObjectInstance := pVal;
end;

function  TOlapObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TOlapObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                     DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TOlapObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TOlapObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TOlapObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TOlapObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                   out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TOlapObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TOlapObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TOlapObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TOlapObjectInstanceProperties.Create(AServer: TOlapObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TOlapObjectInstanceProperties.GetDefaultInterface: ISCROlapObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TOlapObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TOlapObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TOlapObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TOlapObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TOlapObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TOlapObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TOlapObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TOlapObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TOlapObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TOlapObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TOlapObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TOlapObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TOlapObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TOlapObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TOlapObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TOlapObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TOlapObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TOlapObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TOlapObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TOlapObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TOlapObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TOlapObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TOlapObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TOlapObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TOlapObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TOlapObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TOlapObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TOlapObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TOlapObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TOlapObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TOlapObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TOlapObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TOlapObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TOlapObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TOlapObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TOlapObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TOlapObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TOlapObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TOlapObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TOlapObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TOlapObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TOlapObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TOlapObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TOlapObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TOlapObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TOlapObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TOlapObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TOlapObjectInstanceProperties.Get_SectionHeadingInstance: ISCROlapSectHeadObjectInstance;
begin
  Result := DefaultInterface.SectionHeadingInstance;
end;

procedure TOlapObjectInstanceProperties.Set_SectionHeadingInstance(const pVal: ISCROlapSectHeadObjectInstance);
begin
  DefaultInterface.SectionHeadingInstance := pVal;
end;

function  TOlapObjectInstanceProperties.Get_GridObjectInstance: ISCRCrossTabObjectInstance;
begin
  Result := DefaultInterface.GridObjectInstance;
end;

procedure TOlapObjectInstanceProperties.Set_GridObjectInstance(const pVal: ISCRCrossTabObjectInstance);
begin
  DefaultInterface.GridObjectInstance := pVal;
end;

{$ENDIF}

class function CoOlapSectHeadObjectInstance.Create: ISCROlapSectHeadObjectInstance;
begin
  Result := CreateComObject(CLASS_OlapSectHeadObjectInstance) as ISCROlapSectHeadObjectInstance;
end;

class function CoOlapSectHeadObjectInstance.CreateRemote(const MachineName: string): ISCROlapSectHeadObjectInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OlapSectHeadObjectInstance) as ISCROlapSectHeadObjectInstance;
end;

procedure TOlapSectHeadObjectInstance.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E584BDBA-D4CA-4E72-BA95-ACC394A3A9FB}';
    IntfIID:   '{0843AFEC-8E65-415F-9E64-EAE1CBBF8CD3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TOlapSectHeadObjectInstance.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCROlapSectHeadObjectInstance;
  end;
end;

procedure TOlapSectHeadObjectInstance.ConnectTo(svrIntf: ISCROlapSectHeadObjectInstance);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TOlapSectHeadObjectInstance.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TOlapSectHeadObjectInstance.GetDefaultInterface: ISCROlapSectHeadObjectInstance;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TOlapSectHeadObjectInstance.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TOlapSectHeadObjectInstanceProperties.Create(Self);
{$ENDIF}
end;

destructor TOlapSectHeadObjectInstance.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TOlapSectHeadObjectInstance.GetServerProperties: TOlapSectHeadObjectInstanceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TOlapSectHeadObjectInstance.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TOlapSectHeadObjectInstance.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TOlapSectHeadObjectInstance.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TOlapSectHeadObjectInstance.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TOlapSectHeadObjectInstance.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TOlapSectHeadObjectInstance.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TOlapSectHeadObjectInstance.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TOlapSectHeadObjectInstance.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TOlapSectHeadObjectInstance.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TOlapSectHeadObjectInstance.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TOlapSectHeadObjectInstance.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TOlapSectHeadObjectInstance.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TOlapSectHeadObjectInstance.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TOlapSectHeadObjectInstance.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TOlapSectHeadObjectInstance.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TOlapSectHeadObjectInstance.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TOlapSectHeadObjectInstance.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TOlapSectHeadObjectInstance.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TOlapSectHeadObjectInstance.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TOlapSectHeadObjectInstance.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TOlapSectHeadObjectInstance.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TOlapSectHeadObjectInstance.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TOlapSectHeadObjectInstance.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TOlapSectHeadObjectInstance.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TOlapSectHeadObjectInstance.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TOlapSectHeadObjectInstance.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TOlapSectHeadObjectInstance.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TOlapSectHeadObjectInstance.Get_InSectHeadObjectInstances: ISCRReportObjectInstances;
begin
  Result := DefaultInterface.InSectHeadObjectInstances;
end;

procedure TOlapSectHeadObjectInstance.Set_InSectHeadObjectInstances(const pVal: ISCRReportObjectInstances);
begin
  DefaultInterface.InSectHeadObjectInstances := pVal;
end;

function  TOlapSectHeadObjectInstance.Clone(DeepClone: WordBool): ISCRReportObjectInstance;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TOlapSectHeadObjectInstance.CopyTo(const ReportObjectInstance: ISCRReportObjectInstance; 
                                             DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ReportObjectInstance, DeepCopy);
end;

function  TOlapSectHeadObjectInstance.Equals(const ReportObjectInstance: ISCRReportObjectInstance): WordBool;
begin
  Result := DefaultInterface.Equals(ReportObjectInstance);
end;

procedure TOlapSectHeadObjectInstance.GetObjectText(out pObjectText: WideString);
begin
  DefaultInterface.GetObjectText(pObjectText);
end;

procedure TOlapSectHeadObjectInstance.CanBeDrillDown(out pCanDrillDown: WordBool);
begin
  DefaultInterface.CanBeDrillDown(pCanDrillDown);
end;

procedure TOlapSectHeadObjectInstance.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                           out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

procedure TOlapSectHeadObjectInstance.HasHyperLink(out pVal: WordBool);
begin
  DefaultInterface.HasHyperLink(pVal);
end;

function  TOlapSectHeadObjectInstance.HasReportPartBookmark: WordBool;
begin
  Result := DefaultInterface.HasReportPartBookmark;
end;

function  TOlapSectHeadObjectInstance.HasReportPartDrilldown: WordBool;
begin
  Result := DefaultInterface.HasReportPartDrilldown;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TOlapSectHeadObjectInstanceProperties.Create(AServer: TOlapSectHeadObjectInstance);
begin
  inherited Create;
  FServer := AServer;
end;

function TOlapSectHeadObjectInstanceProperties.GetDefaultInterface: ISCROlapSectHeadObjectInstance;
begin
  Result := FServer.DefaultInterface;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_OffsetX: Integer;
begin
  Result := DefaultInterface.OffsetX;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_OffsetX(pVal: Integer);
begin
  DefaultInterface.OffsetX := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_OffsetY: Integer;
begin
  Result := DefaultInterface.OffsetY;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_OffsetY(pVal: Integer);
begin
  DefaultInterface.OffsetY := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_Width: Integer;
begin
  Result := DefaultInterface.Width;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_Width(pVal: Integer);
begin
  DefaultInterface.Width := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_Height: Integer;
begin
  Result := DefaultInterface.Height;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_Height(pVal: Integer);
begin
  DefaultInterface.Height := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_Kind: CrObjectInstanceKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_Kind(pVal: CrObjectInstanceKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_Visible: WordBool;
begin
  Result := DefaultInterface.Visible;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_Visible(pVal: WordBool);
begin
  DefaultInterface.Visible := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_ToolTipText: WideString;
begin
  Result := DefaultInterface.ToolTipText;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_ToolTipText(const pVal: WideString);
  { Warning: The property ToolTipText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ToolTipText := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_HyperLink: WideString;
begin
  Result := DefaultInterface.HyperLink;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_HyperLink(const pVal: WideString);
  { Warning: The property HyperLink has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HyperLink := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_Border: ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Border;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_Border(const pVal: ISCRRuntimeBorder);
begin
  DefaultInterface.Border := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_SplitAtTop: WordBool;
begin
  Result := DefaultInterface.SplitAtTop;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_SplitAtTop(pVal: WordBool);
begin
  DefaultInterface.SplitAtTop := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_SplitAtBottom: WordBool;
begin
  Result := DefaultInterface.SplitAtBottom;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_SplitAtBottom(pVal: WordBool);
begin
  DefaultInterface.SplitAtBottom := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_ReportObjectName: WideString;
begin
  Result := DefaultInterface.ReportObjectName;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_ReportObjectName(const pVal: WideString);
  { Warning: The property ReportObjectName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportObjectName := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_StyleSheetName: WideString;
begin
  Result := DefaultInterface.StyleSheetName;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_StyleSheetName(const pVal: WideString);
  { Warning: The property StyleSheetName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleSheetName := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_Rotation: CrTextRotationAngleEnum;
begin
  Result := DefaultInterface.Rotation;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_Rotation(pVal: CrTextRotationAngleEnum);
begin
  DefaultInterface.Rotation := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_HorizontalAlignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.HorizontalAlignment;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_HorizontalAlignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.HorizontalAlignment := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_DataContext: WideString;
begin
  Result := DefaultInterface.DataContext;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_DataContext(const pVal: WideString);
  { Warning: The property DataContext has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataContext := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_ReportPartBookmark: ISCRReportPartBookmark;
begin
  Result := DefaultInterface.ReportPartBookmark;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_ReportPartBookmark(const pVal: ISCRReportPartBookmark);
begin
  DefaultInterface.ReportPartBookmark := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_Highlight: WordBool;
begin
  Result := DefaultInterface.Highlight;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_Highlight(pVal: WordBool);
begin
  DefaultInterface.Highlight := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_GroupNamePath: WideString;
begin
  Result := DefaultInterface.GroupNamePath;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_GroupNamePath(const pVal: WideString);
  { Warning: The property GroupNamePath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupNamePath := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_HasObjectEnded: WordBool;
begin
  Result := DefaultInterface.HasObjectEnded;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_HasObjectEnded(pVal: WordBool);
begin
  DefaultInterface.HasObjectEnded := pVal;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_HasBookmark(Param1: WordBool);
begin
  DefaultInterface.HasBookmark := Param1;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_HasPartsDrilldown(Param1: WordBool);
begin
  DefaultInterface.HasPartsDrilldown := Param1;
end;

function  TOlapSectHeadObjectInstanceProperties.Get_InSectHeadObjectInstances: ISCRReportObjectInstances;
begin
  Result := DefaultInterface.InSectHeadObjectInstances;
end;

procedure TOlapSectHeadObjectInstanceProperties.Set_InSectHeadObjectInstances(const pVal: ISCRReportObjectInstances);
begin
  DefaultInterface.InSectHeadObjectInstances := pVal;
end;

{$ENDIF}

class function CoLineObjectInstances.Create: ISCRLineObjectInstances;
begin
  Result := CreateComObject(CLASS_LineObjectInstances) as ISCRLineObjectInstances;
end;

class function CoLineObjectInstances.CreateRemote(const MachineName: string): ISCRLineObjectInstances;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LineObjectInstances) as ISCRLineObjectInstances;
end;

procedure TLineObjectInstances.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F7DA1F32-379C-4012-A471-332AE462C1C5}';
    IntfIID:   '{DD3209EA-DFD0-4F60-9E33-1B676BB8D603}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TLineObjectInstances.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRLineObjectInstances;
  end;
end;

procedure TLineObjectInstances.ConnectTo(svrIntf: ISCRLineObjectInstances);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TLineObjectInstances.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TLineObjectInstances.GetDefaultInterface: ISCRLineObjectInstances;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TLineObjectInstances.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TLineObjectInstancesProperties.Create(Self);
{$ENDIF}
end;

destructor TLineObjectInstances.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TLineObjectInstances.GetServerProperties: TLineObjectInstancesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TLineObjectInstances.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TLineObjectInstances.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TLineObjectInstances.Get_Item(Index: Integer): ISCRDrawingObjectInstance;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TLineObjectInstances.Set_Item(Index: Integer; const ppVal: ISCRDrawingObjectInstance);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TLineObjectInstances.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TLineObjectInstances.Clone(DeepClone: WordBool): ISCRLineObjectInstances;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TLineObjectInstances.CopyTo(const LineObjectInstances: ISCRLineObjectInstances; 
                                      DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(LineObjectInstances, DeepCopy);
end;

function  TLineObjectInstances.Equals(const LineObjectInstances: ISCRLineObjectInstances): WordBool;
begin
  Result := DefaultInterface.Equals(LineObjectInstances);
end;

procedure TLineObjectInstances.Add(const LineObjectInstance: ISCRDrawingObjectInstance);
begin
  DefaultInterface.Add(LineObjectInstance);
end;

procedure TLineObjectInstances.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TLineObjectInstances.Insert(Index: Integer; 
                                      const LineObjectInstance: ISCRDrawingObjectInstance);
begin
  DefaultInterface.Insert(Index, LineObjectInstance);
end;

procedure TLineObjectInstances.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TLineObjectInstances.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TLineObjectInstances.FindIndexOf(const LineObjectInstance: ISCRDrawingObjectInstance): Integer;
begin
  Result := DefaultInterface.FindIndexOf(LineObjectInstance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TLineObjectInstancesProperties.Create(AServer: TLineObjectInstances);
begin
  inherited Create;
  FServer := AServer;
end;

function TLineObjectInstancesProperties.GetDefaultInterface: ISCRLineObjectInstances;
begin
  Result := FServer.DefaultInterface;
end;

function  TLineObjectInstancesProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TLineObjectInstancesProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TLineObjectInstancesProperties.Get_Item(Index: Integer): ISCRDrawingObjectInstance;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TLineObjectInstancesProperties.Set_Item(Index: Integer; 
                                                  const ppVal: ISCRDrawingObjectInstance);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TLineObjectInstancesProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoBoxObjectInstances.Create: ISCRBoxObjectInstances;
begin
  Result := CreateComObject(CLASS_BoxObjectInstances) as ISCRBoxObjectInstances;
end;

class function CoBoxObjectInstances.CreateRemote(const MachineName: string): ISCRBoxObjectInstances;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BoxObjectInstances) as ISCRBoxObjectInstances;
end;

procedure TBoxObjectInstances.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{338C071C-FDFC-46B9-912A-D319BF8EDA1E}';
    IntfIID:   '{CFE1896F-B6BC-48C5-86DF-F6B1390A77EC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBoxObjectInstances.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRBoxObjectInstances;
  end;
end;

procedure TBoxObjectInstances.ConnectTo(svrIntf: ISCRBoxObjectInstances);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TBoxObjectInstances.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TBoxObjectInstances.GetDefaultInterface: ISCRBoxObjectInstances;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBoxObjectInstances.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBoxObjectInstancesProperties.Create(Self);
{$ENDIF}
end;

destructor TBoxObjectInstances.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBoxObjectInstances.GetServerProperties: TBoxObjectInstancesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TBoxObjectInstances.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TBoxObjectInstances.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TBoxObjectInstances.Get_Item(Index: Integer): ISCRBoxObjectInstance;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TBoxObjectInstances.Set_Item(Index: Integer; const ppVal: ISCRBoxObjectInstance);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TBoxObjectInstances.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TBoxObjectInstances.Clone(DeepClone: WordBool): ISCRBoxObjectInstances;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TBoxObjectInstances.CopyTo(const BoxObjectInstances: ISCRBoxObjectInstances; 
                                     DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(BoxObjectInstances, DeepCopy);
end;

function  TBoxObjectInstances.Equals(const BoxObjectInstances: ISCRBoxObjectInstances): WordBool;
begin
  Result := DefaultInterface.Equals(BoxObjectInstances);
end;

procedure TBoxObjectInstances.Add(const BoxObjectInstance: ISCRBoxObjectInstance);
begin
  DefaultInterface.Add(BoxObjectInstance);
end;

procedure TBoxObjectInstances.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TBoxObjectInstances.Insert(Index: Integer; const BoxObjectInstance: ISCRBoxObjectInstance);
begin
  DefaultInterface.Insert(Index, BoxObjectInstance);
end;

procedure TBoxObjectInstances.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TBoxObjectInstances.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TBoxObjectInstances.FindIndexOf(const BoxObjectInstance: ISCRBoxObjectInstance): Integer;
begin
  Result := DefaultInterface.FindIndexOf(BoxObjectInstance);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBoxObjectInstancesProperties.Create(AServer: TBoxObjectInstances);
begin
  inherited Create;
  FServer := AServer;
end;

function TBoxObjectInstancesProperties.GetDefaultInterface: ISCRBoxObjectInstances;
begin
  Result := FServer.DefaultInterface;
end;

function  TBoxObjectInstancesProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TBoxObjectInstancesProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TBoxObjectInstancesProperties.Get_Item(Index: Integer): ISCRBoxObjectInstance;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TBoxObjectInstancesProperties.Set_Item(Index: Integer; const ppVal: ISCRBoxObjectInstance);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TBoxObjectInstancesProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoRuntimeBorder.Create: ISCRRuntimeBorder;
begin
  Result := CreateComObject(CLASS_RuntimeBorder) as ISCRRuntimeBorder;
end;

class function CoRuntimeBorder.CreateRemote(const MachineName: string): ISCRRuntimeBorder;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuntimeBorder) as ISCRRuntimeBorder;
end;

procedure TRuntimeBorder.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{24277005-34EA-4BAB-A1F8-B3C47D7D5A13}';
    IntfIID:   '{59F0A351-A7FC-4712-9254-C19C43C1959E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRuntimeBorder.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRRuntimeBorder;
  end;
end;

procedure TRuntimeBorder.ConnectTo(svrIntf: ISCRRuntimeBorder);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRuntimeBorder.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRuntimeBorder.GetDefaultInterface: ISCRRuntimeBorder;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRuntimeBorder.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuntimeBorderProperties.Create(Self);
{$ENDIF}
end;

destructor TRuntimeBorder.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRuntimeBorder.GetServerProperties: TRuntimeBorderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TRuntimeBorder.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeBorder.Get_LeftLineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.LeftLineStyle;
end;

procedure TRuntimeBorder.Set_LeftLineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.LeftLineStyle := pVal;
end;

function  TRuntimeBorder.Get_RightLineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.RightLineStyle;
end;

procedure TRuntimeBorder.Set_RightLineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.RightLineStyle := pVal;
end;

function  TRuntimeBorder.Get_TopLineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.TopLineStyle;
end;

procedure TRuntimeBorder.Set_TopLineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.TopLineStyle := pVal;
end;

function  TRuntimeBorder.Get_BottomLineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.BottomLineStyle;
end;

procedure TRuntimeBorder.Set_BottomLineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.BottomLineStyle := pVal;
end;

function  TRuntimeBorder.Get_HasDropShadow: WordBool;
begin
  Result := DefaultInterface.HasDropShadow;
end;

procedure TRuntimeBorder.Set_HasDropShadow(pVal: WordBool);
begin
  DefaultInterface.HasDropShadow := pVal;
end;

function  TRuntimeBorder.Get_BackgroundColor: OLE_COLOR;
begin
  Result := DefaultInterface.BackgroundColor;
end;

procedure TRuntimeBorder.Set_BackgroundColor(pVal: OLE_COLOR);
begin
  DefaultInterface.BackgroundColor := pVal;
end;

function  TRuntimeBorder.Get_BorderColor: OLE_COLOR;
begin
  Result := DefaultInterface.BorderColor;
end;

procedure TRuntimeBorder.Set_BorderColor(pVal: OLE_COLOR);
begin
  DefaultInterface.BorderColor := pVal;
end;

function  TRuntimeBorder.Get_EnableTightHorizontal: WordBool;
begin
  Result := DefaultInterface.EnableTightHorizontal;
end;

procedure TRuntimeBorder.Set_EnableTightHorizontal(pVal: WordBool);
begin
  DefaultInterface.EnableTightHorizontal := pVal;
end;

function  TRuntimeBorder.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TRuntimeBorder.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TRuntimeBorder.Clone(DeepClone: WordBool): ISCRRuntimeBorder;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TRuntimeBorder.CopyTo(const RuntimeBorder: ISCRRuntimeBorder; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(RuntimeBorder, DeepCopy);
end;

function  TRuntimeBorder.Equals(const RuntimeBorder: ISCRRuntimeBorder): WordBool;
begin
  Result := DefaultInterface.Equals(RuntimeBorder);
end;

procedure TRuntimeBorder.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                              out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuntimeBorderProperties.Create(AServer: TRuntimeBorder);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuntimeBorderProperties.GetDefaultInterface: ISCRRuntimeBorder;
begin
  Result := FServer.DefaultInterface;
end;

function  TRuntimeBorderProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeBorderProperties.Get_LeftLineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.LeftLineStyle;
end;

procedure TRuntimeBorderProperties.Set_LeftLineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.LeftLineStyle := pVal;
end;

function  TRuntimeBorderProperties.Get_RightLineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.RightLineStyle;
end;

procedure TRuntimeBorderProperties.Set_RightLineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.RightLineStyle := pVal;
end;

function  TRuntimeBorderProperties.Get_TopLineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.TopLineStyle;
end;

procedure TRuntimeBorderProperties.Set_TopLineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.TopLineStyle := pVal;
end;

function  TRuntimeBorderProperties.Get_BottomLineStyle: CrLineStyleEnum;
begin
  Result := DefaultInterface.BottomLineStyle;
end;

procedure TRuntimeBorderProperties.Set_BottomLineStyle(pVal: CrLineStyleEnum);
begin
  DefaultInterface.BottomLineStyle := pVal;
end;

function  TRuntimeBorderProperties.Get_HasDropShadow: WordBool;
begin
  Result := DefaultInterface.HasDropShadow;
end;

procedure TRuntimeBorderProperties.Set_HasDropShadow(pVal: WordBool);
begin
  DefaultInterface.HasDropShadow := pVal;
end;

function  TRuntimeBorderProperties.Get_BackgroundColor: OLE_COLOR;
begin
  Result := DefaultInterface.BackgroundColor;
end;

procedure TRuntimeBorderProperties.Set_BackgroundColor(pVal: OLE_COLOR);
begin
  DefaultInterface.BackgroundColor := pVal;
end;

function  TRuntimeBorderProperties.Get_BorderColor: OLE_COLOR;
begin
  Result := DefaultInterface.BorderColor;
end;

procedure TRuntimeBorderProperties.Set_BorderColor(pVal: OLE_COLOR);
begin
  DefaultInterface.BorderColor := pVal;
end;

function  TRuntimeBorderProperties.Get_EnableTightHorizontal: WordBool;
begin
  Result := DefaultInterface.EnableTightHorizontal;
end;

procedure TRuntimeBorderProperties.Set_EnableTightHorizontal(pVal: WordBool);
begin
  DefaultInterface.EnableTightHorizontal := pVal;
end;

function  TRuntimeBorderProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TRuntimeBorderProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

{$ENDIF}

class function CoRuntimeFontColor.Create: ISCRRuntimeFontColor;
begin
  Result := CreateComObject(CLASS_RuntimeFontColor) as ISCRRuntimeFontColor;
end;

class function CoRuntimeFontColor.CreateRemote(const MachineName: string): ISCRRuntimeFontColor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuntimeFontColor) as ISCRRuntimeFontColor;
end;

procedure TRuntimeFontColor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3E9CD76F-DB29-4D0C-9B6F-FF2D41616F8E}';
    IntfIID:   '{E4E64E45-62BC-4F2B-AF30-7D233C51BBC9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRuntimeFontColor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRRuntimeFontColor;
  end;
end;

procedure TRuntimeFontColor.ConnectTo(svrIntf: ISCRRuntimeFontColor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRuntimeFontColor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRuntimeFontColor.GetDefaultInterface: ISCRRuntimeFontColor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRuntimeFontColor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuntimeFontColorProperties.Create(Self);
{$ENDIF}
end;

destructor TRuntimeFontColor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRuntimeFontColor.GetServerProperties: TRuntimeFontColorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TRuntimeFontColor.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeFontColor.Get_Font: ISCRFont;
begin
  Result := DefaultInterface.Font;
end;

procedure TRuntimeFontColor.Set_Font(const pVal: ISCRFont);
begin
  DefaultInterface.Font := pVal;
end;

function  TRuntimeFontColor.Get_Color: OLE_COLOR;
begin
  Result := DefaultInterface.Color;
end;

procedure TRuntimeFontColor.Set_Color(pVal: OLE_COLOR);
begin
  DefaultInterface.Color := pVal;
end;

function  TRuntimeFontColor.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TRuntimeFontColor.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

function  TRuntimeFontColor.Clone(DeepClone: WordBool): ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TRuntimeFontColor.CopyTo(const RuntimeFontColor: ISCRRuntimeFontColor; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(RuntimeFontColor, DeepCopy);
end;

function  TRuntimeFontColor.Equals(const RuntimeFontColor: ISCRRuntimeFontColor): WordBool;
begin
  Result := DefaultInterface.Equals(RuntimeFontColor);
end;

procedure TRuntimeFontColor.IsPropertyOverridden(property_: CrOverriddenPropertyEnum; 
                                                 out pOverridden: WordBool);
begin
  DefaultInterface.IsPropertyOverridden(property_, pOverridden);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuntimeFontColorProperties.Create(AServer: TRuntimeFontColor);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuntimeFontColorProperties.GetDefaultInterface: ISCRRuntimeFontColor;
begin
  Result := FServer.DefaultInterface;
end;

function  TRuntimeFontColorProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeFontColorProperties.Get_Font: ISCRFont;
begin
  Result := DefaultInterface.Font;
end;

procedure TRuntimeFontColorProperties.Set_Font(const pVal: ISCRFont);
begin
  DefaultInterface.Font := pVal;
end;

function  TRuntimeFontColorProperties.Get_Color: OLE_COLOR;
begin
  Result := DefaultInterface.Color;
end;

procedure TRuntimeFontColorProperties.Set_Color(pVal: OLE_COLOR);
begin
  DefaultInterface.Color := pVal;
end;

function  TRuntimeFontColorProperties.Get_OverriddenInfo: Integer;
begin
  Result := DefaultInterface.OverriddenInfo;
end;

procedure TRuntimeFontColorProperties.Set_OverriddenInfo(pVal: Integer);
begin
  DefaultInterface.OverriddenInfo := pVal;
end;

{$ENDIF}

class function CoRuntimeParagraphElements.Create: ISCRRuntimeParagraphElements;
begin
  Result := CreateComObject(CLASS_RuntimeParagraphElements) as ISCRRuntimeParagraphElements;
end;

class function CoRuntimeParagraphElements.CreateRemote(const MachineName: string): ISCRRuntimeParagraphElements;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuntimeParagraphElements) as ISCRRuntimeParagraphElements;
end;

procedure TRuntimeParagraphElements.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{090864D5-88D4-4996-8BE3-0B5D96729994}';
    IntfIID:   '{B1B51401-F0DF-437B-98A1-CFE6E24E14A2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRuntimeParagraphElements.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRRuntimeParagraphElements;
  end;
end;

procedure TRuntimeParagraphElements.ConnectTo(svrIntf: ISCRRuntimeParagraphElements);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRuntimeParagraphElements.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRuntimeParagraphElements.GetDefaultInterface: ISCRRuntimeParagraphElements;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRuntimeParagraphElements.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuntimeParagraphElementsProperties.Create(Self);
{$ENDIF}
end;

destructor TRuntimeParagraphElements.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRuntimeParagraphElements.GetServerProperties: TRuntimeParagraphElementsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TRuntimeParagraphElements.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeParagraphElements.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TRuntimeParagraphElements.Get_Item(Index: Integer): ISCRRuntimeParagraphElement;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TRuntimeParagraphElements.Set_Item(Index: Integer; 
                                             const ppVal: ISCRRuntimeParagraphElement);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TRuntimeParagraphElements.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TRuntimeParagraphElements.Clone(DeepClone: WordBool): ISCRRuntimeParagraphElements;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TRuntimeParagraphElements.CopyTo(const RuntimeParagraphElements: ISCRRuntimeParagraphElements; 
                                           DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(RuntimeParagraphElements, DeepCopy);
end;

function  TRuntimeParagraphElements.Equals(const RuntimeParagraphElements: ISCRRuntimeParagraphElements): WordBool;
begin
  Result := DefaultInterface.Equals(RuntimeParagraphElements);
end;

procedure TRuntimeParagraphElements.Add(const RuntimeParagraphElement: ISCRRuntimeParagraphElement);
begin
  DefaultInterface.Add(RuntimeParagraphElement);
end;

procedure TRuntimeParagraphElements.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TRuntimeParagraphElements.Insert(Index: Integer; 
                                           const RuntimeParagraphElement: ISCRRuntimeParagraphElement);
begin
  DefaultInterface.Insert(Index, RuntimeParagraphElement);
end;

procedure TRuntimeParagraphElements.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TRuntimeParagraphElements.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TRuntimeParagraphElements.FindIndexOf(const RuntimeParagraphElement: ISCRRuntimeParagraphElement): Integer;
begin
  Result := DefaultInterface.FindIndexOf(RuntimeParagraphElement);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuntimeParagraphElementsProperties.Create(AServer: TRuntimeParagraphElements);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuntimeParagraphElementsProperties.GetDefaultInterface: ISCRRuntimeParagraphElements;
begin
  Result := FServer.DefaultInterface;
end;

function  TRuntimeParagraphElementsProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeParagraphElementsProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TRuntimeParagraphElementsProperties.Get_Item(Index: Integer): ISCRRuntimeParagraphElement;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TRuntimeParagraphElementsProperties.Set_Item(Index: Integer; 
                                                       const ppVal: ISCRRuntimeParagraphElement);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TRuntimeParagraphElementsProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoRuntimeParagraphTextElement.Create: ISCRRuntimeParagraphTextElement;
begin
  Result := CreateComObject(CLASS_RuntimeParagraphTextElement) as ISCRRuntimeParagraphTextElement;
end;

class function CoRuntimeParagraphTextElement.CreateRemote(const MachineName: string): ISCRRuntimeParagraphTextElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuntimeParagraphTextElement) as ISCRRuntimeParagraphTextElement;
end;

procedure TRuntimeParagraphTextElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3AA1C0EC-D003-4D28-9246-442AF974CC8B}';
    IntfIID:   '{74CFB714-3BB6-4F61-9ED4-B89AC902C9B3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRuntimeParagraphTextElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRRuntimeParagraphTextElement;
  end;
end;

procedure TRuntimeParagraphTextElement.ConnectTo(svrIntf: ISCRRuntimeParagraphTextElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRuntimeParagraphTextElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRuntimeParagraphTextElement.GetDefaultInterface: ISCRRuntimeParagraphTextElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRuntimeParagraphTextElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuntimeParagraphTextElementProperties.Create(Self);
{$ENDIF}
end;

destructor TRuntimeParagraphTextElement.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRuntimeParagraphTextElement.GetServerProperties: TRuntimeParagraphTextElementProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TRuntimeParagraphTextElement.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeParagraphTextElement.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TRuntimeParagraphTextElement.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TRuntimeParagraphTextElement.Get_Kind: CrRuntimeParagraphElementKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TRuntimeParagraphTextElement.Set_Kind(pVal: CrRuntimeParagraphElementKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TRuntimeParagraphTextElement.Get_Text: WideString;
begin
  Result := DefaultInterface.Text;
end;

procedure TRuntimeParagraphTextElement.Set_Text(const pVal: WideString);
  { Warning: The property Text has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pVal;
end;

function  TRuntimeParagraphTextElement.Get_CharacterSpacing: Integer;
begin
  Result := DefaultInterface.CharacterSpacing;
end;

procedure TRuntimeParagraphTextElement.Set_CharacterSpacing(pVal: Integer);
begin
  DefaultInterface.CharacterSpacing := pVal;
end;

function  TRuntimeParagraphTextElement.Get_RightToLeftReading: WordBool;
begin
  Result := DefaultInterface.RightToLeftReading;
end;

procedure TRuntimeParagraphTextElement.Set_RightToLeftReading(pVal: WordBool);
begin
  DefaultInterface.RightToLeftReading := pVal;
end;

function  TRuntimeParagraphTextElement.Get_NeedsToJoinTheNext: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.NeedsToJoinTheNext;
end;

procedure TRuntimeParagraphTextElement.Set_NeedsToJoinTheNext(pVal: OleVariant);
begin
  DefaultInterface.NeedsToJoinTheNext := pVal;
end;

function  TRuntimeParagraphTextElement.Get_IsWhiteSpace: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.IsWhiteSpace;
end;

procedure TRuntimeParagraphTextElement.Set_IsWhiteSpace(pVal: OleVariant);
begin
  DefaultInterface.IsWhiteSpace := pVal;
end;

function  TRuntimeParagraphTextElement.Clone(DeepClone: WordBool): ISCRRuntimeParagraphElement;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TRuntimeParagraphTextElement.CopyTo(const RuntimeParagraphElement: ISCRRuntimeParagraphElement; 
                                              DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(RuntimeParagraphElement, DeepCopy);
end;

function  TRuntimeParagraphTextElement.Equals(const RuntimeParagraphElement: ISCRRuntimeParagraphElement): WordBool;
begin
  Result := DefaultInterface.Equals(RuntimeParagraphElement);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuntimeParagraphTextElementProperties.Create(AServer: TRuntimeParagraphTextElement);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuntimeParagraphTextElementProperties.GetDefaultInterface: ISCRRuntimeParagraphTextElement;
begin
  Result := FServer.DefaultInterface;
end;

function  TRuntimeParagraphTextElementProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeParagraphTextElementProperties.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TRuntimeParagraphTextElementProperties.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TRuntimeParagraphTextElementProperties.Get_Kind: CrRuntimeParagraphElementKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TRuntimeParagraphTextElementProperties.Set_Kind(pVal: CrRuntimeParagraphElementKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TRuntimeParagraphTextElementProperties.Get_Text: WideString;
begin
  Result := DefaultInterface.Text;
end;

procedure TRuntimeParagraphTextElementProperties.Set_Text(const pVal: WideString);
  { Warning: The property Text has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := pVal;
end;

function  TRuntimeParagraphTextElementProperties.Get_CharacterSpacing: Integer;
begin
  Result := DefaultInterface.CharacterSpacing;
end;

procedure TRuntimeParagraphTextElementProperties.Set_CharacterSpacing(pVal: Integer);
begin
  DefaultInterface.CharacterSpacing := pVal;
end;

function  TRuntimeParagraphTextElementProperties.Get_RightToLeftReading: WordBool;
begin
  Result := DefaultInterface.RightToLeftReading;
end;

procedure TRuntimeParagraphTextElementProperties.Set_RightToLeftReading(pVal: WordBool);
begin
  DefaultInterface.RightToLeftReading := pVal;
end;

function  TRuntimeParagraphTextElementProperties.Get_NeedsToJoinTheNext: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.NeedsToJoinTheNext;
end;

procedure TRuntimeParagraphTextElementProperties.Set_NeedsToJoinTheNext(pVal: OleVariant);
begin
  DefaultInterface.NeedsToJoinTheNext := pVal;
end;

function  TRuntimeParagraphTextElementProperties.Get_IsWhiteSpace: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.IsWhiteSpace;
end;

procedure TRuntimeParagraphTextElementProperties.Set_IsWhiteSpace(pVal: OleVariant);
begin
  DefaultInterface.IsWhiteSpace := pVal;
end;

{$ENDIF}

class function CoRuntimeParagraphTabElement.Create: ISCRRuntimeParagraphTabElement;
begin
  Result := CreateComObject(CLASS_RuntimeParagraphTabElement) as ISCRRuntimeParagraphTabElement;
end;

class function CoRuntimeParagraphTabElement.CreateRemote(const MachineName: string): ISCRRuntimeParagraphTabElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuntimeParagraphTabElement) as ISCRRuntimeParagraphTabElement;
end;

procedure TRuntimeParagraphTabElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{248458B7-B697-4D93-9E09-B01F87517D23}';
    IntfIID:   '{23470B56-4B55-4E27-A212-91DA1404725A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRuntimeParagraphTabElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRRuntimeParagraphTabElement;
  end;
end;

procedure TRuntimeParagraphTabElement.ConnectTo(svrIntf: ISCRRuntimeParagraphTabElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRuntimeParagraphTabElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRuntimeParagraphTabElement.GetDefaultInterface: ISCRRuntimeParagraphTabElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRuntimeParagraphTabElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuntimeParagraphTabElementProperties.Create(Self);
{$ENDIF}
end;

destructor TRuntimeParagraphTabElement.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRuntimeParagraphTabElement.GetServerProperties: TRuntimeParagraphTabElementProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TRuntimeParagraphTabElement.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeParagraphTabElement.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TRuntimeParagraphTabElement.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TRuntimeParagraphTabElement.Get_Kind: CrRuntimeParagraphElementKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TRuntimeParagraphTabElement.Set_Kind(pVal: CrRuntimeParagraphElementKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TRuntimeParagraphTabElement.Clone(DeepClone: WordBool): ISCRRuntimeParagraphElement;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TRuntimeParagraphTabElement.CopyTo(const RuntimeParagraphElement: ISCRRuntimeParagraphElement; 
                                             DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(RuntimeParagraphElement, DeepCopy);
end;

function  TRuntimeParagraphTabElement.Equals(const RuntimeParagraphElement: ISCRRuntimeParagraphElement): WordBool;
begin
  Result := DefaultInterface.Equals(RuntimeParagraphElement);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuntimeParagraphTabElementProperties.Create(AServer: TRuntimeParagraphTabElement);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuntimeParagraphTabElementProperties.GetDefaultInterface: ISCRRuntimeParagraphTabElement;
begin
  Result := FServer.DefaultInterface;
end;

function  TRuntimeParagraphTabElementProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeParagraphTabElementProperties.Get_FontColor: ISCRRuntimeFontColor;
begin
  Result := DefaultInterface.FontColor;
end;

procedure TRuntimeParagraphTabElementProperties.Set_FontColor(const pVal: ISCRRuntimeFontColor);
begin
  DefaultInterface.FontColor := pVal;
end;

function  TRuntimeParagraphTabElementProperties.Get_Kind: CrRuntimeParagraphElementKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TRuntimeParagraphTabElementProperties.Set_Kind(pVal: CrRuntimeParagraphElementKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

{$ENDIF}

class function CoTabUnit.Create: ISCRTabUnit;
begin
  Result := CreateComObject(CLASS_TabUnit) as ISCRTabUnit;
end;

class function CoTabUnit.CreateRemote(const MachineName: string): ISCRTabUnit;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TabUnit) as ISCRTabUnit;
end;

procedure TTabUnit.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DE1CEE92-EB81-4C3D-94D8-B2F016444A7C}';
    IntfIID:   '{486A6AEC-B2D7-4154-B547-7E0A9C98DF99}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTabUnit.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRTabUnit;
  end;
end;

procedure TTabUnit.ConnectTo(svrIntf: ISCRTabUnit);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTabUnit.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTabUnit.GetDefaultInterface: ISCRTabUnit;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTabUnit.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTabUnitProperties.Create(Self);
{$ENDIF}
end;

destructor TTabUnit.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTabUnit.GetServerProperties: TTabUnitProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TTabUnit.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TTabUnit.Get_Alignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.Alignment;
end;

procedure TTabUnit.Set_Alignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.Alignment := pVal;
end;

function  TTabUnit.Get_Position: Integer;
begin
  Result := DefaultInterface.Position;
end;

procedure TTabUnit.Set_Position(pVal: Integer);
begin
  DefaultInterface.Position := pVal;
end;

function  TTabUnit.Get_AlignRunIndex: Integer;
begin
  Result := DefaultInterface.AlignRunIndex;
end;

procedure TTabUnit.Set_AlignRunIndex(pVal: Integer);
begin
  DefaultInterface.AlignRunIndex := pVal;
end;

function  TTabUnit.Get_AlignCharIndex: Integer;
begin
  Result := DefaultInterface.AlignCharIndex;
end;

procedure TTabUnit.Set_AlignCharIndex(pVal: Integer);
begin
  DefaultInterface.AlignCharIndex := pVal;
end;

function  TTabUnit.Get_RunCount: Integer;
begin
  Result := DefaultInterface.RunCount;
end;

procedure TTabUnit.Set_RunCount(pVal: Integer);
begin
  DefaultInterface.RunCount := pVal;
end;

function  TTabUnit.Get_VisualToLogical: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.VisualToLogical;
end;

procedure TTabUnit.Set_VisualToLogical(pVal: OleVariant);
begin
  DefaultInterface.VisualToLogical := pVal;
end;

function  TTabUnit.Get_ParagraphElements: ISCRRuntimeParagraphElements;
begin
  Result := DefaultInterface.ParagraphElements;
end;

procedure TTabUnit.Set_ParagraphElements(const pVal: ISCRRuntimeParagraphElements);
begin
  DefaultInterface.ParagraphElements := pVal;
end;

function  TTabUnit.Clone(DeepClone: WordBool): ISCRTabUnit;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TTabUnit.CopyTo(const TabUnit: ISCRTabUnit; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(TabUnit, DeepCopy);
end;

function  TTabUnit.Equals(const TabUnit: ISCRTabUnit): WordBool;
begin
  Result := DefaultInterface.Equals(TabUnit);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTabUnitProperties.Create(AServer: TTabUnit);
begin
  inherited Create;
  FServer := AServer;
end;

function TTabUnitProperties.GetDefaultInterface: ISCRTabUnit;
begin
  Result := FServer.DefaultInterface;
end;

function  TTabUnitProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TTabUnitProperties.Get_Alignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.Alignment;
end;

procedure TTabUnitProperties.Set_Alignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.Alignment := pVal;
end;

function  TTabUnitProperties.Get_Position: Integer;
begin
  Result := DefaultInterface.Position;
end;

procedure TTabUnitProperties.Set_Position(pVal: Integer);
begin
  DefaultInterface.Position := pVal;
end;

function  TTabUnitProperties.Get_AlignRunIndex: Integer;
begin
  Result := DefaultInterface.AlignRunIndex;
end;

procedure TTabUnitProperties.Set_AlignRunIndex(pVal: Integer);
begin
  DefaultInterface.AlignRunIndex := pVal;
end;

function  TTabUnitProperties.Get_AlignCharIndex: Integer;
begin
  Result := DefaultInterface.AlignCharIndex;
end;

procedure TTabUnitProperties.Set_AlignCharIndex(pVal: Integer);
begin
  DefaultInterface.AlignCharIndex := pVal;
end;

function  TTabUnitProperties.Get_RunCount: Integer;
begin
  Result := DefaultInterface.RunCount;
end;

procedure TTabUnitProperties.Set_RunCount(pVal: Integer);
begin
  DefaultInterface.RunCount := pVal;
end;

function  TTabUnitProperties.Get_VisualToLogical: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.VisualToLogical;
end;

procedure TTabUnitProperties.Set_VisualToLogical(pVal: OleVariant);
begin
  DefaultInterface.VisualToLogical := pVal;
end;

function  TTabUnitProperties.Get_ParagraphElements: ISCRRuntimeParagraphElements;
begin
  Result := DefaultInterface.ParagraphElements;
end;

procedure TTabUnitProperties.Set_ParagraphElements(const pVal: ISCRRuntimeParagraphElements);
begin
  DefaultInterface.ParagraphElements := pVal;
end;

{$ENDIF}

class function CoTabUnits.Create: ISCRTabUnits;
begin
  Result := CreateComObject(CLASS_TabUnits) as ISCRTabUnits;
end;

class function CoTabUnits.CreateRemote(const MachineName: string): ISCRTabUnits;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TabUnits) as ISCRTabUnits;
end;

procedure TTabUnits.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C74A62F2-3F1A-49BA-8A32-16D145699710}';
    IntfIID:   '{5A04C745-0F30-4A2D-87D7-931D9544FAFA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTabUnits.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRTabUnits;
  end;
end;

procedure TTabUnits.ConnectTo(svrIntf: ISCRTabUnits);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTabUnits.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTabUnits.GetDefaultInterface: ISCRTabUnits;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTabUnits.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTabUnitsProperties.Create(Self);
{$ENDIF}
end;

destructor TTabUnits.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTabUnits.GetServerProperties: TTabUnitsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TTabUnits.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TTabUnits.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TTabUnits.Get_Item(Index: Integer): ISCRTabUnit;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TTabUnits.Set_Item(Index: Integer; const ppVal: ISCRTabUnit);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TTabUnits.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TTabUnits.Clone(DeepClone: WordBool): ISCRTabUnits;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TTabUnits.CopyTo(const TabUnits: ISCRTabUnits; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(TabUnits, DeepCopy);
end;

function  TTabUnits.Equals(const TabUnits: ISCRTabUnits): WordBool;
begin
  Result := DefaultInterface.Equals(TabUnits);
end;

procedure TTabUnits.Add(const TabUnit: ISCRTabUnit);
begin
  DefaultInterface.Add(TabUnit);
end;

procedure TTabUnits.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TTabUnits.Insert(Index: Integer; const TabUnit: ISCRTabUnit);
begin
  DefaultInterface.Insert(Index, TabUnit);
end;

procedure TTabUnits.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TTabUnits.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TTabUnits.FindIndexOf(const TabUnit: ISCRTabUnit): Integer;
begin
  Result := DefaultInterface.FindIndexOf(TabUnit);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTabUnitsProperties.Create(AServer: TTabUnits);
begin
  inherited Create;
  FServer := AServer;
end;

function TTabUnitsProperties.GetDefaultInterface: ISCRTabUnits;
begin
  Result := FServer.DefaultInterface;
end;

function  TTabUnitsProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TTabUnitsProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TTabUnitsProperties.Get_Item(Index: Integer): ISCRTabUnit;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TTabUnitsProperties.Set_Item(Index: Integer; const ppVal: ISCRTabUnit);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TTabUnitsProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoGroupTree.Create: ISCRGroupTree;
begin
  Result := CreateComObject(CLASS_GroupTree) as ISCRGroupTree;
end;

class function CoGroupTree.CreateRemote(const MachineName: string): ISCRGroupTree;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GroupTree) as ISCRGroupTree;
end;

procedure TGroupTree.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BF6467B5-C165-4011-900A-41D4B8BD52E8}';
    IntfIID:   '{A91CEB69-21B1-41E1-A12B-03119711A4C9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGroupTree.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRGroupTree;
  end;
end;

procedure TGroupTree.ConnectTo(svrIntf: ISCRGroupTree);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGroupTree.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGroupTree.GetDefaultInterface: ISCRGroupTree;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGroupTree.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGroupTreeProperties.Create(Self);
{$ENDIF}
end;

destructor TGroupTree.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGroupTree.GetServerProperties: TGroupTreeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TGroupTree.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGroupTree.Get_TreeRoot: ISCRGroupTreeNode;
begin
  Result := DefaultInterface.TreeRoot;
end;

procedure TGroupTree.Set_TreeRoot(const pVal: ISCRGroupTreeNode);
begin
  DefaultInterface.TreeRoot := pVal;
end;

function  TGroupTree.Get_IsHierarchicalTree: WordBool;
begin
  Result := DefaultInterface.IsHierarchicalTree;
end;

procedure TGroupTree.Set_IsHierarchicalTree(pVal: WordBool);
begin
  DefaultInterface.IsHierarchicalTree := pVal;
end;

function  TGroupTree.Clone(DeepClone: WordBool): ISCRGroupTree;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TGroupTree.CopyTo(const GroupTree: ISCRGroupTree; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(GroupTree, DeepCopy);
end;

function  TGroupTree.Equals(const GroupTree: ISCRGroupTree): WordBool;
begin
  Result := DefaultInterface.Equals(GroupTree);
end;

procedure TGroupTree.FindSubtreeByNodeID(const pNodeID: ISCRGroupTreeNodeID; 
                                         out ppSubTree: ISCRGroupTree);
begin
  DefaultInterface.FindSubtreeByNodeID(pNodeID, ppSubTree);
end;

procedure TGroupTree.FindSubtreeByArrayPath(GroupPath: OleVariant; out ppSubTree: ISCRGroupTree);
begin
  DefaultInterface.FindSubtreeByArrayPath(GroupPath, ppSubTree);
end;

procedure TGroupTree.FindSubtreeByArrayPathEx(GroupPath: OleVariant; out ppSubTree: ISCRGroupTree; 
                                              out ppParentNode: ISCRGroupTreeNode);
begin
  DefaultInterface.FindSubtreeByArrayPathEx(GroupPath, ppSubTree, ppParentNode);
end;

procedure TGroupTree.FindSubtreeByBSTRPath(const GroupPath: WideString; out ppSubTree: ISCRGroupTree);
begin
  DefaultInterface.FindSubtreeByBSTRPath(GroupPath, ppSubTree);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGroupTreeProperties.Create(AServer: TGroupTree);
begin
  inherited Create;
  FServer := AServer;
end;

function TGroupTreeProperties.GetDefaultInterface: ISCRGroupTree;
begin
  Result := FServer.DefaultInterface;
end;

function  TGroupTreeProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGroupTreeProperties.Get_TreeRoot: ISCRGroupTreeNode;
begin
  Result := DefaultInterface.TreeRoot;
end;

procedure TGroupTreeProperties.Set_TreeRoot(const pVal: ISCRGroupTreeNode);
begin
  DefaultInterface.TreeRoot := pVal;
end;

function  TGroupTreeProperties.Get_IsHierarchicalTree: WordBool;
begin
  Result := DefaultInterface.IsHierarchicalTree;
end;

procedure TGroupTreeProperties.Set_IsHierarchicalTree(pVal: WordBool);
begin
  DefaultInterface.IsHierarchicalTree := pVal;
end;

{$ENDIF}

class function CoGroupTreeNode.Create: ISCRGroupTreeNode;
begin
  Result := CreateComObject(CLASS_GroupTreeNode) as ISCRGroupTreeNode;
end;

class function CoGroupTreeNode.CreateRemote(const MachineName: string): ISCRGroupTreeNode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GroupTreeNode) as ISCRGroupTreeNode;
end;

procedure TGroupTreeNode.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{41E1A2BB-295C-4C3B-B570-1F4A6DCE2187}';
    IntfIID:   '{C5D4E9DD-615A-4FAF-9B82-9111BB6C918D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGroupTreeNode.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRGroupTreeNode;
  end;
end;

procedure TGroupTreeNode.ConnectTo(svrIntf: ISCRGroupTreeNode);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGroupTreeNode.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGroupTreeNode.GetDefaultInterface: ISCRGroupTreeNode;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGroupTreeNode.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGroupTreeNodeProperties.Create(Self);
{$ENDIF}
end;

destructor TGroupTreeNode.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGroupTreeNode.GetServerProperties: TGroupTreeNodeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TGroupTreeNode.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGroupTreeNode.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TGroupTreeNode.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TGroupTreeNode.Get_GroupLevel: LongWord;
begin
  Result := DefaultInterface.GroupLevel;
end;

procedure TGroupTreeNode.Set_GroupLevel(pVal: LongWord);
begin
  DefaultInterface.GroupLevel := pVal;
end;

function  TGroupTreeNode.Get_GroupPath: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.GroupPath;
end;

procedure TGroupTreeNode.Set_GroupPath(pVal: OleVariant);
begin
  DefaultInterface.GroupPath := pVal;
end;

function  TGroupTreeNode.Get_IsVisible: WordBool;
begin
  Result := DefaultInterface.IsVisible;
end;

procedure TGroupTreeNode.Set_IsVisible(pVal: WordBool);
begin
  DefaultInterface.IsVisible := pVal;
end;

function  TGroupTreeNode.Get_SubGroupNodes: ISCRGroupTreeNodes;
begin
  Result := DefaultInterface.SubGroupNodes;
end;

procedure TGroupTreeNode.Set_SubGroupNodes(const pVal: ISCRGroupTreeNodes);
begin
  DefaultInterface.SubGroupNodes := pVal;
end;

function  TGroupTreeNode.Get_IsHierarchicalGroup: WordBool;
begin
  Result := DefaultInterface.IsHierarchicalGroup;
end;

procedure TGroupTreeNode.Set_IsHierarchicalGroup(pVal: WordBool);
begin
  DefaultInterface.IsHierarchicalGroup := pVal;
end;

function  TGroupTreeNode.Get_IsNewQueryNeededForChildren: WordBool;
begin
  Result := DefaultInterface.IsNewQueryNeededForChildren;
end;

procedure TGroupTreeNode.Set_IsNewQueryNeededForChildren(pVal: WordBool);
begin
  DefaultInterface.IsNewQueryNeededForChildren := pVal;
end;

function  TGroupTreeNode.Get_IsNodeExpanded: WordBool;
begin
  Result := DefaultInterface.IsNodeExpanded;
end;

procedure TGroupTreeNode.Set_IsNodeExpanded(pVal: WordBool);
begin
  DefaultInterface.IsNodeExpanded := pVal;
end;

function  TGroupTreeNode.Get_IsDrillDownNode: WordBool;
begin
  Result := DefaultInterface.IsDrillDownNode;
end;

procedure TGroupTreeNode.Set_IsDrillDownNode(pVal: WordBool);
begin
  DefaultInterface.IsDrillDownNode := pVal;
end;

function  TGroupTreeNode.Get_NumberOfChildren: Integer;
begin
  Result := DefaultInterface.NumberOfChildren;
end;

procedure TGroupTreeNode.Set_NumberOfChildren(pVal: Integer);
begin
  DefaultInterface.NumberOfChildren := pVal;
end;

function  TGroupTreeNode.Get_LevelInHierarchy: Integer;
begin
  Result := DefaultInterface.LevelInHierarchy;
end;

procedure TGroupTreeNode.Set_LevelInHierarchy(pVal: Integer);
begin
  DefaultInterface.LevelInHierarchy := pVal;
end;

function  TGroupTreeNode.Clone(DeepClone: WordBool): ISCRGroupTreeNode;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TGroupTreeNode.CopyTo(const GroupTreeNode: ISCRGroupTreeNode; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(GroupTreeNode, DeepCopy);
end;

function  TGroupTreeNode.Equals(const GroupTreeNode: ISCRGroupTreeNode): WordBool;
begin
  Result := DefaultInterface.Equals(GroupTreeNode);
end;

procedure TGroupTreeNode.GetGroupInfo(out ppGroupTreeNodeID: ISCRGroupTreeNodeID);
begin
  DefaultInterface.GetGroupInfo(ppGroupTreeNodeID);
end;

procedure TGroupTreeNode.IsEqualByPath(path: OleVariant; out pEqual: WordBool);
begin
  DefaultInterface.IsEqualByPath(path, pEqual);
end;

procedure TGroupTreeNode.IsEqualByName(const GroupName: WideString; out pEqual: WordBool);
begin
  DefaultInterface.IsEqualByName(GroupName, pEqual);
end;

procedure TGroupTreeNode.GetNumberOfLoadedSubgroups(out pSubgroupNo: Integer);
begin
  DefaultInterface.GetNumberOfLoadedSubgroups(pSubgroupNo);
end;

procedure TGroupTreeNode.GetNthSubgroup(Index: Integer; out ppSubgroupNode: ISCRGroupTreeNode);
begin
  DefaultInterface.GetNthSubgroup(Index, ppSubgroupNode);
end;

procedure TGroupTreeNode.GetLastSubgroup(out ppSubgroupNode: ISCRGroupTreeNode);
begin
  DefaultInterface.GetLastSubgroup(ppSubgroupNode);
end;

procedure TGroupTreeNode.AddSubgroup(const pSubgroupNode: ISCRGroupTreeNode);
begin
  DefaultInterface.AddSubgroup(pSubgroupNode);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGroupTreeNodeProperties.Create(AServer: TGroupTreeNode);
begin
  inherited Create;
  FServer := AServer;
end;

function TGroupTreeNodeProperties.GetDefaultInterface: ISCRGroupTreeNode;
begin
  Result := FServer.DefaultInterface;
end;

function  TGroupTreeNodeProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGroupTreeNodeProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TGroupTreeNodeProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TGroupTreeNodeProperties.Get_GroupLevel: LongWord;
begin
  Result := DefaultInterface.GroupLevel;
end;

procedure TGroupTreeNodeProperties.Set_GroupLevel(pVal: LongWord);
begin
  DefaultInterface.GroupLevel := pVal;
end;

function  TGroupTreeNodeProperties.Get_GroupPath: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.GroupPath;
end;

procedure TGroupTreeNodeProperties.Set_GroupPath(pVal: OleVariant);
begin
  DefaultInterface.GroupPath := pVal;
end;

function  TGroupTreeNodeProperties.Get_IsVisible: WordBool;
begin
  Result := DefaultInterface.IsVisible;
end;

procedure TGroupTreeNodeProperties.Set_IsVisible(pVal: WordBool);
begin
  DefaultInterface.IsVisible := pVal;
end;

function  TGroupTreeNodeProperties.Get_SubGroupNodes: ISCRGroupTreeNodes;
begin
  Result := DefaultInterface.SubGroupNodes;
end;

procedure TGroupTreeNodeProperties.Set_SubGroupNodes(const pVal: ISCRGroupTreeNodes);
begin
  DefaultInterface.SubGroupNodes := pVal;
end;

function  TGroupTreeNodeProperties.Get_IsHierarchicalGroup: WordBool;
begin
  Result := DefaultInterface.IsHierarchicalGroup;
end;

procedure TGroupTreeNodeProperties.Set_IsHierarchicalGroup(pVal: WordBool);
begin
  DefaultInterface.IsHierarchicalGroup := pVal;
end;

function  TGroupTreeNodeProperties.Get_IsNewQueryNeededForChildren: WordBool;
begin
  Result := DefaultInterface.IsNewQueryNeededForChildren;
end;

procedure TGroupTreeNodeProperties.Set_IsNewQueryNeededForChildren(pVal: WordBool);
begin
  DefaultInterface.IsNewQueryNeededForChildren := pVal;
end;

function  TGroupTreeNodeProperties.Get_IsNodeExpanded: WordBool;
begin
  Result := DefaultInterface.IsNodeExpanded;
end;

procedure TGroupTreeNodeProperties.Set_IsNodeExpanded(pVal: WordBool);
begin
  DefaultInterface.IsNodeExpanded := pVal;
end;

function  TGroupTreeNodeProperties.Get_IsDrillDownNode: WordBool;
begin
  Result := DefaultInterface.IsDrillDownNode;
end;

procedure TGroupTreeNodeProperties.Set_IsDrillDownNode(pVal: WordBool);
begin
  DefaultInterface.IsDrillDownNode := pVal;
end;

function  TGroupTreeNodeProperties.Get_NumberOfChildren: Integer;
begin
  Result := DefaultInterface.NumberOfChildren;
end;

procedure TGroupTreeNodeProperties.Set_NumberOfChildren(pVal: Integer);
begin
  DefaultInterface.NumberOfChildren := pVal;
end;

function  TGroupTreeNodeProperties.Get_LevelInHierarchy: Integer;
begin
  Result := DefaultInterface.LevelInHierarchy;
end;

procedure TGroupTreeNodeProperties.Set_LevelInHierarchy(pVal: Integer);
begin
  DefaultInterface.LevelInHierarchy := pVal;
end;

{$ENDIF}

class function CoGroupTreeNodes.Create: ISCRGroupTreeNodes;
begin
  Result := CreateComObject(CLASS_GroupTreeNodes) as ISCRGroupTreeNodes;
end;

class function CoGroupTreeNodes.CreateRemote(const MachineName: string): ISCRGroupTreeNodes;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GroupTreeNodes) as ISCRGroupTreeNodes;
end;

procedure TGroupTreeNodes.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9BA08CE1-C1B5-4AFB-BE31-3C5BABC7AD67}';
    IntfIID:   '{2C970BA6-4F7F-49AB-87FD-694B0AE0FD76}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TGroupTreeNodes.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRGroupTreeNodes;
  end;
end;

procedure TGroupTreeNodes.ConnectTo(svrIntf: ISCRGroupTreeNodes);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TGroupTreeNodes.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TGroupTreeNodes.GetDefaultInterface: ISCRGroupTreeNodes;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TGroupTreeNodes.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TGroupTreeNodesProperties.Create(Self);
{$ENDIF}
end;

destructor TGroupTreeNodes.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TGroupTreeNodes.GetServerProperties: TGroupTreeNodesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TGroupTreeNodes.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGroupTreeNodes.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TGroupTreeNodes.Get_Item(Index: Integer): ISCRGroupTreeNode;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TGroupTreeNodes.Set_Item(Index: Integer; const ppVal: ISCRGroupTreeNode);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TGroupTreeNodes.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TGroupTreeNodes.Clone(DeepClone: WordBool): ISCRGroupTreeNodes;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TGroupTreeNodes.CopyTo(const GroupTreeNodes: ISCRGroupTreeNodes; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(GroupTreeNodes, DeepCopy);
end;

function  TGroupTreeNodes.Equals(const GroupTreeNodes: ISCRGroupTreeNodes): WordBool;
begin
  Result := DefaultInterface.Equals(GroupTreeNodes);
end;

procedure TGroupTreeNodes.Add(const GroupTreeNode: ISCRGroupTreeNode);
begin
  DefaultInterface.Add(GroupTreeNode);
end;

procedure TGroupTreeNodes.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TGroupTreeNodes.Insert(Index: Integer; const GroupTreeNode: ISCRGroupTreeNode);
begin
  DefaultInterface.Insert(Index, GroupTreeNode);
end;

procedure TGroupTreeNodes.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TGroupTreeNodes.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TGroupTreeNodes.FindIndexOf(const GroupTreeNode: ISCRGroupTreeNode): Integer;
begin
  Result := DefaultInterface.FindIndexOf(GroupTreeNode);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TGroupTreeNodesProperties.Create(AServer: TGroupTreeNodes);
begin
  inherited Create;
  FServer := AServer;
end;

function TGroupTreeNodesProperties.GetDefaultInterface: ISCRGroupTreeNodes;
begin
  Result := FServer.DefaultInterface;
end;

function  TGroupTreeNodesProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TGroupTreeNodesProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TGroupTreeNodesProperties.Get_Item(Index: Integer): ISCRGroupTreeNode;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TGroupTreeNodesProperties.Set_Item(Index: Integer; const ppVal: ISCRGroupTreeNode);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TGroupTreeNodesProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCRGridContent.Create: ICRGridContent;
begin
  Result := CreateComObject(CLASS_CRGridContent) as ICRGridContent;
end;

class function CoCRGridContent.CreateRemote(const MachineName: string): ICRGridContent;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CRGridContent) as ICRGridContent;
end;

procedure TCRGridContent.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{45777A3E-CEB7-4186-A7AD-BA63817A82EA}';
    IntfIID:   '{B6A545F8-E6B1-4EE3-879B-AB93C943B99C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCRGridContent.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICRGridContent;
  end;
end;

procedure TCRGridContent.ConnectTo(svrIntf: ICRGridContent);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCRGridContent.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCRGridContent.GetDefaultInterface: ICRGridContent;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCRGridContent.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCRGridContentProperties.Create(Self);
{$ENDIF}
end;

destructor TCRGridContent.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCRGridContent.GetServerProperties: TCRGridContentProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TCRGridContent.Get_Cursor: ISCRCursor;
begin
  Result := DefaultInterface.Cursor;
end;

procedure TCRGridContent.Set_Cursor(const pVal: ISCRCursor);
begin
  DefaultInterface.Cursor := pVal;
end;

function  TCRGridContent.Get_Captions: ISCRStrings;
begin
  Result := DefaultInterface.Captions;
end;

procedure TCRGridContent.Set_Captions(const pVal: ISCRStrings);
begin
  DefaultInterface.Captions := pVal;
end;

function  TCRGridContent.Get_PageSize: Integer;
begin
  Result := DefaultInterface.PageSize;
end;

procedure TCRGridContent.Set_PageSize(pVal: Integer);
begin
  DefaultInterface.PageSize := pVal;
end;

function  TCRGridContent.Get_StartRecordNumber: Integer;
begin
  Result := DefaultInterface.StartRecordNumber;
end;

procedure TCRGridContent.Set_StartRecordNumber(pVal: Integer);
begin
  DefaultInterface.StartRecordNumber := pVal;
end;

function  TCRGridContent.Get_CaptionStyle: WideString;
begin
  Result := DefaultInterface.CaptionStyle;
end;

procedure TCRGridContent.Set_CaptionStyle(const pVal: WideString);
  { Warning: The property CaptionStyle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CaptionStyle := pVal;
end;

function  TCRGridContent.Get_ContentStyle: WideString;
begin
  Result := DefaultInterface.ContentStyle;
end;

procedure TCRGridContent.Set_ContentStyle(const pVal: WideString);
  { Warning: The property ContentStyle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ContentStyle := pVal;
end;

function  TCRGridContent.Get_Title: WideString;
begin
  Result := DefaultInterface.Title;
end;

procedure TCRGridContent.Set_Title(const pVal: WideString);
  { Warning: The property Title has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Title := pVal;
end;

function  TCRGridContent.Get_TitleStyle: WideString;
begin
  Result := DefaultInterface.TitleStyle;
end;

procedure TCRGridContent.Set_TitleStyle(const pVal: WideString);
  { Warning: The property TitleStyle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TitleStyle := pVal;
end;

function  TCRGridContent.Get_TopToolbar: ISCRToolbar;
begin
  Result := DefaultInterface.TopToolbar;
end;

procedure TCRGridContent.Set_TopToolbar(const pVal: ISCRToolbar);
begin
  DefaultInterface.TopToolbar := pVal;
end;

function  TCRGridContent.Get_BottomToolbar: ISCRToolbar;
begin
  Result := DefaultInterface.BottomToolbar;
end;

procedure TCRGridContent.Set_BottomToolbar(const pVal: ISCRToolbar);
begin
  DefaultInterface.BottomToolbar := pVal;
end;

function  TCRGridContent.Get_GridColumnCollection: IGridColumnCollection;
begin
  Result := DefaultInterface.GridColumnCollection;
end;

procedure TCRGridContent.Set_GridColumnCollection(const pVal: IGridColumnCollection);
begin
  DefaultInterface.GridColumnCollection := pVal;
end;

function  TCRGridContent.Get_Groups: ISCRGroups;
begin
  Result := DefaultInterface.Groups;
end;

procedure TCRGridContent.Set_Groups(const pVal: ISCRGroups);
begin
  DefaultInterface.Groups := pVal;
end;

function  TCRGridContent.Get_TableStyle: WideString;
begin
  Result := DefaultInterface.TableStyle;
end;

procedure TCRGridContent.Set_TableStyle(const pVal: WideString);
  { Warning: The property TableStyle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TableStyle := pVal;
end;

function  TCRGridContent.Get_DisplayRecordNumber: WordBool;
begin
  Result := DefaultInterface.DisplayRecordNumber;
end;

procedure TCRGridContent.Set_DisplayRecordNumber(pVal: WordBool);
begin
  DefaultInterface.DisplayRecordNumber := pVal;
end;

function  TCRGridContent.Get_IsGridAlignedWithToolbar: WordBool;
begin
  Result := DefaultInterface.IsGridAlignedWithToolbar;
end;

procedure TCRGridContent.Set_IsGridAlignedWithToolbar(pVal: WordBool);
begin
  DefaultInterface.IsGridAlignedWithToolbar := pVal;
end;

function  TCRGridContent.Get_RecordNumberStyle: WideString;
begin
  Result := DefaultInterface.RecordNumberStyle;
end;

procedure TCRGridContent.Set_RecordNumberStyle(const pVal: WideString);
  { Warning: The property RecordNumberStyle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RecordNumberStyle := pVal;
end;

function  TCRGridContent.Get_DisplayHyperlink: WordBool;
begin
  Result := DefaultInterface.DisplayHyperlink;
end;

procedure TCRGridContent.Set_DisplayHyperlink(pVal: WordBool);
begin
  DefaultInterface.DisplayHyperlink := pVal;
end;

function  TCRGridContent.Get_AlternateContentStyle: WideString;
begin
  Result := DefaultInterface.AlternateContentStyle;
end;

procedure TCRGridContent.Set_AlternateContentStyle(const pVal: WideString);
  { Warning: The property AlternateContentStyle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AlternateContentStyle := pVal;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCRGridContentProperties.Create(AServer: TCRGridContent);
begin
  inherited Create;
  FServer := AServer;
end;

function TCRGridContentProperties.GetDefaultInterface: ICRGridContent;
begin
  Result := FServer.DefaultInterface;
end;

function  TCRGridContentProperties.Get_Cursor: ISCRCursor;
begin
  Result := DefaultInterface.Cursor;
end;

procedure TCRGridContentProperties.Set_Cursor(const pVal: ISCRCursor);
begin
  DefaultInterface.Cursor := pVal;
end;

function  TCRGridContentProperties.Get_Captions: ISCRStrings;
begin
  Result := DefaultInterface.Captions;
end;

procedure TCRGridContentProperties.Set_Captions(const pVal: ISCRStrings);
begin
  DefaultInterface.Captions := pVal;
end;

function  TCRGridContentProperties.Get_PageSize: Integer;
begin
  Result := DefaultInterface.PageSize;
end;

procedure TCRGridContentProperties.Set_PageSize(pVal: Integer);
begin
  DefaultInterface.PageSize := pVal;
end;

function  TCRGridContentProperties.Get_StartRecordNumber: Integer;
begin
  Result := DefaultInterface.StartRecordNumber;
end;

procedure TCRGridContentProperties.Set_StartRecordNumber(pVal: Integer);
begin
  DefaultInterface.StartRecordNumber := pVal;
end;

function  TCRGridContentProperties.Get_CaptionStyle: WideString;
begin
  Result := DefaultInterface.CaptionStyle;
end;

procedure TCRGridContentProperties.Set_CaptionStyle(const pVal: WideString);
  { Warning: The property CaptionStyle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CaptionStyle := pVal;
end;

function  TCRGridContentProperties.Get_ContentStyle: WideString;
begin
  Result := DefaultInterface.ContentStyle;
end;

procedure TCRGridContentProperties.Set_ContentStyle(const pVal: WideString);
  { Warning: The property ContentStyle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ContentStyle := pVal;
end;

function  TCRGridContentProperties.Get_Title: WideString;
begin
  Result := DefaultInterface.Title;
end;

procedure TCRGridContentProperties.Set_Title(const pVal: WideString);
  { Warning: The property Title has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Title := pVal;
end;

function  TCRGridContentProperties.Get_TitleStyle: WideString;
begin
  Result := DefaultInterface.TitleStyle;
end;

procedure TCRGridContentProperties.Set_TitleStyle(const pVal: WideString);
  { Warning: The property TitleStyle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TitleStyle := pVal;
end;

function  TCRGridContentProperties.Get_TopToolbar: ISCRToolbar;
begin
  Result := DefaultInterface.TopToolbar;
end;

procedure TCRGridContentProperties.Set_TopToolbar(const pVal: ISCRToolbar);
begin
  DefaultInterface.TopToolbar := pVal;
end;

function  TCRGridContentProperties.Get_BottomToolbar: ISCRToolbar;
begin
  Result := DefaultInterface.BottomToolbar;
end;

procedure TCRGridContentProperties.Set_BottomToolbar(const pVal: ISCRToolbar);
begin
  DefaultInterface.BottomToolbar := pVal;
end;

function  TCRGridContentProperties.Get_GridColumnCollection: IGridColumnCollection;
begin
  Result := DefaultInterface.GridColumnCollection;
end;

procedure TCRGridContentProperties.Set_GridColumnCollection(const pVal: IGridColumnCollection);
begin
  DefaultInterface.GridColumnCollection := pVal;
end;

function  TCRGridContentProperties.Get_Groups: ISCRGroups;
begin
  Result := DefaultInterface.Groups;
end;

procedure TCRGridContentProperties.Set_Groups(const pVal: ISCRGroups);
begin
  DefaultInterface.Groups := pVal;
end;

function  TCRGridContentProperties.Get_TableStyle: WideString;
begin
  Result := DefaultInterface.TableStyle;
end;

procedure TCRGridContentProperties.Set_TableStyle(const pVal: WideString);
  { Warning: The property TableStyle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TableStyle := pVal;
end;

function  TCRGridContentProperties.Get_DisplayRecordNumber: WordBool;
begin
  Result := DefaultInterface.DisplayRecordNumber;
end;

procedure TCRGridContentProperties.Set_DisplayRecordNumber(pVal: WordBool);
begin
  DefaultInterface.DisplayRecordNumber := pVal;
end;

function  TCRGridContentProperties.Get_IsGridAlignedWithToolbar: WordBool;
begin
  Result := DefaultInterface.IsGridAlignedWithToolbar;
end;

procedure TCRGridContentProperties.Set_IsGridAlignedWithToolbar(pVal: WordBool);
begin
  DefaultInterface.IsGridAlignedWithToolbar := pVal;
end;

function  TCRGridContentProperties.Get_RecordNumberStyle: WideString;
begin
  Result := DefaultInterface.RecordNumberStyle;
end;

procedure TCRGridContentProperties.Set_RecordNumberStyle(const pVal: WideString);
  { Warning: The property RecordNumberStyle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RecordNumberStyle := pVal;
end;

function  TCRGridContentProperties.Get_DisplayHyperlink: WordBool;
begin
  Result := DefaultInterface.DisplayHyperlink;
end;

procedure TCRGridContentProperties.Set_DisplayHyperlink(pVal: WordBool);
begin
  DefaultInterface.DisplayHyperlink := pVal;
end;

function  TCRGridContentProperties.Get_AlternateContentStyle: WideString;
begin
  Result := DefaultInterface.AlternateContentStyle;
end;

procedure TCRGridContentProperties.Set_AlternateContentStyle(const pVal: WideString);
  { Warning: The property AlternateContentStyle has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AlternateContentStyle := pVal;
end;

{$ENDIF}

class function CoEPFFactory.Create: ISCREPFFactory;
begin
  Result := CreateComObject(CLASS_EPFFactory) as ISCREPFFactory;
end;

class function CoEPFFactory.CreateRemote(const MachineName: string): ISCREPFFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EPFFactory) as ISCREPFFactory;
end;

procedure TEPFFactory.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{886CC075-75B3-44B6-88FE-106B5D3600D2}';
    IntfIID:   '{A61E7792-3E6E-4C11-8BBF-A302B50A9991}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEPFFactory.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCREPFFactory;
  end;
end;

procedure TEPFFactory.ConnectTo(svrIntf: ISCREPFFactory);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEPFFactory.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEPFFactory.GetDefaultInterface: ISCREPFFactory;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TEPFFactory.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TEPFFactoryProperties.Create(Self);
{$ENDIF}
end;

destructor TEPFFactory.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TEPFFactory.GetServerProperties: TEPFFactoryProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TEPFFactory.GetPageObject(epfData: OleVariant): ISCRPageObjectInstance;
begin
  Result := DefaultInterface.GetPageObject(epfData);
end;

function  TEPFFactory.GetLocaleSpecificPageObject(epfData: OleVariant; locale: LongWord): ISCRPageObjectInstance;
begin
  Result := DefaultInterface.GetLocaleSpecificPageObject(epfData, locale);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TEPFFactoryProperties.Create(AServer: TEPFFactory);
begin
  inherited Create;
  FServer := AServer;
end;

function TEPFFactoryProperties.GetDefaultInterface: ISCREPFFactory;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoETFFactory.Create: ISCRETFFactory;
begin
  Result := CreateComObject(CLASS_ETFFactory) as ISCRETFFactory;
end;

class function CoETFFactory.CreateRemote(const MachineName: string): ISCRETFFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ETFFactory) as ISCRETFFactory;
end;

procedure TETFFactory.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6EFC46C1-3704-4DDC-A488-C0D17E08CC4A}';
    IntfIID:   '{F2FDE6FE-8E54-4257-84C9-3CA9AF4A8B4A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TETFFactory.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRETFFactory;
  end;
end;

procedure TETFFactory.ConnectTo(svrIntf: ISCRETFFactory);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TETFFactory.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TETFFactory.GetDefaultInterface: ISCRETFFactory;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TETFFactory.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TETFFactoryProperties.Create(Self);
{$ENDIF}
end;

destructor TETFFactory.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TETFFactory.GetServerProperties: TETFFactoryProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TETFFactory.GetGroupTree(etfData: OleVariant): ISCRGroupTree;
begin
  Result := DefaultInterface.GetGroupTree(etfData);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TETFFactoryProperties.Create(AServer: TETFFactory);
begin
  inherited Create;
  FServer := AServer;
end;

function TETFFactoryProperties.GetDefaultInterface: ISCRETFFactory;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoToolbar.Create: ISCRToolbar;
begin
  Result := CreateComObject(CLASS_Toolbar) as ISCRToolbar;
end;

class function CoToolbar.CreateRemote(const MachineName: string): ISCRToolbar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Toolbar) as ISCRToolbar;
end;

procedure TToolbar.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{82CC8DDE-C4BF-4522-9C22-7EF5D446994E}';
    IntfIID:   '{952C196D-9307-4A58-9F92-96C18354CAC7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TToolbar.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRToolbar;
  end;
end;

procedure TToolbar.ConnectTo(svrIntf: ISCRToolbar);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TToolbar.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TToolbar.GetDefaultInterface: ISCRToolbar;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TToolbar.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TToolbarProperties.Create(Self);
{$ENDIF}
end;

destructor TToolbar.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TToolbar.GetServerProperties: TToolbarProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TToolbar.Get_Left: Double;
begin
  Result := DefaultInterface.Left;
end;

procedure TToolbar.Set_Left(pVal: Double);
begin
  DefaultInterface.Left := pVal;
end;

function  TToolbar.Get_Top: Double;
begin
  Result := DefaultInterface.Top;
end;

procedure TToolbar.Set_Top(pVal: Double);
begin
  DefaultInterface.Top := pVal;
end;

function  TToolbar.Get_Width: Double;
begin
  Result := DefaultInterface.Width;
end;

procedure TToolbar.Set_Width(pVal: Double);
begin
  DefaultInterface.Width := pVal;
end;

function  TToolbar.Get_Height: Double;
begin
  Result := DefaultInterface.Height;
end;

procedure TToolbar.Set_Height(pVal: Double);
begin
  DefaultInterface.Height := pVal;
end;

function  TToolbar.Get_LeftUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LeftUnit;
end;

procedure TToolbar.Set_LeftUnit(pVal: PWideChar);
  { Warning: The property LeftUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LeftUnit := pVal;
end;

function  TToolbar.Get_TopUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TopUnit;
end;

procedure TToolbar.Set_TopUnit(pVal: PWideChar);
  { Warning: The property TopUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TopUnit := pVal;
end;

function  TToolbar.Get_WidthUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.WidthUnit;
end;

procedure TToolbar.Set_WidthUnit(pVal: PWideChar);
  { Warning: The property WidthUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WidthUnit := pVal;
end;

function  TToolbar.Get_HeightUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeightUnit;
end;

procedure TToolbar.Set_HeightUnit(pVal: PWideChar);
  { Warning: The property HeightUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeightUnit := pVal;
end;

function  TToolbar.Get_Controls: ISCRToolbarControls;
begin
  Result := DefaultInterface.Controls;
end;

procedure TToolbar.Set_Controls(const pVal: ISCRToolbarControls);
begin
  DefaultInterface.Controls := pVal;
end;

function  TToolbar.Get_StyleClassName: WideString;
begin
  Result := DefaultInterface.StyleClassName;
end;

procedure TToolbar.Set_StyleClassName(const pVal: WideString);
  { Warning: The property StyleClassName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleClassName := pVal;
end;

function  TToolbar.Get_VerticalAlignment: WideString;
begin
  Result := DefaultInterface.VerticalAlignment;
end;

procedure TToolbar.Set_VerticalAlignment(const pVal: WideString);
  { Warning: The property VerticalAlignment has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VerticalAlignment := pVal;
end;

function  TToolbar.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TToolbar.Set_Name(const pVal: WideString);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TToolbar.GetLeftAndUnit: WideString;
begin
  Result := DefaultInterface.GetLeftAndUnit;
end;

function  TToolbar.GetTopAndUnit: WideString;
begin
  Result := DefaultInterface.GetTopAndUnit;
end;

function  TToolbar.GetWidthAndUnit: WideString;
begin
  Result := DefaultInterface.GetWidthAndUnit;
end;

function  TToolbar.GetHeightAndUnit: WideString;
begin
  Result := DefaultInterface.GetHeightAndUnit;
end;

procedure TToolbar.InsertToolbarAt(nIndex: Integer; const pToolbarControls: ISCRToolbarControls);
begin
  DefaultInterface.InsertToolbarAt(nIndex, pToolbarControls);
end;

function  TToolbar.FindElementWithName(const bstrNameToFind: WideString): Integer;
begin
  Result := DefaultInterface.FindElementWithName(bstrNameToFind);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TToolbarProperties.Create(AServer: TToolbar);
begin
  inherited Create;
  FServer := AServer;
end;

function TToolbarProperties.GetDefaultInterface: ISCRToolbar;
begin
  Result := FServer.DefaultInterface;
end;

function  TToolbarProperties.Get_Left: Double;
begin
  Result := DefaultInterface.Left;
end;

procedure TToolbarProperties.Set_Left(pVal: Double);
begin
  DefaultInterface.Left := pVal;
end;

function  TToolbarProperties.Get_Top: Double;
begin
  Result := DefaultInterface.Top;
end;

procedure TToolbarProperties.Set_Top(pVal: Double);
begin
  DefaultInterface.Top := pVal;
end;

function  TToolbarProperties.Get_Width: Double;
begin
  Result := DefaultInterface.Width;
end;

procedure TToolbarProperties.Set_Width(pVal: Double);
begin
  DefaultInterface.Width := pVal;
end;

function  TToolbarProperties.Get_Height: Double;
begin
  Result := DefaultInterface.Height;
end;

procedure TToolbarProperties.Set_Height(pVal: Double);
begin
  DefaultInterface.Height := pVal;
end;

function  TToolbarProperties.Get_LeftUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LeftUnit;
end;

procedure TToolbarProperties.Set_LeftUnit(pVal: PWideChar);
  { Warning: The property LeftUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LeftUnit := pVal;
end;

function  TToolbarProperties.Get_TopUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TopUnit;
end;

procedure TToolbarProperties.Set_TopUnit(pVal: PWideChar);
  { Warning: The property TopUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TopUnit := pVal;
end;

function  TToolbarProperties.Get_WidthUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.WidthUnit;
end;

procedure TToolbarProperties.Set_WidthUnit(pVal: PWideChar);
  { Warning: The property WidthUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WidthUnit := pVal;
end;

function  TToolbarProperties.Get_HeightUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeightUnit;
end;

procedure TToolbarProperties.Set_HeightUnit(pVal: PWideChar);
  { Warning: The property HeightUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeightUnit := pVal;
end;

function  TToolbarProperties.Get_Controls: ISCRToolbarControls;
begin
  Result := DefaultInterface.Controls;
end;

procedure TToolbarProperties.Set_Controls(const pVal: ISCRToolbarControls);
begin
  DefaultInterface.Controls := pVal;
end;

function  TToolbarProperties.Get_StyleClassName: WideString;
begin
  Result := DefaultInterface.StyleClassName;
end;

procedure TToolbarProperties.Set_StyleClassName(const pVal: WideString);
  { Warning: The property StyleClassName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleClassName := pVal;
end;

function  TToolbarProperties.Get_VerticalAlignment: WideString;
begin
  Result := DefaultInterface.VerticalAlignment;
end;

procedure TToolbarProperties.Set_VerticalAlignment(const pVal: WideString);
  { Warning: The property VerticalAlignment has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VerticalAlignment := pVal;
end;

function  TToolbarProperties.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TToolbarProperties.Set_Name(const pVal: WideString);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

{$ENDIF}

class function CoToolbarControls.Create: ISCRToolbarControls;
begin
  Result := CreateComObject(CLASS_ToolbarControls) as ISCRToolbarControls;
end;

class function CoToolbarControls.CreateRemote(const MachineName: string): ISCRToolbarControls;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ToolbarControls) as ISCRToolbarControls;
end;

procedure TToolbarControls.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2CEEB881-89C4-43D1-9EFE-20DA30D8A36F}';
    IntfIID:   '{8A89BBC1-798C-4980-9758-7DFB83FAFEEB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TToolbarControls.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRToolbarControls;
  end;
end;

procedure TToolbarControls.ConnectTo(svrIntf: ISCRToolbarControls);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TToolbarControls.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TToolbarControls.GetDefaultInterface: ISCRToolbarControls;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TToolbarControls.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TToolbarControlsProperties.Create(Self);
{$ENDIF}
end;

destructor TToolbarControls.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TToolbarControls.GetServerProperties: TToolbarControlsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TToolbarControls.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarControls.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TToolbarControls.Get_Item(Index: Integer): ISCRToolbarControlBase;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TToolbarControls.Set_Item(Index: Integer; const ppVal: ISCRToolbarControlBase);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TToolbarControls.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TToolbarControls.Clone(DeepClone: WordBool): ISCRToolbarControls;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TToolbarControls.CopyTo(const ToolbarControls: ISCRToolbarControls; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ToolbarControls, DeepCopy);
end;

function  TToolbarControls.Equals(const ToolbarControls: ISCRToolbarControls): WordBool;
begin
  Result := DefaultInterface.Equals(ToolbarControls);
end;

procedure TToolbarControls.Add(const ToolbarControlBase: ISCRToolbarControlBase);
begin
  DefaultInterface.Add(ToolbarControlBase);
end;

procedure TToolbarControls.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TToolbarControls.Insert(Index: Integer; const ToolbarControlBase: ISCRToolbarControlBase);
begin
  DefaultInterface.Insert(Index, ToolbarControlBase);
end;

procedure TToolbarControls.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TToolbarControls.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TToolbarControls.FindIndexOf(const ToolbarControlBase: ISCRToolbarControlBase): Integer;
begin
  Result := DefaultInterface.FindIndexOf(ToolbarControlBase);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TToolbarControlsProperties.Create(AServer: TToolbarControls);
begin
  inherited Create;
  FServer := AServer;
end;

function TToolbarControlsProperties.GetDefaultInterface: ISCRToolbarControls;
begin
  Result := FServer.DefaultInterface;
end;

function  TToolbarControlsProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarControlsProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TToolbarControlsProperties.Get_Item(Index: Integer): ISCRToolbarControlBase;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TToolbarControlsProperties.Set_Item(Index: Integer; const ppVal: ISCRToolbarControlBase);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TToolbarControlsProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoToolbarButtonControl.Create: ISCRToolbarButtonControl;
begin
  Result := CreateComObject(CLASS_ToolbarButtonControl) as ISCRToolbarButtonControl;
end;

class function CoToolbarButtonControl.CreateRemote(const MachineName: string): ISCRToolbarButtonControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ToolbarButtonControl) as ISCRToolbarButtonControl;
end;

procedure TToolbarButtonControl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9E1C44A1-81A9-471D-83AF-668019708641}';
    IntfIID:   '{71BAEA56-9369-4CA4-83D9-86844DA0CD71}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TToolbarButtonControl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRToolbarButtonControl;
  end;
end;

procedure TToolbarButtonControl.ConnectTo(svrIntf: ISCRToolbarButtonControl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TToolbarButtonControl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TToolbarButtonControl.GetDefaultInterface: ISCRToolbarButtonControl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TToolbarButtonControl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TToolbarButtonControlProperties.Create(Self);
{$ENDIF}
end;

destructor TToolbarButtonControl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TToolbarButtonControl.GetServerProperties: TToolbarButtonControlProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TToolbarButtonControl.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarButtonControl.Get_Name: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Name;
end;

procedure TToolbarButtonControl.Set_Name(pVal: PWideChar);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TToolbarButtonControl.Get_Width: Double;
begin
  Result := DefaultInterface.Width;
end;

procedure TToolbarButtonControl.Set_Width(pVal: Double);
begin
  DefaultInterface.Width := pVal;
end;

function  TToolbarButtonControl.Get_Height: Double;
begin
  Result := DefaultInterface.Height;
end;

procedure TToolbarButtonControl.Set_Height(pVal: Double);
begin
  DefaultInterface.Height := pVal;
end;

function  TToolbarButtonControl.Get_WidthUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.WidthUnit;
end;

procedure TToolbarButtonControl.Set_WidthUnit(pVal: PWideChar);
  { Warning: The property WidthUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WidthUnit := pVal;
end;

function  TToolbarButtonControl.Get_HeightUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeightUnit;
end;

procedure TToolbarButtonControl.Set_HeightUnit(pVal: PWideChar);
  { Warning: The property HeightUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeightUnit := pVal;
end;

function  TToolbarButtonControl.Get_Kind: CrToolbarControlKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TToolbarButtonControl.Set_Kind(pVal: CrToolbarControlKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TToolbarButtonControl.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TToolbarButtonControl.Set_Enabled(pVal: WordBool);
begin
  DefaultInterface.Enabled := pVal;
end;

function  TToolbarButtonControl.Get_Action: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Action;
end;

procedure TToolbarButtonControl.Set_Action(pVal: PWideChar);
  { Warning: The property Action has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := pVal;
end;

function  TToolbarButtonControl.Get_DisplayName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DisplayName;
end;

procedure TToolbarButtonControl.Set_DisplayName(pVal: PWideChar);
  { Warning: The property DisplayName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayName := pVal;
end;

function  TToolbarButtonControl.Get_ImageName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ImageName;
end;

procedure TToolbarButtonControl.Set_ImageName(pVal: PWideChar);
  { Warning: The property ImageName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImageName := pVal;
end;

function  TToolbarButtonControl.Get_IsClientSide: WordBool;
begin
  Result := DefaultInterface.IsClientSide;
end;

procedure TToolbarButtonControl.Set_IsClientSide(pVal: WordBool);
begin
  DefaultInterface.IsClientSide := pVal;
end;

function  TToolbarButtonControl.Get_StyleClassName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.StyleClassName;
end;

procedure TToolbarButtonControl.Set_StyleClassName(pVal: PWideChar);
  { Warning: The property StyleClassName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleClassName := pVal;
end;

function  TToolbarButtonControl.Get_PartnerControl: ISCRToolbarControlBase;
begin
  Result := DefaultInterface.PartnerControl;
end;

procedure TToolbarButtonControl.Set_PartnerControl(const pVal: ISCRToolbarControlBase);
begin
  DefaultInterface.PartnerControl := pVal;
end;

function  TToolbarButtonControl.Get_FlyOverImage: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FlyOverImage;
end;

procedure TToolbarButtonControl.Set_FlyOverImage(pVal: PWideChar);
  { Warning: The property FlyOverImage has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FlyOverImage := pVal;
end;

function  TToolbarButtonControl.Get_Target: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Target;
end;

procedure TToolbarButtonControl.Set_Target(pVal: PWideChar);
  { Warning: The property Target has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Target := pVal;
end;

function  TToolbarButtonControl.Get_TextValue: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TextValue;
end;

procedure TToolbarButtonControl.Set_TextValue(pVal: PWideChar);
  { Warning: The property TextValue has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TextValue := pVal;
end;

function  TToolbarButtonControl.Get_Tooltip: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Tooltip;
end;

procedure TToolbarButtonControl.Set_Tooltip(pVal: PWideChar);
  { Warning: The property Tooltip has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tooltip := pVal;
end;

function  TToolbarButtonControl.Get_UseButton: WordBool;
begin
  Result := DefaultInterface.UseButton;
end;

procedure TToolbarButtonControl.Set_UseButton(pVal: WordBool);
begin
  DefaultInterface.UseButton := pVal;
end;

function  TToolbarButtonControl.Clone(DeepClone: WordBool): ISCRToolbarControlBase;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TToolbarButtonControl.CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; 
                                       DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ToolbarControlBase, DeepCopy);
end;

function  TToolbarButtonControl.Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool;
begin
  Result := DefaultInterface.Equals(ToolbarControlBase);
end;

procedure TToolbarButtonControl.GetWidthAndUnit(out pVal: WideString);
begin
  DefaultInterface.GetWidthAndUnit(pVal);
end;

procedure TToolbarButtonControl.GetHeightAndUnit(out pVal: WideString);
begin
  DefaultInterface.GetHeightAndUnit(pVal);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TToolbarButtonControlProperties.Create(AServer: TToolbarButtonControl);
begin
  inherited Create;
  FServer := AServer;
end;

function TToolbarButtonControlProperties.GetDefaultInterface: ISCRToolbarButtonControl;
begin
  Result := FServer.DefaultInterface;
end;

function  TToolbarButtonControlProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarButtonControlProperties.Get_Name: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Name;
end;

procedure TToolbarButtonControlProperties.Set_Name(pVal: PWideChar);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TToolbarButtonControlProperties.Get_Width: Double;
begin
  Result := DefaultInterface.Width;
end;

procedure TToolbarButtonControlProperties.Set_Width(pVal: Double);
begin
  DefaultInterface.Width := pVal;
end;

function  TToolbarButtonControlProperties.Get_Height: Double;
begin
  Result := DefaultInterface.Height;
end;

procedure TToolbarButtonControlProperties.Set_Height(pVal: Double);
begin
  DefaultInterface.Height := pVal;
end;

function  TToolbarButtonControlProperties.Get_WidthUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.WidthUnit;
end;

procedure TToolbarButtonControlProperties.Set_WidthUnit(pVal: PWideChar);
  { Warning: The property WidthUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WidthUnit := pVal;
end;

function  TToolbarButtonControlProperties.Get_HeightUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeightUnit;
end;

procedure TToolbarButtonControlProperties.Set_HeightUnit(pVal: PWideChar);
  { Warning: The property HeightUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeightUnit := pVal;
end;

function  TToolbarButtonControlProperties.Get_Kind: CrToolbarControlKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TToolbarButtonControlProperties.Set_Kind(pVal: CrToolbarControlKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TToolbarButtonControlProperties.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TToolbarButtonControlProperties.Set_Enabled(pVal: WordBool);
begin
  DefaultInterface.Enabled := pVal;
end;

function  TToolbarButtonControlProperties.Get_Action: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Action;
end;

procedure TToolbarButtonControlProperties.Set_Action(pVal: PWideChar);
  { Warning: The property Action has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := pVal;
end;

function  TToolbarButtonControlProperties.Get_DisplayName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DisplayName;
end;

procedure TToolbarButtonControlProperties.Set_DisplayName(pVal: PWideChar);
  { Warning: The property DisplayName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayName := pVal;
end;

function  TToolbarButtonControlProperties.Get_ImageName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ImageName;
end;

procedure TToolbarButtonControlProperties.Set_ImageName(pVal: PWideChar);
  { Warning: The property ImageName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImageName := pVal;
end;

function  TToolbarButtonControlProperties.Get_IsClientSide: WordBool;
begin
  Result := DefaultInterface.IsClientSide;
end;

procedure TToolbarButtonControlProperties.Set_IsClientSide(pVal: WordBool);
begin
  DefaultInterface.IsClientSide := pVal;
end;

function  TToolbarButtonControlProperties.Get_StyleClassName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.StyleClassName;
end;

procedure TToolbarButtonControlProperties.Set_StyleClassName(pVal: PWideChar);
  { Warning: The property StyleClassName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleClassName := pVal;
end;

function  TToolbarButtonControlProperties.Get_PartnerControl: ISCRToolbarControlBase;
begin
  Result := DefaultInterface.PartnerControl;
end;

procedure TToolbarButtonControlProperties.Set_PartnerControl(const pVal: ISCRToolbarControlBase);
begin
  DefaultInterface.PartnerControl := pVal;
end;

function  TToolbarButtonControlProperties.Get_FlyOverImage: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FlyOverImage;
end;

procedure TToolbarButtonControlProperties.Set_FlyOverImage(pVal: PWideChar);
  { Warning: The property FlyOverImage has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FlyOverImage := pVal;
end;

function  TToolbarButtonControlProperties.Get_Target: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Target;
end;

procedure TToolbarButtonControlProperties.Set_Target(pVal: PWideChar);
  { Warning: The property Target has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Target := pVal;
end;

function  TToolbarButtonControlProperties.Get_TextValue: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TextValue;
end;

procedure TToolbarButtonControlProperties.Set_TextValue(pVal: PWideChar);
  { Warning: The property TextValue has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TextValue := pVal;
end;

function  TToolbarButtonControlProperties.Get_Tooltip: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Tooltip;
end;

procedure TToolbarButtonControlProperties.Set_Tooltip(pVal: PWideChar);
  { Warning: The property Tooltip has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tooltip := pVal;
end;

function  TToolbarButtonControlProperties.Get_UseButton: WordBool;
begin
  Result := DefaultInterface.UseButton;
end;

procedure TToolbarButtonControlProperties.Set_UseButton(pVal: WordBool);
begin
  DefaultInterface.UseButton := pVal;
end;

{$ENDIF}

class function CoToolbarLabelControl.Create: ISCRToolbarLabelControl;
begin
  Result := CreateComObject(CLASS_ToolbarLabelControl) as ISCRToolbarLabelControl;
end;

class function CoToolbarLabelControl.CreateRemote(const MachineName: string): ISCRToolbarLabelControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ToolbarLabelControl) as ISCRToolbarLabelControl;
end;

procedure TToolbarLabelControl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EEF47BD4-F627-44E1-8357-F5206BB6F28B}';
    IntfIID:   '{8595CE2B-75FD-4387-BEE7-FF0ACE995757}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TToolbarLabelControl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRToolbarLabelControl;
  end;
end;

procedure TToolbarLabelControl.ConnectTo(svrIntf: ISCRToolbarLabelControl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TToolbarLabelControl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TToolbarLabelControl.GetDefaultInterface: ISCRToolbarLabelControl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TToolbarLabelControl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TToolbarLabelControlProperties.Create(Self);
{$ENDIF}
end;

destructor TToolbarLabelControl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TToolbarLabelControl.GetServerProperties: TToolbarLabelControlProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TToolbarLabelControl.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarLabelControl.Get_Name: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Name;
end;

procedure TToolbarLabelControl.Set_Name(pVal: PWideChar);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TToolbarLabelControl.Get_Width: Double;
begin
  Result := DefaultInterface.Width;
end;

procedure TToolbarLabelControl.Set_Width(pVal: Double);
begin
  DefaultInterface.Width := pVal;
end;

function  TToolbarLabelControl.Get_Height: Double;
begin
  Result := DefaultInterface.Height;
end;

procedure TToolbarLabelControl.Set_Height(pVal: Double);
begin
  DefaultInterface.Height := pVal;
end;

function  TToolbarLabelControl.Get_WidthUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.WidthUnit;
end;

procedure TToolbarLabelControl.Set_WidthUnit(pVal: PWideChar);
  { Warning: The property WidthUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WidthUnit := pVal;
end;

function  TToolbarLabelControl.Get_HeightUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeightUnit;
end;

procedure TToolbarLabelControl.Set_HeightUnit(pVal: PWideChar);
  { Warning: The property HeightUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeightUnit := pVal;
end;

function  TToolbarLabelControl.Get_Kind: CrToolbarControlKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TToolbarLabelControl.Set_Kind(pVal: CrToolbarControlKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TToolbarLabelControl.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TToolbarLabelControl.Set_Enabled(pVal: WordBool);
begin
  DefaultInterface.Enabled := pVal;
end;

function  TToolbarLabelControl.Get_Action: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Action;
end;

procedure TToolbarLabelControl.Set_Action(pVal: PWideChar);
  { Warning: The property Action has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := pVal;
end;

function  TToolbarLabelControl.Get_DisplayName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DisplayName;
end;

procedure TToolbarLabelControl.Set_DisplayName(pVal: PWideChar);
  { Warning: The property DisplayName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayName := pVal;
end;

function  TToolbarLabelControl.Get_ImageName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ImageName;
end;

procedure TToolbarLabelControl.Set_ImageName(pVal: PWideChar);
  { Warning: The property ImageName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImageName := pVal;
end;

function  TToolbarLabelControl.Get_IsClientSide: WordBool;
begin
  Result := DefaultInterface.IsClientSide;
end;

procedure TToolbarLabelControl.Set_IsClientSide(pVal: WordBool);
begin
  DefaultInterface.IsClientSide := pVal;
end;

function  TToolbarLabelControl.Get_StyleClassName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.StyleClassName;
end;

procedure TToolbarLabelControl.Set_StyleClassName(pVal: PWideChar);
  { Warning: The property StyleClassName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleClassName := pVal;
end;

function  TToolbarLabelControl.Get_LabelText: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LabelText;
end;

procedure TToolbarLabelControl.Set_LabelText(pVal: PWideChar);
  { Warning: The property LabelText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LabelText := pVal;
end;

function  TToolbarLabelControl.Clone(DeepClone: WordBool): ISCRToolbarControlBase;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TToolbarLabelControl.CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; 
                                      DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ToolbarControlBase, DeepCopy);
end;

function  TToolbarLabelControl.Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool;
begin
  Result := DefaultInterface.Equals(ToolbarControlBase);
end;

procedure TToolbarLabelControl.GetWidthAndUnit(out pVal: WideString);
begin
  DefaultInterface.GetWidthAndUnit(pVal);
end;

procedure TToolbarLabelControl.GetHeightAndUnit(out pVal: WideString);
begin
  DefaultInterface.GetHeightAndUnit(pVal);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TToolbarLabelControlProperties.Create(AServer: TToolbarLabelControl);
begin
  inherited Create;
  FServer := AServer;
end;

function TToolbarLabelControlProperties.GetDefaultInterface: ISCRToolbarLabelControl;
begin
  Result := FServer.DefaultInterface;
end;

function  TToolbarLabelControlProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarLabelControlProperties.Get_Name: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Name;
end;

procedure TToolbarLabelControlProperties.Set_Name(pVal: PWideChar);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TToolbarLabelControlProperties.Get_Width: Double;
begin
  Result := DefaultInterface.Width;
end;

procedure TToolbarLabelControlProperties.Set_Width(pVal: Double);
begin
  DefaultInterface.Width := pVal;
end;

function  TToolbarLabelControlProperties.Get_Height: Double;
begin
  Result := DefaultInterface.Height;
end;

procedure TToolbarLabelControlProperties.Set_Height(pVal: Double);
begin
  DefaultInterface.Height := pVal;
end;

function  TToolbarLabelControlProperties.Get_WidthUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.WidthUnit;
end;

procedure TToolbarLabelControlProperties.Set_WidthUnit(pVal: PWideChar);
  { Warning: The property WidthUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WidthUnit := pVal;
end;

function  TToolbarLabelControlProperties.Get_HeightUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeightUnit;
end;

procedure TToolbarLabelControlProperties.Set_HeightUnit(pVal: PWideChar);
  { Warning: The property HeightUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeightUnit := pVal;
end;

function  TToolbarLabelControlProperties.Get_Kind: CrToolbarControlKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TToolbarLabelControlProperties.Set_Kind(pVal: CrToolbarControlKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TToolbarLabelControlProperties.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TToolbarLabelControlProperties.Set_Enabled(pVal: WordBool);
begin
  DefaultInterface.Enabled := pVal;
end;

function  TToolbarLabelControlProperties.Get_Action: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Action;
end;

procedure TToolbarLabelControlProperties.Set_Action(pVal: PWideChar);
  { Warning: The property Action has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := pVal;
end;

function  TToolbarLabelControlProperties.Get_DisplayName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DisplayName;
end;

procedure TToolbarLabelControlProperties.Set_DisplayName(pVal: PWideChar);
  { Warning: The property DisplayName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayName := pVal;
end;

function  TToolbarLabelControlProperties.Get_ImageName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ImageName;
end;

procedure TToolbarLabelControlProperties.Set_ImageName(pVal: PWideChar);
  { Warning: The property ImageName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImageName := pVal;
end;

function  TToolbarLabelControlProperties.Get_IsClientSide: WordBool;
begin
  Result := DefaultInterface.IsClientSide;
end;

procedure TToolbarLabelControlProperties.Set_IsClientSide(pVal: WordBool);
begin
  DefaultInterface.IsClientSide := pVal;
end;

function  TToolbarLabelControlProperties.Get_StyleClassName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.StyleClassName;
end;

procedure TToolbarLabelControlProperties.Set_StyleClassName(pVal: PWideChar);
  { Warning: The property StyleClassName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleClassName := pVal;
end;

function  TToolbarLabelControlProperties.Get_LabelText: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.LabelText;
end;

procedure TToolbarLabelControlProperties.Set_LabelText(pVal: PWideChar);
  { Warning: The property LabelText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.LabelText := pVal;
end;

{$ENDIF}

class function CoToolbarTextBoxControl.Create: ISCRToolbarTextBoxControl;
begin
  Result := CreateComObject(CLASS_ToolbarTextBoxControl) as ISCRToolbarTextBoxControl;
end;

class function CoToolbarTextBoxControl.CreateRemote(const MachineName: string): ISCRToolbarTextBoxControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ToolbarTextBoxControl) as ISCRToolbarTextBoxControl;
end;

procedure TToolbarTextBoxControl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{74FD15A1-E03D-4DDD-B11B-90C7EEBF4523}';
    IntfIID:   '{C69F41A6-22FB-4A2E-B210-39851E53BD12}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TToolbarTextBoxControl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRToolbarTextBoxControl;
  end;
end;

procedure TToolbarTextBoxControl.ConnectTo(svrIntf: ISCRToolbarTextBoxControl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TToolbarTextBoxControl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TToolbarTextBoxControl.GetDefaultInterface: ISCRToolbarTextBoxControl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TToolbarTextBoxControl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TToolbarTextBoxControlProperties.Create(Self);
{$ENDIF}
end;

destructor TToolbarTextBoxControl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TToolbarTextBoxControl.GetServerProperties: TToolbarTextBoxControlProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TToolbarTextBoxControl.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarTextBoxControl.Get_Name: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Name;
end;

procedure TToolbarTextBoxControl.Set_Name(pVal: PWideChar);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TToolbarTextBoxControl.Get_Width: Double;
begin
  Result := DefaultInterface.Width;
end;

procedure TToolbarTextBoxControl.Set_Width(pVal: Double);
begin
  DefaultInterface.Width := pVal;
end;

function  TToolbarTextBoxControl.Get_Height: Double;
begin
  Result := DefaultInterface.Height;
end;

procedure TToolbarTextBoxControl.Set_Height(pVal: Double);
begin
  DefaultInterface.Height := pVal;
end;

function  TToolbarTextBoxControl.Get_WidthUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.WidthUnit;
end;

procedure TToolbarTextBoxControl.Set_WidthUnit(pVal: PWideChar);
  { Warning: The property WidthUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WidthUnit := pVal;
end;

function  TToolbarTextBoxControl.Get_HeightUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeightUnit;
end;

procedure TToolbarTextBoxControl.Set_HeightUnit(pVal: PWideChar);
  { Warning: The property HeightUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeightUnit := pVal;
end;

function  TToolbarTextBoxControl.Get_Kind: CrToolbarControlKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TToolbarTextBoxControl.Set_Kind(pVal: CrToolbarControlKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TToolbarTextBoxControl.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TToolbarTextBoxControl.Set_Enabled(pVal: WordBool);
begin
  DefaultInterface.Enabled := pVal;
end;

function  TToolbarTextBoxControl.Get_Action: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Action;
end;

procedure TToolbarTextBoxControl.Set_Action(pVal: PWideChar);
  { Warning: The property Action has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := pVal;
end;

function  TToolbarTextBoxControl.Get_DisplayName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DisplayName;
end;

procedure TToolbarTextBoxControl.Set_DisplayName(pVal: PWideChar);
  { Warning: The property DisplayName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayName := pVal;
end;

function  TToolbarTextBoxControl.Get_ImageName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ImageName;
end;

procedure TToolbarTextBoxControl.Set_ImageName(pVal: PWideChar);
  { Warning: The property ImageName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImageName := pVal;
end;

function  TToolbarTextBoxControl.Get_IsClientSide: WordBool;
begin
  Result := DefaultInterface.IsClientSide;
end;

procedure TToolbarTextBoxControl.Set_IsClientSide(pVal: WordBool);
begin
  DefaultInterface.IsClientSide := pVal;
end;

function  TToolbarTextBoxControl.Get_StyleClassName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.StyleClassName;
end;

procedure TToolbarTextBoxControl.Set_StyleClassName(pVal: PWideChar);
  { Warning: The property StyleClassName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleClassName := pVal;
end;

function  TToolbarTextBoxControl.Get_DefaultText: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DefaultText;
end;

procedure TToolbarTextBoxControl.Set_DefaultText(pVal: PWideChar);
  { Warning: The property DefaultText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DefaultText := pVal;
end;

function  TToolbarTextBoxControl.Get_IsMultiLine: WordBool;
begin
  Result := DefaultInterface.IsMultiLine;
end;

procedure TToolbarTextBoxControl.Set_IsMultiLine(pVal: WordBool);
begin
  DefaultInterface.IsMultiLine := pVal;
end;

function  TToolbarTextBoxControl.Clone(DeepClone: WordBool): ISCRToolbarControlBase;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TToolbarTextBoxControl.CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; 
                                        DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ToolbarControlBase, DeepCopy);
end;

function  TToolbarTextBoxControl.Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool;
begin
  Result := DefaultInterface.Equals(ToolbarControlBase);
end;

procedure TToolbarTextBoxControl.GetWidthAndUnit(out pVal: WideString);
begin
  DefaultInterface.GetWidthAndUnit(pVal);
end;

procedure TToolbarTextBoxControl.GetHeightAndUnit(out pVal: WideString);
begin
  DefaultInterface.GetHeightAndUnit(pVal);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TToolbarTextBoxControlProperties.Create(AServer: TToolbarTextBoxControl);
begin
  inherited Create;
  FServer := AServer;
end;

function TToolbarTextBoxControlProperties.GetDefaultInterface: ISCRToolbarTextBoxControl;
begin
  Result := FServer.DefaultInterface;
end;

function  TToolbarTextBoxControlProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarTextBoxControlProperties.Get_Name: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Name;
end;

procedure TToolbarTextBoxControlProperties.Set_Name(pVal: PWideChar);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_Width: Double;
begin
  Result := DefaultInterface.Width;
end;

procedure TToolbarTextBoxControlProperties.Set_Width(pVal: Double);
begin
  DefaultInterface.Width := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_Height: Double;
begin
  Result := DefaultInterface.Height;
end;

procedure TToolbarTextBoxControlProperties.Set_Height(pVal: Double);
begin
  DefaultInterface.Height := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_WidthUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.WidthUnit;
end;

procedure TToolbarTextBoxControlProperties.Set_WidthUnit(pVal: PWideChar);
  { Warning: The property WidthUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WidthUnit := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_HeightUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeightUnit;
end;

procedure TToolbarTextBoxControlProperties.Set_HeightUnit(pVal: PWideChar);
  { Warning: The property HeightUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeightUnit := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_Kind: CrToolbarControlKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TToolbarTextBoxControlProperties.Set_Kind(pVal: CrToolbarControlKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TToolbarTextBoxControlProperties.Set_Enabled(pVal: WordBool);
begin
  DefaultInterface.Enabled := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_Action: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Action;
end;

procedure TToolbarTextBoxControlProperties.Set_Action(pVal: PWideChar);
  { Warning: The property Action has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_DisplayName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DisplayName;
end;

procedure TToolbarTextBoxControlProperties.Set_DisplayName(pVal: PWideChar);
  { Warning: The property DisplayName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayName := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_ImageName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ImageName;
end;

procedure TToolbarTextBoxControlProperties.Set_ImageName(pVal: PWideChar);
  { Warning: The property ImageName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImageName := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_IsClientSide: WordBool;
begin
  Result := DefaultInterface.IsClientSide;
end;

procedure TToolbarTextBoxControlProperties.Set_IsClientSide(pVal: WordBool);
begin
  DefaultInterface.IsClientSide := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_StyleClassName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.StyleClassName;
end;

procedure TToolbarTextBoxControlProperties.Set_StyleClassName(pVal: PWideChar);
  { Warning: The property StyleClassName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleClassName := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_DefaultText: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DefaultText;
end;

procedure TToolbarTextBoxControlProperties.Set_DefaultText(pVal: PWideChar);
  { Warning: The property DefaultText has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DefaultText := pVal;
end;

function  TToolbarTextBoxControlProperties.Get_IsMultiLine: WordBool;
begin
  Result := DefaultInterface.IsMultiLine;
end;

procedure TToolbarTextBoxControlProperties.Set_IsMultiLine(pVal: WordBool);
begin
  DefaultInterface.IsMultiLine := pVal;
end;

{$ENDIF}

class function CoToolbarListItem.Create: ISCRToolbarListItem;
begin
  Result := CreateComObject(CLASS_ToolbarListItem) as ISCRToolbarListItem;
end;

class function CoToolbarListItem.CreateRemote(const MachineName: string): ISCRToolbarListItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ToolbarListItem) as ISCRToolbarListItem;
end;

procedure TToolbarListItem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{74E12A5C-C2CB-42BD-92E5-0C61239B2228}';
    IntfIID:   '{D269B38F-1DED-4493-B326-DDFCECB224DB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TToolbarListItem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRToolbarListItem;
  end;
end;

procedure TToolbarListItem.ConnectTo(svrIntf: ISCRToolbarListItem);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TToolbarListItem.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TToolbarListItem.GetDefaultInterface: ISCRToolbarListItem;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TToolbarListItem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TToolbarListItemProperties.Create(Self);
{$ENDIF}
end;

destructor TToolbarListItem.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TToolbarListItem.GetServerProperties: TToolbarListItemProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TToolbarListItem.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarListItem.Get_DisplayName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DisplayName;
end;

procedure TToolbarListItem.Set_DisplayName(pVal: PWideChar);
  { Warning: The property DisplayName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayName := pVal;
end;

function  TToolbarListItem.Get_Value: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TToolbarListItem.Set_Value(pVal: PWideChar);
  { Warning: The property Value has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Value := pVal;
end;

function  TToolbarListItem.Clone(DeepClone: WordBool): ISCRToolbarListItem;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TToolbarListItem.CopyTo(const ToolbarListItem: ISCRToolbarListItem; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ToolbarListItem, DeepCopy);
end;

function  TToolbarListItem.Equals(const ToolbarListItem: ISCRToolbarListItem): WordBool;
begin
  Result := DefaultInterface.Equals(ToolbarListItem);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TToolbarListItemProperties.Create(AServer: TToolbarListItem);
begin
  inherited Create;
  FServer := AServer;
end;

function TToolbarListItemProperties.GetDefaultInterface: ISCRToolbarListItem;
begin
  Result := FServer.DefaultInterface;
end;

function  TToolbarListItemProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarListItemProperties.Get_DisplayName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DisplayName;
end;

procedure TToolbarListItemProperties.Set_DisplayName(pVal: PWideChar);
  { Warning: The property DisplayName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayName := pVal;
end;

function  TToolbarListItemProperties.Get_Value: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TToolbarListItemProperties.Set_Value(pVal: PWideChar);
  { Warning: The property Value has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Value := pVal;
end;

{$ENDIF}

class function CoToolbarListItemCollection.Create: ISCRToolbarListItemCollection;
begin
  Result := CreateComObject(CLASS_ToolbarListItemCollection) as ISCRToolbarListItemCollection;
end;

class function CoToolbarListItemCollection.CreateRemote(const MachineName: string): ISCRToolbarListItemCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ToolbarListItemCollection) as ISCRToolbarListItemCollection;
end;

procedure TToolbarListItemCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D4886B91-8AAA-4E41-9AA5-790EBEC01DAF}';
    IntfIID:   '{6BED962C-A63D-43B0-B347-3CE8EFC0227A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TToolbarListItemCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRToolbarListItemCollection;
  end;
end;

procedure TToolbarListItemCollection.ConnectTo(svrIntf: ISCRToolbarListItemCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TToolbarListItemCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TToolbarListItemCollection.GetDefaultInterface: ISCRToolbarListItemCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TToolbarListItemCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TToolbarListItemCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TToolbarListItemCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TToolbarListItemCollection.GetServerProperties: TToolbarListItemCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TToolbarListItemCollection.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarListItemCollection.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TToolbarListItemCollection.Get_Item(Index: Integer): ISCRToolbarListItem;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TToolbarListItemCollection.Set_Item(Index: Integer; const ppVal: ISCRToolbarListItem);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TToolbarListItemCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TToolbarListItemCollection.Clone(DeepClone: WordBool): ISCRToolbarListItemCollection;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TToolbarListItemCollection.CopyTo(const ToolbarListItemCollection: ISCRToolbarListItemCollection; 
                                            DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ToolbarListItemCollection, DeepCopy);
end;

function  TToolbarListItemCollection.Equals(const ToolbarListItemCollection: ISCRToolbarListItemCollection): WordBool;
begin
  Result := DefaultInterface.Equals(ToolbarListItemCollection);
end;

procedure TToolbarListItemCollection.Add(const ToolbarListItem: ISCRToolbarListItem);
begin
  DefaultInterface.Add(ToolbarListItem);
end;

procedure TToolbarListItemCollection.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TToolbarListItemCollection.Insert(Index: Integer; 
                                            const ToolbarListItem: ISCRToolbarListItem);
begin
  DefaultInterface.Insert(Index, ToolbarListItem);
end;

procedure TToolbarListItemCollection.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TToolbarListItemCollection.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TToolbarListItemCollection.FindIndexOf(const ToolbarListItem: ISCRToolbarListItem): Integer;
begin
  Result := DefaultInterface.FindIndexOf(ToolbarListItem);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TToolbarListItemCollectionProperties.Create(AServer: TToolbarListItemCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TToolbarListItemCollectionProperties.GetDefaultInterface: ISCRToolbarListItemCollection;
begin
  Result := FServer.DefaultInterface;
end;

function  TToolbarListItemCollectionProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarListItemCollectionProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TToolbarListItemCollectionProperties.Get_Item(Index: Integer): ISCRToolbarListItem;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TToolbarListItemCollectionProperties.Set_Item(Index: Integer; 
                                                        const ppVal: ISCRToolbarListItem);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TToolbarListItemCollectionProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoToolbarComboBoxControl.Create: ISCRToolbarComboBoxControl;
begin
  Result := CreateComObject(CLASS_ToolbarComboBoxControl) as ISCRToolbarComboBoxControl;
end;

class function CoToolbarComboBoxControl.CreateRemote(const MachineName: string): ISCRToolbarComboBoxControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ToolbarComboBoxControl) as ISCRToolbarComboBoxControl;
end;

procedure TToolbarComboBoxControl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{34BA561E-B868-4E2D-8DB3-94A4A35FF1FA}';
    IntfIID:   '{90307F79-690F-4FE1-B884-126BA55A975B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TToolbarComboBoxControl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRToolbarComboBoxControl;
  end;
end;

procedure TToolbarComboBoxControl.ConnectTo(svrIntf: ISCRToolbarComboBoxControl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TToolbarComboBoxControl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TToolbarComboBoxControl.GetDefaultInterface: ISCRToolbarComboBoxControl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TToolbarComboBoxControl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TToolbarComboBoxControlProperties.Create(Self);
{$ENDIF}
end;

destructor TToolbarComboBoxControl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TToolbarComboBoxControl.GetServerProperties: TToolbarComboBoxControlProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TToolbarComboBoxControl.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarComboBoxControl.Get_Name: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Name;
end;

procedure TToolbarComboBoxControl.Set_Name(pVal: PWideChar);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TToolbarComboBoxControl.Get_Width: Double;
begin
  Result := DefaultInterface.Width;
end;

procedure TToolbarComboBoxControl.Set_Width(pVal: Double);
begin
  DefaultInterface.Width := pVal;
end;

function  TToolbarComboBoxControl.Get_Height: Double;
begin
  Result := DefaultInterface.Height;
end;

procedure TToolbarComboBoxControl.Set_Height(pVal: Double);
begin
  DefaultInterface.Height := pVal;
end;

function  TToolbarComboBoxControl.Get_WidthUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.WidthUnit;
end;

procedure TToolbarComboBoxControl.Set_WidthUnit(pVal: PWideChar);
  { Warning: The property WidthUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WidthUnit := pVal;
end;

function  TToolbarComboBoxControl.Get_HeightUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeightUnit;
end;

procedure TToolbarComboBoxControl.Set_HeightUnit(pVal: PWideChar);
  { Warning: The property HeightUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeightUnit := pVal;
end;

function  TToolbarComboBoxControl.Get_Kind: CrToolbarControlKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TToolbarComboBoxControl.Set_Kind(pVal: CrToolbarControlKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TToolbarComboBoxControl.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TToolbarComboBoxControl.Set_Enabled(pVal: WordBool);
begin
  DefaultInterface.Enabled := pVal;
end;

function  TToolbarComboBoxControl.Get_Action: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Action;
end;

procedure TToolbarComboBoxControl.Set_Action(pVal: PWideChar);
  { Warning: The property Action has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := pVal;
end;

function  TToolbarComboBoxControl.Get_DisplayName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DisplayName;
end;

procedure TToolbarComboBoxControl.Set_DisplayName(pVal: PWideChar);
  { Warning: The property DisplayName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayName := pVal;
end;

function  TToolbarComboBoxControl.Get_ImageName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ImageName;
end;

procedure TToolbarComboBoxControl.Set_ImageName(pVal: PWideChar);
  { Warning: The property ImageName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImageName := pVal;
end;

function  TToolbarComboBoxControl.Get_IsClientSide: WordBool;
begin
  Result := DefaultInterface.IsClientSide;
end;

procedure TToolbarComboBoxControl.Set_IsClientSide(pVal: WordBool);
begin
  DefaultInterface.IsClientSide := pVal;
end;

function  TToolbarComboBoxControl.Get_StyleClassName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.StyleClassName;
end;

procedure TToolbarComboBoxControl.Set_StyleClassName(pVal: PWideChar);
  { Warning: The property StyleClassName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleClassName := pVal;
end;

function  TToolbarComboBoxControl.Get_ListItems: ISCRToolbarListItemCollection;
begin
  Result := DefaultInterface.ListItems;
end;

procedure TToolbarComboBoxControl.Set_ListItems(const pVal: ISCRToolbarListItemCollection);
begin
  DefaultInterface.ListItems := pVal;
end;

function  TToolbarComboBoxControl.Get_SelectedIndex: Integer;
begin
  Result := DefaultInterface.SelectedIndex;
end;

procedure TToolbarComboBoxControl.Set_SelectedIndex(pVal: Integer);
begin
  DefaultInterface.SelectedIndex := pVal;
end;

function  TToolbarComboBoxControl.Get_ClientSidePrefix: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ClientSidePrefix;
end;

procedure TToolbarComboBoxControl.Set_ClientSidePrefix(pVal: PWideChar);
  { Warning: The property ClientSidePrefix has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ClientSidePrefix := pVal;
end;

function  TToolbarComboBoxControl.Get_ClientSideSuffix: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ClientSideSuffix;
end;

procedure TToolbarComboBoxControl.Set_ClientSideSuffix(pVal: PWideChar);
  { Warning: The property ClientSideSuffix has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ClientSideSuffix := pVal;
end;

function  TToolbarComboBoxControl.Get_MaxItemsPerMenu: Integer;
begin
  Result := DefaultInterface.MaxItemsPerMenu;
end;

procedure TToolbarComboBoxControl.Set_MaxItemsPerMenu(pVal: Integer);
begin
  DefaultInterface.MaxItemsPerMenu := pVal;
end;

function  TToolbarComboBoxControl.Get_MenuNumber: Integer;
begin
  Result := DefaultInterface.MenuNumber;
end;

procedure TToolbarComboBoxControl.Set_MenuNumber(pVal: Integer);
begin
  DefaultInterface.MenuNumber := pVal;
end;

function  TToolbarComboBoxControl.Get_Left: Double;
begin
  Result := DefaultInterface.Left;
end;

procedure TToolbarComboBoxControl.Set_Left(pVal: Double);
begin
  DefaultInterface.Left := pVal;
end;

function  TToolbarComboBoxControl.Get_Top: Double;
begin
  Result := DefaultInterface.Top;
end;

procedure TToolbarComboBoxControl.Set_Top(pVal: Double);
begin
  DefaultInterface.Top := pVal;
end;

function  TToolbarComboBoxControl.Clone(DeepClone: WordBool): ISCRToolbarControlBase;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TToolbarComboBoxControl.CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; 
                                         DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ToolbarControlBase, DeepCopy);
end;

function  TToolbarComboBoxControl.Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool;
begin
  Result := DefaultInterface.Equals(ToolbarControlBase);
end;

procedure TToolbarComboBoxControl.GetWidthAndUnit(out pVal: WideString);
begin
  DefaultInterface.GetWidthAndUnit(pVal);
end;

procedure TToolbarComboBoxControl.GetHeightAndUnit(out pVal: WideString);
begin
  DefaultInterface.GetHeightAndUnit(pVal);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TToolbarComboBoxControlProperties.Create(AServer: TToolbarComboBoxControl);
begin
  inherited Create;
  FServer := AServer;
end;

function TToolbarComboBoxControlProperties.GetDefaultInterface: ISCRToolbarComboBoxControl;
begin
  Result := FServer.DefaultInterface;
end;

function  TToolbarComboBoxControlProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarComboBoxControlProperties.Get_Name: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Name;
end;

procedure TToolbarComboBoxControlProperties.Set_Name(pVal: PWideChar);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_Width: Double;
begin
  Result := DefaultInterface.Width;
end;

procedure TToolbarComboBoxControlProperties.Set_Width(pVal: Double);
begin
  DefaultInterface.Width := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_Height: Double;
begin
  Result := DefaultInterface.Height;
end;

procedure TToolbarComboBoxControlProperties.Set_Height(pVal: Double);
begin
  DefaultInterface.Height := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_WidthUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.WidthUnit;
end;

procedure TToolbarComboBoxControlProperties.Set_WidthUnit(pVal: PWideChar);
  { Warning: The property WidthUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WidthUnit := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_HeightUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeightUnit;
end;

procedure TToolbarComboBoxControlProperties.Set_HeightUnit(pVal: PWideChar);
  { Warning: The property HeightUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeightUnit := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_Kind: CrToolbarControlKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TToolbarComboBoxControlProperties.Set_Kind(pVal: CrToolbarControlKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TToolbarComboBoxControlProperties.Set_Enabled(pVal: WordBool);
begin
  DefaultInterface.Enabled := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_Action: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Action;
end;

procedure TToolbarComboBoxControlProperties.Set_Action(pVal: PWideChar);
  { Warning: The property Action has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_DisplayName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DisplayName;
end;

procedure TToolbarComboBoxControlProperties.Set_DisplayName(pVal: PWideChar);
  { Warning: The property DisplayName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayName := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_ImageName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ImageName;
end;

procedure TToolbarComboBoxControlProperties.Set_ImageName(pVal: PWideChar);
  { Warning: The property ImageName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImageName := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_IsClientSide: WordBool;
begin
  Result := DefaultInterface.IsClientSide;
end;

procedure TToolbarComboBoxControlProperties.Set_IsClientSide(pVal: WordBool);
begin
  DefaultInterface.IsClientSide := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_StyleClassName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.StyleClassName;
end;

procedure TToolbarComboBoxControlProperties.Set_StyleClassName(pVal: PWideChar);
  { Warning: The property StyleClassName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleClassName := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_ListItems: ISCRToolbarListItemCollection;
begin
  Result := DefaultInterface.ListItems;
end;

procedure TToolbarComboBoxControlProperties.Set_ListItems(const pVal: ISCRToolbarListItemCollection);
begin
  DefaultInterface.ListItems := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_SelectedIndex: Integer;
begin
  Result := DefaultInterface.SelectedIndex;
end;

procedure TToolbarComboBoxControlProperties.Set_SelectedIndex(pVal: Integer);
begin
  DefaultInterface.SelectedIndex := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_ClientSidePrefix: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ClientSidePrefix;
end;

procedure TToolbarComboBoxControlProperties.Set_ClientSidePrefix(pVal: PWideChar);
  { Warning: The property ClientSidePrefix has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ClientSidePrefix := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_ClientSideSuffix: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ClientSideSuffix;
end;

procedure TToolbarComboBoxControlProperties.Set_ClientSideSuffix(pVal: PWideChar);
  { Warning: The property ClientSideSuffix has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ClientSideSuffix := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_MaxItemsPerMenu: Integer;
begin
  Result := DefaultInterface.MaxItemsPerMenu;
end;

procedure TToolbarComboBoxControlProperties.Set_MaxItemsPerMenu(pVal: Integer);
begin
  DefaultInterface.MaxItemsPerMenu := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_MenuNumber: Integer;
begin
  Result := DefaultInterface.MenuNumber;
end;

procedure TToolbarComboBoxControlProperties.Set_MenuNumber(pVal: Integer);
begin
  DefaultInterface.MenuNumber := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_Left: Double;
begin
  Result := DefaultInterface.Left;
end;

procedure TToolbarComboBoxControlProperties.Set_Left(pVal: Double);
begin
  DefaultInterface.Left := pVal;
end;

function  TToolbarComboBoxControlProperties.Get_Top: Double;
begin
  Result := DefaultInterface.Top;
end;

procedure TToolbarComboBoxControlProperties.Set_Top(pVal: Double);
begin
  DefaultInterface.Top := pVal;
end;

{$ENDIF}

class function CoToolbarSeparatorControl.Create: ISCRToolbarSeparatorControl;
begin
  Result := CreateComObject(CLASS_ToolbarSeparatorControl) as ISCRToolbarSeparatorControl;
end;

class function CoToolbarSeparatorControl.CreateRemote(const MachineName: string): ISCRToolbarSeparatorControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ToolbarSeparatorControl) as ISCRToolbarSeparatorControl;
end;

procedure TToolbarSeparatorControl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{151A4286-CAF6-4EE3-8E84-187BDAE96767}';
    IntfIID:   '{378B71D8-D40D-49E3-AA63-2625AB27BC34}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TToolbarSeparatorControl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRToolbarSeparatorControl;
  end;
end;

procedure TToolbarSeparatorControl.ConnectTo(svrIntf: ISCRToolbarSeparatorControl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TToolbarSeparatorControl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TToolbarSeparatorControl.GetDefaultInterface: ISCRToolbarSeparatorControl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TToolbarSeparatorControl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TToolbarSeparatorControlProperties.Create(Self);
{$ENDIF}
end;

destructor TToolbarSeparatorControl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TToolbarSeparatorControl.GetServerProperties: TToolbarSeparatorControlProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TToolbarSeparatorControl.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarSeparatorControl.Get_Name: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Name;
end;

procedure TToolbarSeparatorControl.Set_Name(pVal: PWideChar);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TToolbarSeparatorControl.Get_Width: Double;
begin
  Result := DefaultInterface.Width;
end;

procedure TToolbarSeparatorControl.Set_Width(pVal: Double);
begin
  DefaultInterface.Width := pVal;
end;

function  TToolbarSeparatorControl.Get_Height: Double;
begin
  Result := DefaultInterface.Height;
end;

procedure TToolbarSeparatorControl.Set_Height(pVal: Double);
begin
  DefaultInterface.Height := pVal;
end;

function  TToolbarSeparatorControl.Get_WidthUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.WidthUnit;
end;

procedure TToolbarSeparatorControl.Set_WidthUnit(pVal: PWideChar);
  { Warning: The property WidthUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WidthUnit := pVal;
end;

function  TToolbarSeparatorControl.Get_HeightUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeightUnit;
end;

procedure TToolbarSeparatorControl.Set_HeightUnit(pVal: PWideChar);
  { Warning: The property HeightUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeightUnit := pVal;
end;

function  TToolbarSeparatorControl.Get_Kind: CrToolbarControlKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TToolbarSeparatorControl.Set_Kind(pVal: CrToolbarControlKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TToolbarSeparatorControl.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TToolbarSeparatorControl.Set_Enabled(pVal: WordBool);
begin
  DefaultInterface.Enabled := pVal;
end;

function  TToolbarSeparatorControl.Get_Action: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Action;
end;

procedure TToolbarSeparatorControl.Set_Action(pVal: PWideChar);
  { Warning: The property Action has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := pVal;
end;

function  TToolbarSeparatorControl.Get_DisplayName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DisplayName;
end;

procedure TToolbarSeparatorControl.Set_DisplayName(pVal: PWideChar);
  { Warning: The property DisplayName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayName := pVal;
end;

function  TToolbarSeparatorControl.Get_ImageName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ImageName;
end;

procedure TToolbarSeparatorControl.Set_ImageName(pVal: PWideChar);
  { Warning: The property ImageName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImageName := pVal;
end;

function  TToolbarSeparatorControl.Get_IsClientSide: WordBool;
begin
  Result := DefaultInterface.IsClientSide;
end;

procedure TToolbarSeparatorControl.Set_IsClientSide(pVal: WordBool);
begin
  DefaultInterface.IsClientSide := pVal;
end;

function  TToolbarSeparatorControl.Get_StyleClassName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.StyleClassName;
end;

procedure TToolbarSeparatorControl.Set_StyleClassName(pVal: PWideChar);
  { Warning: The property StyleClassName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleClassName := pVal;
end;

function  TToolbarSeparatorControl.Get_IsLineSeparator: WordBool;
begin
  Result := DefaultInterface.IsLineSeparator;
end;

procedure TToolbarSeparatorControl.Set_IsLineSeparator(pVal: WordBool);
begin
  DefaultInterface.IsLineSeparator := pVal;
end;

function  TToolbarSeparatorControl.Clone(DeepClone: WordBool): ISCRToolbarControlBase;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TToolbarSeparatorControl.CopyTo(const ToolbarControlBase: ISCRToolbarControlBase; 
                                          DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(ToolbarControlBase, DeepCopy);
end;

function  TToolbarSeparatorControl.Equals(const ToolbarControlBase: ISCRToolbarControlBase): WordBool;
begin
  Result := DefaultInterface.Equals(ToolbarControlBase);
end;

procedure TToolbarSeparatorControl.GetWidthAndUnit(out pVal: WideString);
begin
  DefaultInterface.GetWidthAndUnit(pVal);
end;

procedure TToolbarSeparatorControl.GetHeightAndUnit(out pVal: WideString);
begin
  DefaultInterface.GetHeightAndUnit(pVal);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TToolbarSeparatorControlProperties.Create(AServer: TToolbarSeparatorControl);
begin
  inherited Create;
  FServer := AServer;
end;

function TToolbarSeparatorControlProperties.GetDefaultInterface: ISCRToolbarSeparatorControl;
begin
  Result := FServer.DefaultInterface;
end;

function  TToolbarSeparatorControlProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TToolbarSeparatorControlProperties.Get_Name: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Name;
end;

procedure TToolbarSeparatorControlProperties.Set_Name(pVal: PWideChar);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TToolbarSeparatorControlProperties.Get_Width: Double;
begin
  Result := DefaultInterface.Width;
end;

procedure TToolbarSeparatorControlProperties.Set_Width(pVal: Double);
begin
  DefaultInterface.Width := pVal;
end;

function  TToolbarSeparatorControlProperties.Get_Height: Double;
begin
  Result := DefaultInterface.Height;
end;

procedure TToolbarSeparatorControlProperties.Set_Height(pVal: Double);
begin
  DefaultInterface.Height := pVal;
end;

function  TToolbarSeparatorControlProperties.Get_WidthUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.WidthUnit;
end;

procedure TToolbarSeparatorControlProperties.Set_WidthUnit(pVal: PWideChar);
  { Warning: The property WidthUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WidthUnit := pVal;
end;

function  TToolbarSeparatorControlProperties.Get_HeightUnit: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.HeightUnit;
end;

procedure TToolbarSeparatorControlProperties.Set_HeightUnit(pVal: PWideChar);
  { Warning: The property HeightUnit has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HeightUnit := pVal;
end;

function  TToolbarSeparatorControlProperties.Get_Kind: CrToolbarControlKindEnum;
begin
  Result := DefaultInterface.Kind;
end;

procedure TToolbarSeparatorControlProperties.Set_Kind(pVal: CrToolbarControlKindEnum);
begin
  DefaultInterface.Kind := pVal;
end;

function  TToolbarSeparatorControlProperties.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TToolbarSeparatorControlProperties.Set_Enabled(pVal: WordBool);
begin
  DefaultInterface.Enabled := pVal;
end;

function  TToolbarSeparatorControlProperties.Get_Action: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Action;
end;

procedure TToolbarSeparatorControlProperties.Set_Action(pVal: PWideChar);
  { Warning: The property Action has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Action := pVal;
end;

function  TToolbarSeparatorControlProperties.Get_DisplayName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.DisplayName;
end;

procedure TToolbarSeparatorControlProperties.Set_DisplayName(pVal: PWideChar);
  { Warning: The property DisplayName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DisplayName := pVal;
end;

function  TToolbarSeparatorControlProperties.Get_ImageName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ImageName;
end;

procedure TToolbarSeparatorControlProperties.Set_ImageName(pVal: PWideChar);
  { Warning: The property ImageName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ImageName := pVal;
end;

function  TToolbarSeparatorControlProperties.Get_IsClientSide: WordBool;
begin
  Result := DefaultInterface.IsClientSide;
end;

procedure TToolbarSeparatorControlProperties.Set_IsClientSide(pVal: WordBool);
begin
  DefaultInterface.IsClientSide := pVal;
end;

function  TToolbarSeparatorControlProperties.Get_StyleClassName: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.StyleClassName;
end;

procedure TToolbarSeparatorControlProperties.Set_StyleClassName(pVal: PWideChar);
  { Warning: The property StyleClassName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StyleClassName := pVal;
end;

function  TToolbarSeparatorControlProperties.Get_IsLineSeparator: WordBool;
begin
  Result := DefaultInterface.IsLineSeparator;
end;

procedure TToolbarSeparatorControlProperties.Set_IsLineSeparator(pVal: WordBool);
begin
  DefaultInterface.IsLineSeparator := pVal;
end;

{$ENDIF}

class function CoRuntimeIndentAndSpacingFormat.Create: ISCRIndentAndSpacingFormat;
begin
  Result := CreateComObject(CLASS_RuntimeIndentAndSpacingFormat) as ISCRIndentAndSpacingFormat;
end;

class function CoRuntimeIndentAndSpacingFormat.CreateRemote(const MachineName: string): ISCRIndentAndSpacingFormat;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuntimeIndentAndSpacingFormat) as ISCRIndentAndSpacingFormat;
end;

procedure TRuntimeIndentAndSpacingFormat.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{79835FB5-AE2A-415B-AD4E-3031E5AA8141}';
    IntfIID:   '{F1B5CC5F-1D63-45D0-95F3-5C1976B21F84}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRuntimeIndentAndSpacingFormat.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRIndentAndSpacingFormat;
  end;
end;

procedure TRuntimeIndentAndSpacingFormat.ConnectTo(svrIntf: ISCRIndentAndSpacingFormat);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRuntimeIndentAndSpacingFormat.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRuntimeIndentAndSpacingFormat.GetDefaultInterface: ISCRIndentAndSpacingFormat;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRuntimeIndentAndSpacingFormat.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuntimeIndentAndSpacingFormatProperties.Create(Self);
{$ENDIF}
end;

destructor TRuntimeIndentAndSpacingFormat.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRuntimeIndentAndSpacingFormat.GetServerProperties: TRuntimeIndentAndSpacingFormatProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TRuntimeIndentAndSpacingFormat.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeIndentAndSpacingFormat.Get_FirstLineIndent: Integer;
begin
  Result := DefaultInterface.FirstLineIndent;
end;

procedure TRuntimeIndentAndSpacingFormat.Set_FirstLineIndent(pVal: Integer);
begin
  DefaultInterface.FirstLineIndent := pVal;
end;

function  TRuntimeIndentAndSpacingFormat.Get_LeftIndent: Integer;
begin
  Result := DefaultInterface.LeftIndent;
end;

procedure TRuntimeIndentAndSpacingFormat.Set_LeftIndent(pVal: Integer);
begin
  DefaultInterface.LeftIndent := pVal;
end;

function  TRuntimeIndentAndSpacingFormat.Get_RightIndent: Integer;
begin
  Result := DefaultInterface.RightIndent;
end;

procedure TRuntimeIndentAndSpacingFormat.Set_RightIndent(pVal: Integer);
begin
  DefaultInterface.RightIndent := pVal;
end;

function  TRuntimeIndentAndSpacingFormat.Get_LineSpacingType: CrLineSpacingTypeEnum;
begin
  Result := DefaultInterface.LineSpacingType;
end;

procedure TRuntimeIndentAndSpacingFormat.Set_LineSpacingType(pVal: CrLineSpacingTypeEnum);
begin
  DefaultInterface.LineSpacingType := pVal;
end;

function  TRuntimeIndentAndSpacingFormat.Get_LineSpacing: Double;
begin
  Result := DefaultInterface.LineSpacing;
end;

procedure TRuntimeIndentAndSpacingFormat.Set_LineSpacing(pVal: Double);
begin
  DefaultInterface.LineSpacing := pVal;
end;

function  TRuntimeIndentAndSpacingFormat.Clone(DeepClone: WordBool): ISCRIndentAndSpacingFormat;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TRuntimeIndentAndSpacingFormat.CopyTo(const IndentAndSpacingFormat: ISCRIndentAndSpacingFormat; 
                                                DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(IndentAndSpacingFormat, DeepCopy);
end;

function  TRuntimeIndentAndSpacingFormat.Equals(const IndentAndSpacingFormat: ISCRIndentAndSpacingFormat): WordBool;
begin
  Result := DefaultInterface.Equals(IndentAndSpacingFormat);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuntimeIndentAndSpacingFormatProperties.Create(AServer: TRuntimeIndentAndSpacingFormat);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuntimeIndentAndSpacingFormatProperties.GetDefaultInterface: ISCRIndentAndSpacingFormat;
begin
  Result := FServer.DefaultInterface;
end;

function  TRuntimeIndentAndSpacingFormatProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeIndentAndSpacingFormatProperties.Get_FirstLineIndent: Integer;
begin
  Result := DefaultInterface.FirstLineIndent;
end;

procedure TRuntimeIndentAndSpacingFormatProperties.Set_FirstLineIndent(pVal: Integer);
begin
  DefaultInterface.FirstLineIndent := pVal;
end;

function  TRuntimeIndentAndSpacingFormatProperties.Get_LeftIndent: Integer;
begin
  Result := DefaultInterface.LeftIndent;
end;

procedure TRuntimeIndentAndSpacingFormatProperties.Set_LeftIndent(pVal: Integer);
begin
  DefaultInterface.LeftIndent := pVal;
end;

function  TRuntimeIndentAndSpacingFormatProperties.Get_RightIndent: Integer;
begin
  Result := DefaultInterface.RightIndent;
end;

procedure TRuntimeIndentAndSpacingFormatProperties.Set_RightIndent(pVal: Integer);
begin
  DefaultInterface.RightIndent := pVal;
end;

function  TRuntimeIndentAndSpacingFormatProperties.Get_LineSpacingType: CrLineSpacingTypeEnum;
begin
  Result := DefaultInterface.LineSpacingType;
end;

procedure TRuntimeIndentAndSpacingFormatProperties.Set_LineSpacingType(pVal: CrLineSpacingTypeEnum);
begin
  DefaultInterface.LineSpacingType := pVal;
end;

function  TRuntimeIndentAndSpacingFormatProperties.Get_LineSpacing: Double;
begin
  Result := DefaultInterface.LineSpacing;
end;

procedure TRuntimeIndentAndSpacingFormatProperties.Set_LineSpacing(pVal: Double);
begin
  DefaultInterface.LineSpacing := pVal;
end;

{$ENDIF}

class function CoRuntimeStringFieldFormat.Create: ISCRStringFieldFormat;
begin
  Result := CreateComObject(CLASS_RuntimeStringFieldFormat) as ISCRStringFieldFormat;
end;

class function CoRuntimeStringFieldFormat.CreateRemote(const MachineName: string): ISCRStringFieldFormat;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuntimeStringFieldFormat) as ISCRStringFieldFormat;
end;

procedure TRuntimeStringFieldFormat.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E7FA5287-5372-4868-B083-D722459CFB80}';
    IntfIID:   '{0690F48F-A415-43E4-9DB8-202A92F455C4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRuntimeStringFieldFormat.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRStringFieldFormat;
  end;
end;

procedure TRuntimeStringFieldFormat.ConnectTo(svrIntf: ISCRStringFieldFormat);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRuntimeStringFieldFormat.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRuntimeStringFieldFormat.GetDefaultInterface: ISCRStringFieldFormat;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRuntimeStringFieldFormat.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuntimeStringFieldFormatProperties.Create(Self);
{$ENDIF}
end;

destructor TRuntimeStringFieldFormat.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRuntimeStringFieldFormat.GetServerProperties: TRuntimeStringFieldFormatProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TRuntimeStringFieldFormat.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeStringFieldFormat.Get_IndentAndSpacingFormat: ISCRIndentAndSpacingFormat;
begin
  Result := DefaultInterface.IndentAndSpacingFormat;
end;

procedure TRuntimeStringFieldFormat.Set_IndentAndSpacingFormat(const pVal: ISCRIndentAndSpacingFormat);
begin
  DefaultInterface.IndentAndSpacingFormat := pVal;
end;

function  TRuntimeStringFieldFormat.Get_CharacterSpacing: Integer;
begin
  Result := DefaultInterface.CharacterSpacing;
end;

procedure TRuntimeStringFieldFormat.Set_CharacterSpacing(pVal: Integer);
begin
  DefaultInterface.CharacterSpacing := pVal;
end;

function  TRuntimeStringFieldFormat.Get_MaxNumberOfLines: Integer;
begin
  Result := DefaultInterface.MaxNumberOfLines;
end;

procedure TRuntimeStringFieldFormat.Set_MaxNumberOfLines(pVal: Integer);
begin
  DefaultInterface.MaxNumberOfLines := pVal;
end;

function  TRuntimeStringFieldFormat.Get_TextFormat: CrTextFormatEnum;
begin
  Result := DefaultInterface.TextFormat;
end;

procedure TRuntimeStringFieldFormat.Set_TextFormat(pVal: CrTextFormatEnum);
begin
  DefaultInterface.TextFormat := pVal;
end;

function  TRuntimeStringFieldFormat.Get_ReadingOrder: CrReadingOrderEnum;
begin
  Result := DefaultInterface.ReadingOrder;
end;

procedure TRuntimeStringFieldFormat.Set_ReadingOrder(pVal: CrReadingOrderEnum);
begin
  DefaultInterface.ReadingOrder := pVal;
end;

function  TRuntimeStringFieldFormat.Get_EnableWordWrap: WordBool;
begin
  Result := DefaultInterface.EnableWordWrap;
end;

procedure TRuntimeStringFieldFormat.Set_EnableWordWrap(pVal: WordBool);
begin
  DefaultInterface.EnableWordWrap := pVal;
end;

function  TRuntimeStringFieldFormat.Clone(DeepClone: WordBool): ISCRStringFieldFormat;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TRuntimeStringFieldFormat.CopyTo(const StringFieldFormat: ISCRStringFieldFormat; 
                                           DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(StringFieldFormat, DeepCopy);
end;

function  TRuntimeStringFieldFormat.Equals(const StringFieldFormat: ISCRStringFieldFormat): WordBool;
begin
  Result := DefaultInterface.Equals(StringFieldFormat);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuntimeStringFieldFormatProperties.Create(AServer: TRuntimeStringFieldFormat);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuntimeStringFieldFormatProperties.GetDefaultInterface: ISCRStringFieldFormat;
begin
  Result := FServer.DefaultInterface;
end;

function  TRuntimeStringFieldFormatProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeStringFieldFormatProperties.Get_IndentAndSpacingFormat: ISCRIndentAndSpacingFormat;
begin
  Result := DefaultInterface.IndentAndSpacingFormat;
end;

procedure TRuntimeStringFieldFormatProperties.Set_IndentAndSpacingFormat(const pVal: ISCRIndentAndSpacingFormat);
begin
  DefaultInterface.IndentAndSpacingFormat := pVal;
end;

function  TRuntimeStringFieldFormatProperties.Get_CharacterSpacing: Integer;
begin
  Result := DefaultInterface.CharacterSpacing;
end;

procedure TRuntimeStringFieldFormatProperties.Set_CharacterSpacing(pVal: Integer);
begin
  DefaultInterface.CharacterSpacing := pVal;
end;

function  TRuntimeStringFieldFormatProperties.Get_MaxNumberOfLines: Integer;
begin
  Result := DefaultInterface.MaxNumberOfLines;
end;

procedure TRuntimeStringFieldFormatProperties.Set_MaxNumberOfLines(pVal: Integer);
begin
  DefaultInterface.MaxNumberOfLines := pVal;
end;

function  TRuntimeStringFieldFormatProperties.Get_TextFormat: CrTextFormatEnum;
begin
  Result := DefaultInterface.TextFormat;
end;

procedure TRuntimeStringFieldFormatProperties.Set_TextFormat(pVal: CrTextFormatEnum);
begin
  DefaultInterface.TextFormat := pVal;
end;

function  TRuntimeStringFieldFormatProperties.Get_ReadingOrder: CrReadingOrderEnum;
begin
  Result := DefaultInterface.ReadingOrder;
end;

procedure TRuntimeStringFieldFormatProperties.Set_ReadingOrder(pVal: CrReadingOrderEnum);
begin
  DefaultInterface.ReadingOrder := pVal;
end;

function  TRuntimeStringFieldFormatProperties.Get_EnableWordWrap: WordBool;
begin
  Result := DefaultInterface.EnableWordWrap;
end;

procedure TRuntimeStringFieldFormatProperties.Set_EnableWordWrap(pVal: WordBool);
begin
  DefaultInterface.EnableWordWrap := pVal;
end;

{$ENDIF}

class function CoRuntimeFont.Create: ISCRFont;
begin
  Result := CreateComObject(CLASS_RuntimeFont) as ISCRFont;
end;

class function CoRuntimeFont.CreateRemote(const MachineName: string): ISCRFont;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuntimeFont) as ISCRFont;
end;

procedure TRuntimeFont.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5E73F229-833C-42B5-AA8E-7BF382E2A69E}';
    IntfIID:   '{0EB4306F-6B82-4EB4-A846-B1A4094362DC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRuntimeFont.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRFont;
  end;
end;

procedure TRuntimeFont.ConnectTo(svrIntf: ISCRFont);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRuntimeFont.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRuntimeFont.GetDefaultInterface: ISCRFont;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRuntimeFont.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuntimeFontProperties.Create(Self);
{$ENDIF}
end;

destructor TRuntimeFont.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRuntimeFont.GetServerProperties: TRuntimeFontProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TRuntimeFont.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeFont.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TRuntimeFont.Set_Name(const pVal: WideString);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TRuntimeFont.Get_Size: Currency;
begin
  Result := DefaultInterface.Size;
end;

procedure TRuntimeFont.Set_Size(pVal: Currency);
begin
  DefaultInterface.Size := pVal;
end;

function  TRuntimeFont.Get_Bold: WordBool;
begin
  Result := DefaultInterface.Bold;
end;

procedure TRuntimeFont.Set_Bold(pVal: WordBool);
begin
  DefaultInterface.Bold := pVal;
end;

function  TRuntimeFont.Get_Italic: WordBool;
begin
  Result := DefaultInterface.Italic;
end;

procedure TRuntimeFont.Set_Italic(pVal: WordBool);
begin
  DefaultInterface.Italic := pVal;
end;

function  TRuntimeFont.Get_Underline: WordBool;
begin
  Result := DefaultInterface.Underline;
end;

procedure TRuntimeFont.Set_Underline(pVal: WordBool);
begin
  DefaultInterface.Underline := pVal;
end;

function  TRuntimeFont.Get_Strikethrough: WordBool;
begin
  Result := DefaultInterface.Strikethrough;
end;

procedure TRuntimeFont.Set_Strikethrough(pVal: WordBool);
begin
  DefaultInterface.Strikethrough := pVal;
end;

function  TRuntimeFont.Get_Weight: Smallint;
begin
  Result := DefaultInterface.Weight;
end;

procedure TRuntimeFont.Set_Weight(pVal: Smallint);
begin
  DefaultInterface.Weight := pVal;
end;

function  TRuntimeFont.Get_Charset: Smallint;
begin
  Result := DefaultInterface.Charset;
end;

procedure TRuntimeFont.Set_Charset(pVal: Smallint);
begin
  DefaultInterface.Charset := pVal;
end;

function  TRuntimeFont.Clone(DeepClone: WordBool): ISCRFont;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TRuntimeFont.CopyTo(const Font: ISCRFont; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(Font, DeepCopy);
end;

function  TRuntimeFont.Equals(const Font: ISCRFont): WordBool;
begin
  Result := DefaultInterface.Equals(Font);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuntimeFontProperties.Create(AServer: TRuntimeFont);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuntimeFontProperties.GetDefaultInterface: ISCRFont;
begin
  Result := FServer.DefaultInterface;
end;

function  TRuntimeFontProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeFontProperties.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TRuntimeFontProperties.Set_Name(const pVal: WideString);
  { Warning: The property Name has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pVal;
end;

function  TRuntimeFontProperties.Get_Size: Currency;
begin
  Result := DefaultInterface.Size;
end;

procedure TRuntimeFontProperties.Set_Size(pVal: Currency);
begin
  DefaultInterface.Size := pVal;
end;

function  TRuntimeFontProperties.Get_Bold: WordBool;
begin
  Result := DefaultInterface.Bold;
end;

procedure TRuntimeFontProperties.Set_Bold(pVal: WordBool);
begin
  DefaultInterface.Bold := pVal;
end;

function  TRuntimeFontProperties.Get_Italic: WordBool;
begin
  Result := DefaultInterface.Italic;
end;

procedure TRuntimeFontProperties.Set_Italic(pVal: WordBool);
begin
  DefaultInterface.Italic := pVal;
end;

function  TRuntimeFontProperties.Get_Underline: WordBool;
begin
  Result := DefaultInterface.Underline;
end;

procedure TRuntimeFontProperties.Set_Underline(pVal: WordBool);
begin
  DefaultInterface.Underline := pVal;
end;

function  TRuntimeFontProperties.Get_Strikethrough: WordBool;
begin
  Result := DefaultInterface.Strikethrough;
end;

procedure TRuntimeFontProperties.Set_Strikethrough(pVal: WordBool);
begin
  DefaultInterface.Strikethrough := pVal;
end;

function  TRuntimeFontProperties.Get_Weight: Smallint;
begin
  Result := DefaultInterface.Weight;
end;

procedure TRuntimeFontProperties.Set_Weight(pVal: Smallint);
begin
  DefaultInterface.Weight := pVal;
end;

function  TRuntimeFontProperties.Get_Charset: Smallint;
begin
  Result := DefaultInterface.Charset;
end;

procedure TRuntimeFontProperties.Set_Charset(pVal: Smallint);
begin
  DefaultInterface.Charset := pVal;
end;

{$ENDIF}

class function CoRuntimeTabStops.Create: ISCRTabStops;
begin
  Result := CreateComObject(CLASS_RuntimeTabStops) as ISCRTabStops;
end;

class function CoRuntimeTabStops.CreateRemote(const MachineName: string): ISCRTabStops;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuntimeTabStops) as ISCRTabStops;
end;

procedure TRuntimeTabStops.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E18299C1-4A2F-4FE1-9DCD-EB5952A548FB}';
    IntfIID:   '{ED554AB8-88F1-40D1-92AF-32AD54C1DF42}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRuntimeTabStops.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRTabStops;
  end;
end;

procedure TRuntimeTabStops.ConnectTo(svrIntf: ISCRTabStops);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRuntimeTabStops.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRuntimeTabStops.GetDefaultInterface: ISCRTabStops;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRuntimeTabStops.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuntimeTabStopsProperties.Create(Self);
{$ENDIF}
end;

destructor TRuntimeTabStops.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRuntimeTabStops.GetServerProperties: TRuntimeTabStopsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TRuntimeTabStops.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeTabStops.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TRuntimeTabStops.Get_Item(Index: Integer): ISCRTabStop;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TRuntimeTabStops.Set_Item(Index: Integer; const ppVal: ISCRTabStop);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TRuntimeTabStops.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function  TRuntimeTabStops.Clone(DeepClone: WordBool): ISCRTabStops;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TRuntimeTabStops.CopyTo(const TabStops: ISCRTabStops; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(TabStops, DeepCopy);
end;

function  TRuntimeTabStops.Equals(const TabStops: ISCRTabStops): WordBool;
begin
  Result := DefaultInterface.Equals(TabStops);
end;

procedure TRuntimeTabStops.Add(const TabStop: ISCRTabStop);
begin
  DefaultInterface.Add(TabStop);
end;

procedure TRuntimeTabStops.Remove(Index: Integer);
begin
  DefaultInterface.Remove(Index);
end;

procedure TRuntimeTabStops.Insert(Index: Integer; const TabStop: ISCRTabStop);
begin
  DefaultInterface.Insert(Index, TabStop);
end;

procedure TRuntimeTabStops.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

procedure TRuntimeTabStops.EnsureCapacity(MaxCapacity: Integer);
begin
  DefaultInterface.EnsureCapacity(MaxCapacity);
end;

function  TRuntimeTabStops.FindIndexOf(const TabStop: ISCRTabStop): Integer;
begin
  Result := DefaultInterface.FindIndexOf(TabStop);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuntimeTabStopsProperties.Create(AServer: TRuntimeTabStops);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuntimeTabStopsProperties.GetDefaultInterface: ISCRTabStops;
begin
  Result := FServer.DefaultInterface;
end;

function  TRuntimeTabStopsProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeTabStopsProperties.Get__NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function  TRuntimeTabStopsProperties.Get_Item(Index: Integer): ISCRTabStop;
begin
  Result := DefaultInterface.Item[Index];
end;

procedure TRuntimeTabStopsProperties.Set_Item(Index: Integer; const ppVal: ISCRTabStop);
begin
  DefaultInterface.Item[Index] := ppVal;
end;

function  TRuntimeTabStopsProperties.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoRuntimeTabStop.Create: ISCRTabStop;
begin
  Result := CreateComObject(CLASS_RuntimeTabStop) as ISCRTabStop;
end;

class function CoRuntimeTabStop.CreateRemote(const MachineName: string): ISCRTabStop;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuntimeTabStop) as ISCRTabStop;
end;

procedure TRuntimeTabStop.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C3EDEE62-B019-44DE-9286-D15DD4B46B00}';
    IntfIID:   '{58D22FB1-B626-4A5D-951F-C6D6D5AF26BE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRuntimeTabStop.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISCRTabStop;
  end;
end;

procedure TRuntimeTabStop.ConnectTo(svrIntf: ISCRTabStop);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRuntimeTabStop.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRuntimeTabStop.GetDefaultInterface: ISCRTabStop;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRuntimeTabStop.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TRuntimeTabStopProperties.Create(Self);
{$ENDIF}
end;

destructor TRuntimeTabStop.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRuntimeTabStop.GetServerProperties: TRuntimeTabStopProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TRuntimeTabStop.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeTabStop.Get_XOffset: Integer;
begin
  Result := DefaultInterface.XOffset;
end;

procedure TRuntimeTabStop.Set_XOffset(pVal: Integer);
begin
  DefaultInterface.XOffset := pVal;
end;

function  TRuntimeTabStop.Get_Alignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.Alignment;
end;

procedure TRuntimeTabStop.Set_Alignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.Alignment := pVal;
end;

function  TRuntimeTabStop.Clone(DeepClone: WordBool): ISCRTabStop;
begin
  Result := DefaultInterface.Clone(DeepClone);
end;

procedure TRuntimeTabStop.CopyTo(const TabStop: ISCRTabStop; DeepCopy: WordBool);
begin
  DefaultInterface.CopyTo(TabStop, DeepCopy);
end;

function  TRuntimeTabStop.Equals(const TabStop: ISCRTabStop): WordBool;
begin
  Result := DefaultInterface.Equals(TabStop);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TRuntimeTabStopProperties.Create(AServer: TRuntimeTabStop);
begin
  inherited Create;
  FServer := AServer;
end;

function TRuntimeTabStopProperties.GetDefaultInterface: ISCRTabStop;
begin
  Result := FServer.DefaultInterface;
end;

function  TRuntimeTabStopProperties.Get_ClassName: WideString;
begin
  Result := DefaultInterface.ClassName;
end;

function  TRuntimeTabStopProperties.Get_XOffset: Integer;
begin
  Result := DefaultInterface.XOffset;
end;

procedure TRuntimeTabStopProperties.Set_XOffset(pVal: Integer);
begin
  DefaultInterface.XOffset := pVal;
end;

function  TRuntimeTabStopProperties.Get_Alignment: CrAlignmentEnum;
begin
  Result := DefaultInterface.Alignment;
end;

procedure TRuntimeTabStopProperties.Set_Alignment(pVal: CrAlignmentEnum);
begin
  DefaultInterface.Alignment := pVal;
end;

{$ENDIF}

class function CoViewContext.Create: ICRViewContext;
begin
  Result := CreateComObject(CLASS_ViewContext) as ICRViewContext;
end;

class function CoViewContext.CreateRemote(const MachineName: string): ICRViewContext;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ViewContext) as ICRViewContext;
end;

procedure TViewContext.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4E7232CA-6B7D-4CB6-B7D1-ABD3A61412C2}';
    IntfIID:   '{D112FEF8-1AD9-4EA8-8F98-D75C70F34D17}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TViewContext.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICRViewContext;
  end;
end;

procedure TViewContext.ConnectTo(svrIntf: ICRViewContext);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TViewContext.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TViewContext.GetDefaultInterface: ICRViewContext;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TViewContext.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TViewContextProperties.Create(Self);
{$ENDIF}
end;

destructor TViewContext.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TViewContext.GetServerProperties: TViewContextProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TViewContext.Get_GroupPath: WideString;
begin
  Result := DefaultInterface.GroupPath;
end;

procedure TViewContext.Set_GroupPath(const pVal: WideString);
  { Warning: The property GroupPath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupPath := pVal;
end;

function  TViewContext.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TViewContext.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TViewContext.Get_DrillDownLevel: Integer;
begin
  Result := DefaultInterface.DrillDownLevel;
end;

procedure TViewContext.Set_DrillDownLevel(pVal: Integer);
begin
  DefaultInterface.DrillDownLevel := pVal;
end;

function  TViewContext.Get_ReportName: WideString;
begin
  Result := DefaultInterface.ReportName;
end;

procedure TViewContext.Set_ReportName(const pVal: WideString);
  { Warning: The property ReportName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportName := pVal;
end;

function  TViewContext.Get_ContainingPageNumber: Integer;
begin
  Result := DefaultInterface.ContainingPageNumber;
end;

procedure TViewContext.Set_ContainingPageNumber(pVal: Integer);
begin
  DefaultInterface.ContainingPageNumber := pVal;
end;

function  TViewContext.Get_ContainingGroupPath: WideString;
begin
  Result := DefaultInterface.ContainingGroupPath;
end;

procedure TViewContext.Set_ContainingGroupPath(const pVal: WideString);
  { Warning: The property ContainingGroupPath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ContainingGroupPath := pVal;
end;

function  TViewContext.Get_ContainingGroupName: WideString;
begin
  Result := DefaultInterface.ContainingGroupName;
end;

procedure TViewContext.Set_ContainingGroupName(const pVal: WideString);
  { Warning: The property ContainingGroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ContainingGroupName := pVal;
end;

function  TViewContext.Get_XOffset: Integer;
begin
  Result := DefaultInterface.XOffset;
end;

procedure TViewContext.Set_XOffset(pVal: Integer);
begin
  DefaultInterface.XOffset := pVal;
end;

function  TViewContext.Get_YOffset: Integer;
begin
  Result := DefaultInterface.YOffset;
end;

procedure TViewContext.Set_YOffset(pVal: Integer);
begin
  DefaultInterface.YOffset := pVal;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TViewContextProperties.Create(AServer: TViewContext);
begin
  inherited Create;
  FServer := AServer;
end;

function TViewContextProperties.GetDefaultInterface: ICRViewContext;
begin
  Result := FServer.DefaultInterface;
end;

function  TViewContextProperties.Get_GroupPath: WideString;
begin
  Result := DefaultInterface.GroupPath;
end;

procedure TViewContextProperties.Set_GroupPath(const pVal: WideString);
  { Warning: The property GroupPath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupPath := pVal;
end;

function  TViewContextProperties.Get_GroupName: WideString;
begin
  Result := DefaultInterface.GroupName;
end;

procedure TViewContextProperties.Set_GroupName(const pVal: WideString);
  { Warning: The property GroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GroupName := pVal;
end;

function  TViewContextProperties.Get_DrillDownLevel: Integer;
begin
  Result := DefaultInterface.DrillDownLevel;
end;

procedure TViewContextProperties.Set_DrillDownLevel(pVal: Integer);
begin
  DefaultInterface.DrillDownLevel := pVal;
end;

function  TViewContextProperties.Get_ReportName: WideString;
begin
  Result := DefaultInterface.ReportName;
end;

procedure TViewContextProperties.Set_ReportName(const pVal: WideString);
  { Warning: The property ReportName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReportName := pVal;
end;

function  TViewContextProperties.Get_ContainingPageNumber: Integer;
begin
  Result := DefaultInterface.ContainingPageNumber;
end;

procedure TViewContextProperties.Set_ContainingPageNumber(pVal: Integer);
begin
  DefaultInterface.ContainingPageNumber := pVal;
end;

function  TViewContextProperties.Get_ContainingGroupPath: WideString;
begin
  Result := DefaultInterface.ContainingGroupPath;
end;

procedure TViewContextProperties.Set_ContainingGroupPath(const pVal: WideString);
  { Warning: The property ContainingGroupPath has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ContainingGroupPath := pVal;
end;

function  TViewContextProperties.Get_ContainingGroupName: WideString;
begin
  Result := DefaultInterface.ContainingGroupName;
end;

procedure TViewContextProperties.Set_ContainingGroupName(const pVal: WideString);
  { Warning: The property ContainingGroupName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ContainingGroupName := pVal;
end;

function  TViewContextProperties.Get_XOffset: Integer;
begin
  Result := DefaultInterface.XOffset;
end;

procedure TViewContextProperties.Set_XOffset(pVal: Integer);
begin
  DefaultInterface.XOffset := pVal;
end;

function  TViewContextProperties.Get_YOffset: Integer;
begin
  Result := DefaultInterface.YOffset;
end;

procedure TViewContextProperties.Set_YOffset(pVal: Integer);
begin
  DefaultInterface.YOffset := pVal;
end;

{$ENDIF}

class function CoDebugInformation.Create: ICRDebugInformation;
begin
  Result := CreateComObject(CLASS_DebugInformation) as ICRDebugInformation;
end;

class function CoDebugInformation.CreateRemote(const MachineName: string): ICRDebugInformation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DebugInformation) as ICRDebugInformation;
end;

procedure TDebugInformation.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5D5D02CD-26E8-446A-A7BF-F33E8BE48269}';
    IntfIID:   '{DE82BC06-E0FC-48E2-A5D3-172D1FB4925C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDebugInformation.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICRDebugInformation;
  end;
end;

procedure TDebugInformation.ConnectTo(svrIntf: ICRDebugInformation);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDebugInformation.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDebugInformation.GetDefaultInterface: ICRDebugInformation;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDebugInformation.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDebugInformationProperties.Create(Self);
{$ENDIF}
end;

destructor TDebugInformation.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDebugInformation.GetServerProperties: TDebugInformationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function  TDebugInformation.Get_PrintJobID: Integer;
begin
  Result := DefaultInterface.PrintJobID;
end;

procedure TDebugInformation.Set_PrintJobID(pVal: Integer);
begin
  DefaultInterface.PrintJobID := pVal;
end;

function  TDebugInformation.Get_ProcessID: Integer;
begin
  Result := DefaultInterface.ProcessID;
end;

procedure TDebugInformation.Set_ProcessID(pVal: Integer);
begin
  DefaultInterface.ProcessID := pVal;
end;

function  TDebugInformation.Get_DebugRecordID: Integer;
begin
  Result := DefaultInterface.DebugRecordID;
end;

procedure TDebugInformation.Set_DebugRecordID(pVal: Integer);
begin
  DefaultInterface.DebugRecordID := pVal;
end;

function  TDebugInformation.Get_DataDateTimeStamp: WideString;
begin
  Result := DefaultInterface.DataDateTimeStamp;
end;

procedure TDebugInformation.Set_DataDateTimeStamp(const pVal: WideString);
  { Warning: The property DataDateTimeStamp has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataDateTimeStamp := pVal;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDebugInformationProperties.Create(AServer: TDebugInformation);
begin
  inherited Create;
  FServer := AServer;
end;

function TDebugInformationProperties.GetDefaultInterface: ICRDebugInformation;
begin
  Result := FServer.DefaultInterface;
end;

function  TDebugInformationProperties.Get_PrintJobID: Integer;
begin
  Result := DefaultInterface.PrintJobID;
end;

procedure TDebugInformationProperties.Set_PrintJobID(pVal: Integer);
begin
  DefaultInterface.PrintJobID := pVal;
end;

function  TDebugInformationProperties.Get_ProcessID: Integer;
begin
  Result := DefaultInterface.ProcessID;
end;

procedure TDebugInformationProperties.Set_ProcessID(pVal: Integer);
begin
  DefaultInterface.ProcessID := pVal;
end;

function  TDebugInformationProperties.Get_DebugRecordID: Integer;
begin
  Result := DefaultInterface.DebugRecordID;
end;

procedure TDebugInformationProperties.Set_DebugRecordID(pVal: Integer);
begin
  DefaultInterface.DebugRecordID := pVal;
end;

function  TDebugInformationProperties.Get_DataDateTimeStamp: WideString;
begin
  Result := DefaultInterface.DataDateTimeStamp;
end;

procedure TDebugInformationProperties.Set_DataDateTimeStamp(const pVal: WideString);
  { Warning: The property DataDateTimeStamp has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataDateTimeStamp := pVal;
end;

{$ENDIF}

procedure Register;
begin
  RegisterComponents(dtlServerPage, [TPageObjectFactory, TPlaceHolderObjectInstance, TFieldObjectInstance, TTextObjectInstance, 
    TReportObjectInstances, TChartObjectInstance, TNumericFieldObjectInstance, TFieldObjectInstanceInGrid, TNumericFieldObjectInstanceInGrid, 
    TTextObjectInstanceInGrid, TRuntimeParagraph, TRuntimeParagraphs, TTextLine, TTextLines, 
    TGroupTreeNodeID, TSectionInstance, TSubreportObjectInstance, TOnDemandSubreportObjectInstance, TSectionInstances, 
    TPageObjectInstance, TStringFieldObjectInstance, TStringFieldObjectInstanceInGrid, TSubreportContext, TLineObjectInstance, 
    TBoxObjectInstance, TMapObjectInstance, TOleObjectInstance, TFlashObjectInstance, TBlobFieldObjectInstance, 
    TGridRowInstance, TGridColumnInstance, TGridLabelInstance, TGridAreaInstances, TGridLineInstance, 
    TGridLineInstances, TCrossTabObjectInstance, TOlapObjectInstance, TOlapSectHeadObjectInstance, TLineObjectInstances, 
    TBoxObjectInstances, TRuntimeBorder, TRuntimeFontColor, TRuntimeParagraphElements, TRuntimeParagraphTextElement, 
    TRuntimeParagraphTabElement, TTabUnit, TTabUnits, TGroupTree, TGroupTreeNode, 
    TGroupTreeNodes, TCRGridContent, TEPFFactory, TETFFactory, TToolbar, 
    TToolbarControls, TToolbarButtonControl, TToolbarLabelControl, TToolbarTextBoxControl, TToolbarListItem, 
    TToolbarListItemCollection, TToolbarComboBoxControl, TToolbarSeparatorControl, TRuntimeIndentAndSpacingFormat, TRuntimeStringFieldFormat, 
    TRuntimeFont, TRuntimeTabStops, TRuntimeTabStop, TViewContext, TDebugInformation]);
end;

end.
